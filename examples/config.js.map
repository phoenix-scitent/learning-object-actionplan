{"version":3,"sources":["node_modules/browser-pack/_prelude.js","example.js","node_modules/@most/multicast/dist/multicast.js","node_modules/@most/prelude/dist/prelude.js","node_modules/base64-js/index.js","node_modules/browser-resolve/empty.js","node_modules/buffer-shims/index.js","node_modules/buffer/index.js","node_modules/builtin-status-codes/browser.js","node_modules/core-util-is/lib/util.js","node_modules/desandro-classie/classie.js","node_modules/events/events.js","node_modules/html-parse-stringify2/lib/parse-tag.js","node_modules/html-parse-stringify2/lib/parse.js","node_modules/https-browserify/index.js","node_modules/ieee754/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/isarray/index.js","node_modules/jquery/dist/jquery.js","node_modules/most-subject/lib/commonjs/combinators/complete.js","node_modules/most-subject/lib/commonjs/combinators/error.js","node_modules/most-subject/lib/commonjs/combinators/hold.js","node_modules/most-subject/lib/commonjs/combinators/index.js","node_modules/most-subject/lib/commonjs/combinators/next.js","node_modules/most-subject/lib/commonjs/index.js","node_modules/most-subject/lib/commonjs/sources/HoldSubjectSource.js","node_modules/most-subject/lib/commonjs/sources/index.js","node_modules/most-subject/lib/commonjs/subjects/async/index.js","node_modules/most-subject/lib/commonjs/subjects/index.js","node_modules/most-subject/lib/commonjs/subjects/sync/index.js","node_modules/most/lib/LinkedList.js","node_modules/most/lib/Promise.js","node_modules/most/lib/Queue.js","node_modules/most/lib/Stream.js","node_modules/most/lib/combinator/accumulate.js","node_modules/most/lib/combinator/applicative.js","node_modules/most/lib/combinator/build.js","node_modules/most/lib/combinator/combine.js","node_modules/most/lib/combinator/concatMap.js","node_modules/most/lib/combinator/continueWith.js","node_modules/most/lib/combinator/delay.js","node_modules/most/lib/combinator/errors.js","node_modules/most/lib/combinator/filter.js","node_modules/most/lib/combinator/flatMap.js","node_modules/most/lib/combinator/limit.js","node_modules/most/lib/combinator/loop.js","node_modules/most/lib/combinator/merge.js","node_modules/most/lib/combinator/mergeConcurrently.js","node_modules/most/lib/combinator/observe.js","node_modules/most/lib/combinator/promises.js","node_modules/most/lib/combinator/sample.js","node_modules/most/lib/combinator/slice.js","node_modules/most/lib/combinator/switch.js","node_modules/most/lib/combinator/thru.js","node_modules/most/lib/combinator/timeslice.js","node_modules/most/lib/combinator/timestamp.js","node_modules/most/lib/combinator/transduce.js","node_modules/most/lib/combinator/transform.js","node_modules/most/lib/combinator/zip.js","node_modules/most/lib/disposable/Disposable.js","node_modules/most/lib/disposable/SettableDisposable.js","node_modules/most/lib/disposable/dispose.js","node_modules/most/lib/fatalError.js","node_modules/most/lib/fusion/Filter.js","node_modules/most/lib/fusion/FilterMap.js","node_modules/most/lib/fusion/Map.js","node_modules/most/lib/index.js","node_modules/most/lib/invoke.js","node_modules/most/lib/iterable.js","node_modules/most/lib/observable/fromObservable.js","node_modules/most/lib/observable/getObservable.js","node_modules/most/lib/observable/subscribe.js","node_modules/most/lib/runSource.js","node_modules/most/lib/scheduler/ClockTimer.js","node_modules/most/lib/scheduler/PropagateTask.js","node_modules/most/lib/scheduler/ScheduledTask.js","node_modules/most/lib/scheduler/Scheduler.js","node_modules/most/lib/scheduler/Timeline.js","node_modules/most/lib/scheduler/defaultScheduler.js","node_modules/most/lib/sink/DeferredSink.js","node_modules/most/lib/sink/IndexSink.js","node_modules/most/lib/sink/Pipe.js","node_modules/most/lib/sink/SafeSink.js","node_modules/most/lib/source/EventEmitterSource.js","node_modules/most/lib/source/EventTargetSource.js","node_modules/most/lib/source/core.js","node_modules/most/lib/source/from.js","node_modules/most/lib/source/fromArray.js","node_modules/most/lib/source/fromEvent.js","node_modules/most/lib/source/fromIterable.js","node_modules/most/lib/source/generate.js","node_modules/most/lib/source/iterate.js","node_modules/most/lib/source/periodic.js","node_modules/most/lib/source/tryEvent.js","node_modules/most/lib/source/unfold.js","node_modules/most/lib/task.js","node_modules/os-browserify/browser.js","node_modules/partybus/src/partybus.js","node_modules/process-nextick-args/index.js","node_modules/process/browser.js","node_modules/punycode/punycode.js","node_modules/querystring-es3/decode.js","node_modules/querystring-es3/encode.js","node_modules/querystring-es3/index.js","node_modules/ramda/index.js","node_modules/ramda/src/F.js","node_modules/ramda/src/T.js","node_modules/ramda/src/__.js","node_modules/ramda/src/add.js","node_modules/ramda/src/addIndex.js","node_modules/ramda/src/adjust.js","node_modules/ramda/src/all.js","node_modules/ramda/src/allPass.js","node_modules/ramda/src/always.js","node_modules/ramda/src/and.js","node_modules/ramda/src/any.js","node_modules/ramda/src/anyPass.js","node_modules/ramda/src/ap.js","node_modules/ramda/src/aperture.js","node_modules/ramda/src/append.js","node_modules/ramda/src/apply.js","node_modules/ramda/src/applySpec.js","node_modules/ramda/src/ascend.js","node_modules/ramda/src/assoc.js","node_modules/ramda/src/assocPath.js","node_modules/ramda/src/binary.js","node_modules/ramda/src/bind.js","node_modules/ramda/src/both.js","node_modules/ramda/src/call.js","node_modules/ramda/src/chain.js","node_modules/ramda/src/clamp.js","node_modules/ramda/src/clone.js","node_modules/ramda/src/comparator.js","node_modules/ramda/src/complement.js","node_modules/ramda/src/compose.js","node_modules/ramda/src/composeK.js","node_modules/ramda/src/composeP.js","node_modules/ramda/src/concat.js","node_modules/ramda/src/cond.js","node_modules/ramda/src/construct.js","node_modules/ramda/src/constructN.js","node_modules/ramda/src/contains.js","node_modules/ramda/src/converge.js","node_modules/ramda/src/countBy.js","node_modules/ramda/src/curry.js","node_modules/ramda/src/curryN.js","node_modules/ramda/src/dec.js","node_modules/ramda/src/defaultTo.js","node_modules/ramda/src/descend.js","node_modules/ramda/src/difference.js","node_modules/ramda/src/differenceWith.js","node_modules/ramda/src/dissoc.js","node_modules/ramda/src/dissocPath.js","node_modules/ramda/src/divide.js","node_modules/ramda/src/drop.js","node_modules/ramda/src/dropLast.js","node_modules/ramda/src/dropLastWhile.js","node_modules/ramda/src/dropRepeats.js","node_modules/ramda/src/dropRepeatsWith.js","node_modules/ramda/src/dropWhile.js","node_modules/ramda/src/either.js","node_modules/ramda/src/empty.js","node_modules/ramda/src/eqBy.js","node_modules/ramda/src/eqProps.js","node_modules/ramda/src/equals.js","node_modules/ramda/src/evolve.js","node_modules/ramda/src/filter.js","node_modules/ramda/src/find.js","node_modules/ramda/src/findIndex.js","node_modules/ramda/src/findLast.js","node_modules/ramda/src/findLastIndex.js","node_modules/ramda/src/flatten.js","node_modules/ramda/src/flip.js","node_modules/ramda/src/forEach.js","node_modules/ramda/src/forEachObjIndexed.js","node_modules/ramda/src/fromPairs.js","node_modules/ramda/src/groupBy.js","node_modules/ramda/src/groupWith.js","node_modules/ramda/src/gt.js","node_modules/ramda/src/gte.js","node_modules/ramda/src/has.js","node_modules/ramda/src/hasIn.js","node_modules/ramda/src/head.js","node_modules/ramda/src/identical.js","node_modules/ramda/src/identity.js","node_modules/ramda/src/ifElse.js","node_modules/ramda/src/inc.js","node_modules/ramda/src/indexBy.js","node_modules/ramda/src/indexOf.js","node_modules/ramda/src/init.js","node_modules/ramda/src/insert.js","node_modules/ramda/src/insertAll.js","node_modules/ramda/src/internal/_Set.js","node_modules/ramda/src/internal/_aperture.js","node_modules/ramda/src/internal/_arity.js","node_modules/ramda/src/internal/_arrayFromIterator.js","node_modules/ramda/src/internal/_assign.js","node_modules/ramda/src/internal/_checkForMethod.js","node_modules/ramda/src/internal/_clone.js","node_modules/ramda/src/internal/_cloneRegExp.js","node_modules/ramda/src/internal/_complement.js","node_modules/ramda/src/internal/_concat.js","node_modules/ramda/src/internal/_contains.js","node_modules/ramda/src/internal/_containsWith.js","node_modules/ramda/src/internal/_createPartialApplicator.js","node_modules/ramda/src/internal/_curry1.js","node_modules/ramda/src/internal/_curry2.js","node_modules/ramda/src/internal/_curry3.js","node_modules/ramda/src/internal/_curryN.js","node_modules/ramda/src/internal/_dispatchable.js","node_modules/ramda/src/internal/_dropLast.js","node_modules/ramda/src/internal/_dropLastWhile.js","node_modules/ramda/src/internal/_equals.js","node_modules/ramda/src/internal/_filter.js","node_modules/ramda/src/internal/_flatCat.js","node_modules/ramda/src/internal/_forceReduced.js","node_modules/ramda/src/internal/_functionName.js","node_modules/ramda/src/internal/_has.js","node_modules/ramda/src/internal/_identity.js","node_modules/ramda/src/internal/_indexOf.js","node_modules/ramda/src/internal/_isArguments.js","node_modules/ramda/src/internal/_isArray.js","node_modules/ramda/src/internal/_isFunction.js","node_modules/ramda/src/internal/_isInteger.js","node_modules/ramda/src/internal/_isNumber.js","node_modules/ramda/src/internal/_isObject.js","node_modules/ramda/src/internal/_isPlaceholder.js","node_modules/ramda/src/internal/_isRegExp.js","node_modules/ramda/src/internal/_isString.js","node_modules/ramda/src/internal/_isTransformer.js","node_modules/ramda/src/internal/_makeFlat.js","node_modules/ramda/src/internal/_map.js","node_modules/ramda/src/internal/_objectAssign.js","node_modules/ramda/src/internal/_of.js","node_modules/ramda/src/internal/_pipe.js","node_modules/ramda/src/internal/_pipeP.js","node_modules/ramda/src/internal/_quote.js","node_modules/ramda/src/internal/_reduce.js","node_modules/ramda/src/internal/_reduced.js","node_modules/ramda/src/internal/_stepCat.js","node_modules/ramda/src/internal/_toISOString.js","node_modules/ramda/src/internal/_toString.js","node_modules/ramda/src/internal/_xall.js","node_modules/ramda/src/internal/_xany.js","node_modules/ramda/src/internal/_xaperture.js","node_modules/ramda/src/internal/_xchain.js","node_modules/ramda/src/internal/_xdrop.js","node_modules/ramda/src/internal/_xdropLast.js","node_modules/ramda/src/internal/_xdropLastWhile.js","node_modules/ramda/src/internal/_xdropRepeatsWith.js","node_modules/ramda/src/internal/_xdropWhile.js","node_modules/ramda/src/internal/_xfBase.js","node_modules/ramda/src/internal/_xfilter.js","node_modules/ramda/src/internal/_xfind.js","node_modules/ramda/src/internal/_xfindIndex.js","node_modules/ramda/src/internal/_xfindLast.js","node_modules/ramda/src/internal/_xfindLastIndex.js","node_modules/ramda/src/internal/_xmap.js","node_modules/ramda/src/internal/_xreduceBy.js","node_modules/ramda/src/internal/_xtake.js","node_modules/ramda/src/internal/_xtakeWhile.js","node_modules/ramda/src/internal/_xwrap.js","node_modules/ramda/src/intersection.js","node_modules/ramda/src/intersectionWith.js","node_modules/ramda/src/intersperse.js","node_modules/ramda/src/into.js","node_modules/ramda/src/invert.js","node_modules/ramda/src/invertObj.js","node_modules/ramda/src/invoker.js","node_modules/ramda/src/is.js","node_modules/ramda/src/isArrayLike.js","node_modules/ramda/src/isEmpty.js","node_modules/ramda/src/isNil.js","node_modules/ramda/src/join.js","node_modules/ramda/src/juxt.js","node_modules/ramda/src/keys.js","node_modules/ramda/src/keysIn.js","node_modules/ramda/src/last.js","node_modules/ramda/src/lastIndexOf.js","node_modules/ramda/src/length.js","node_modules/ramda/src/lens.js","node_modules/ramda/src/lensIndex.js","node_modules/ramda/src/lensPath.js","node_modules/ramda/src/lensProp.js","node_modules/ramda/src/lift.js","node_modules/ramda/src/liftN.js","node_modules/ramda/src/lt.js","node_modules/ramda/src/lte.js","node_modules/ramda/src/map.js","node_modules/ramda/src/mapAccum.js","node_modules/ramda/src/mapAccumRight.js","node_modules/ramda/src/mapObjIndexed.js","node_modules/ramda/src/match.js","node_modules/ramda/src/mathMod.js","node_modules/ramda/src/max.js","node_modules/ramda/src/maxBy.js","node_modules/ramda/src/mean.js","node_modules/ramda/src/median.js","node_modules/ramda/src/memoize.js","node_modules/ramda/src/merge.js","node_modules/ramda/src/mergeAll.js","node_modules/ramda/src/mergeWith.js","node_modules/ramda/src/mergeWithKey.js","node_modules/ramda/src/min.js","node_modules/ramda/src/minBy.js","node_modules/ramda/src/modulo.js","node_modules/ramda/src/multiply.js","node_modules/ramda/src/nAry.js","node_modules/ramda/src/negate.js","node_modules/ramda/src/none.js","node_modules/ramda/src/not.js","node_modules/ramda/src/nth.js","node_modules/ramda/src/nthArg.js","node_modules/ramda/src/objOf.js","node_modules/ramda/src/of.js","node_modules/ramda/src/omit.js","node_modules/ramda/src/once.js","node_modules/ramda/src/or.js","node_modules/ramda/src/over.js","node_modules/ramda/src/pair.js","node_modules/ramda/src/partial.js","node_modules/ramda/src/partialRight.js","node_modules/ramda/src/partition.js","node_modules/ramda/src/path.js","node_modules/ramda/src/pathEq.js","node_modules/ramda/src/pathOr.js","node_modules/ramda/src/pathSatisfies.js","node_modules/ramda/src/pick.js","node_modules/ramda/src/pickAll.js","node_modules/ramda/src/pickBy.js","node_modules/ramda/src/pipe.js","node_modules/ramda/src/pipeK.js","node_modules/ramda/src/pipeP.js","node_modules/ramda/src/pluck.js","node_modules/ramda/src/prepend.js","node_modules/ramda/src/product.js","node_modules/ramda/src/project.js","node_modules/ramda/src/prop.js","node_modules/ramda/src/propEq.js","node_modules/ramda/src/propIs.js","node_modules/ramda/src/propOr.js","node_modules/ramda/src/propSatisfies.js","node_modules/ramda/src/props.js","node_modules/ramda/src/range.js","node_modules/ramda/src/reduce.js","node_modules/ramda/src/reduceBy.js","node_modules/ramda/src/reduceRight.js","node_modules/ramda/src/reduceWhile.js","node_modules/ramda/src/reduced.js","node_modules/ramda/src/reject.js","node_modules/ramda/src/remove.js","node_modules/ramda/src/repeat.js","node_modules/ramda/src/replace.js","node_modules/ramda/src/reverse.js","node_modules/ramda/src/scan.js","node_modules/ramda/src/sequence.js","node_modules/ramda/src/set.js","node_modules/ramda/src/slice.js","node_modules/ramda/src/sort.js","node_modules/ramda/src/sortBy.js","node_modules/ramda/src/sortWith.js","node_modules/ramda/src/split.js","node_modules/ramda/src/splitAt.js","node_modules/ramda/src/splitEvery.js","node_modules/ramda/src/splitWhen.js","node_modules/ramda/src/subtract.js","node_modules/ramda/src/sum.js","node_modules/ramda/src/symmetricDifference.js","node_modules/ramda/src/symmetricDifferenceWith.js","node_modules/ramda/src/tail.js","node_modules/ramda/src/take.js","node_modules/ramda/src/takeLast.js","node_modules/ramda/src/takeLastWhile.js","node_modules/ramda/src/takeWhile.js","node_modules/ramda/src/tap.js","node_modules/ramda/src/test.js","node_modules/ramda/src/times.js","node_modules/ramda/src/toLower.js","node_modules/ramda/src/toPairs.js","node_modules/ramda/src/toPairsIn.js","node_modules/ramda/src/toString.js","node_modules/ramda/src/toUpper.js","node_modules/ramda/src/transduce.js","node_modules/ramda/src/transpose.js","node_modules/ramda/src/traverse.js","node_modules/ramda/src/trim.js","node_modules/ramda/src/tryCatch.js","node_modules/ramda/src/type.js","node_modules/ramda/src/unapply.js","node_modules/ramda/src/unary.js","node_modules/ramda/src/uncurryN.js","node_modules/ramda/src/unfold.js","node_modules/ramda/src/union.js","node_modules/ramda/src/unionWith.js","node_modules/ramda/src/uniq.js","node_modules/ramda/src/uniqBy.js","node_modules/ramda/src/uniqWith.js","node_modules/ramda/src/unless.js","node_modules/ramda/src/unnest.js","node_modules/ramda/src/until.js","node_modules/ramda/src/update.js","node_modules/ramda/src/useWith.js","node_modules/ramda/src/values.js","node_modules/ramda/src/valuesIn.js","node_modules/ramda/src/view.js","node_modules/ramda/src/when.js","node_modules/ramda/src/where.js","node_modules/ramda/src/whereEq.js","node_modules/ramda/src/without.js","node_modules/ramda/src/xprod.js","node_modules/ramda/src/zip.js","node_modules/ramda/src/zipObj.js","node_modules/ramda/src/zipWith.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/lib/internal/streams/BufferList.js","node_modules/readable-stream/readable.js","node_modules/snabbdom-virtualize/lib/event-listeners.js","node_modules/snabbdom-virtualize/lib/index.js","node_modules/snabbdom-virtualize/lib/nodes.js","node_modules/snabbdom-virtualize/lib/strings.js","node_modules/snabbdom-virtualize/lib/utils.js","node_modules/snabbdom/h.js","node_modules/snabbdom/htmldomapi.js","node_modules/snabbdom/is.js","node_modules/snabbdom/modules/attributes.js","node_modules/snabbdom/modules/class.js","node_modules/snabbdom/modules/eventlisteners.js","node_modules/snabbdom/modules/props.js","node_modules/snabbdom/modules/style.js","node_modules/snabbdom/snabbdom.js","node_modules/snabbdom/thunk.js","node_modules/snabbdom/vnode.js","node_modules/stream-http/index.js","node_modules/stream-http/lib/capability.js","node_modules/stream-http/lib/request.js","node_modules/stream-http/lib/response.js","node_modules/string_decoder/index.js","node_modules/symbol-observable/index.js","node_modules/symbol-observable/lib/index.js","node_modules/symbol-observable/lib/ponyfill.js","node_modules/tincan/src/helpers.js","node_modules/tincan/src/tincan.js","node_modules/tincanjs/build/tincan-node.js","node_modules/to-arraybuffer/index.js","node_modules/url/url.js","node_modules/url/util.js","node_modules/util-deprecate/browser.js","node_modules/watcher/src/learningElementWatch.js","node_modules/watcher/src/mutationobserver.js","node_modules/watcher/src/watcher.js","node_modules/xhr2/lib/xhr2.js","node_modules/xtend/immutable.js","src/data.js","src/helpers.js","src/loaded.js","src/setup.js"],"names":[],"mappings":"AAAA;;;ACAA;;AACA;;AACA;;;;;;;;AAAiC;;AAEjC,IAAI,WAAW,AACb;iBADW,AACI,AACf;QAFW,AAEL,AACN;YAHW,AAGD,AACV;YAJW,AAID,AACV;UALW,AAKH,AACR;iBANW,AAMI,AACf;SAPF,AAAa,AAOJ;AAPI;;AAUb,IAAI;AAAJ,AAAqB;AAAA,AACnB;;AAGF,IAAI;;;UAEM,AACA,AACJ;aAHe,AACX,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;iBAAM,AACK,AACT;iBAFI,AAEK,AACT;iBALK,AAED,AAGK,AAEX;AALM,AACJ;cAHK,AAOC,AACR;;cAAM,AACE,AACN;kBAFI,AAEM,AACV;;mBAAQ,AACG,AACT;mBALE,AAGI,AAEG,AAEX;AAJQ,AACN;qBAJE,AAOS,AACb;iBAAS,CAAA,AAAC,aAAa,KAtBb,AACG,AAKR,AAQD,AAQK,AAAc,AAAK,AAIlC;AAZU,AACJ;AATK,AACP;AANe,AACjB;;;UAyBM,AACA,AACJ;aAHsB,AAClB,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KAxCb,AA0BU,AAKf,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANsB,AACxB;;;UAkBM,AACA,AACJ;aAHmB,AACf,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;cAFO,AAEC,AACR;;iBAAM,AACK,AACT;iBAFI,AAEK,AACT;iBANK,AAGD,AAGK,AAEX;AALM,AACJ;;;mBAKQ,AACG,AACT;iBAFM,AAEC,AACP;mBAJE,AACI,AAGG,AAEX;AALQ,AACN;;;;uBAMU,AACG,AACT;AACA;uBAJI,AACE,AAGG,AAEX;AALQ,AACN;;uBAIK,AACI,AACT;AACA;uBATI,AAMC,AAGI,AAEX;AALO,AACL;;;yBAKU,AACC,AACT;yBAHG,AACK,AAEC,AAEX;AAJU,AACR;;;2BAIS,AACE,AACT;2BAFO,AAEE,AACT;2BAJK,AACE,AAGE,AAEX;AALS,AACP;;2BAII,AACK,AACT;2BAFI,AAEK,AACT;2BAdC,AAKI,AAMD,AAGK,AAGb;AANQ,AACJ;AAPK,AACP;;yBAWQ,AACC,AACT;yBA9FE,AA4CO,AAKZ,AAQD,AAME,AACI,AAWC,AAiBK,AAEC,AAQvB;AAVsB,AACR;AAlBG,AACL;AAZI,AACN;AAFE,AACJ;AAPE,AACJ;AATK,AACP;AANmB,AACrB;;;UA0DM,AACA,AACJ;aAHK,AACD,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KApHb,AAsGP,AAKE,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANK,AACP;;;UAkBM,AACA,AACJ;aAHK,AACD,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KAtIb,AAwHP,AAKE,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANK,AACP;;;UAkBM,AACA,AACJ;aAHK,AACD,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KAxJb,AA0IP,AAKE,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANK,AACP;;;UAkBM,AACA,AACJ;aAHK,AACD,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KA1Kb,AA4JP,AAKE,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANK,AACP;;;UAkBM,AACA,AACJ;aAHK,AACD,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;cAAM,AACE,AACN;;mBAAQ,AACG,AACT;mBAJE,AAEI,AAEG,AAEX;AAJQ,AACN;qBAHE,AAMS,AACb;iBAAS,CAAA,AAAC,aAAa,KA5Lb,AA8KP,AAKE,AAED,AAOK,AAAc,AAAK,AAIlC;AAXU,AACJ;AAHK,AACP;AANK,AACP;;;UAkBM,AACA,AACJ;aAHQ,AACJ,AAEG,AAET;AAJM,AACJ;;YAGO,AACD,AACN;;;mBACU,AACG,AACT;iBAFM,AAEC,AACP;mBAJE,AACI,AAGG,AAEX;AALQ,AACN;;;;uBAMS,AACI,AACT;uBAHI,AACC,AAEI,AAEX;AAJO,AACL;;;yBAIU,AACC,AACT;yBAHG,AACK,AAEC,AAEX;AAJU,AACR;;yBAGO,AACE,AACT;yBAPG,AAKI,AAEE,AAEX;AAJS,AACP;;yBAGQ,AACC,AACT;yBA9NhB,AAAkB,AAgMJ,AAKD,AAED,AAME,AACI,AAKC,AASK,AAEC;AAFD,AACR;AAVG,AACL;AANI,AACN;AAFE,AACJ;AAPE,AACJ;AAHK,AACP;AANQ,AACV;AAjMc,AAChB;;AAuOF,IAAI;;AAGA;AACA;AACA;AACA;AACA;;YAA0B,AAClB,AACN;eAAS,CAAA,AAAC,aAFc,AAEf,AAAc,AACvB;aAVN,AAAyB,AACT,AAMc,AAGjB;AAHiB,AACxB;AAPU,AACZ;AAFqB,AACvB;;AAcF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,QAAJ,AAAY;AACZ,IAAI,YAAJ,AAAgB;AAChB,IAAI,WAAJ,AAAe;;AAEf,IAAI,0JAAA,AAAwJ,gDAAxJ,AAAmM,oBAAnM,AAAkN,WAAtN;AACA,IAAI,SAAS,sBAAA,AAAW,QAAX,AAAmB,OAAhC,AAAa,AAA0B;;AAEvC,IAAI;;uBAEmB,OADb,AACoB,AAC1B;uBAAmB,OAHvB,AAAa,AACH,AAEoB;AAFpB,AACN;AAFS,AACX;;AAMF;AACA;AACA;;AAEA;iBAAoB,AACH,AACf;uBAFkB,AAEG,AACrB;cAHF,AAAoB,AAGN;AAHM,AAClB;;AAKF;AACA;AACA;;AAEA;AACA;AACA;AACA;;;ACxpnlvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChrpdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpgUA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptvvrjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjntCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACprhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzrpjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChzjEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrtttBA,IAAI,SAAS,SAAT,MAAS,CAAS,KAAT,EAAe;AAC1B,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,MAAM,MAAzB,EAAiC,GAAjC,EAAqC;AACnC,QAAI,MAAM,OAAN,CAAc,MAAM,CAAN,CAAd,EAAwB,IAAE,CAA1B,KAAgC,CAAC,CAArC,EAAwC;AACtC,YAAM,MAAN,CAAa,CAAb,EAAe,CAAf;AACA;AACD;AACF;;AAED,SAAO,KAAP;AACD,CATD;;AAWA,IAAI,UAAU,SAAV,OAAU,CAAS,IAAT,EAAc;AAC1B,SAAO,KAAK,QAAL,GAAgB,WAAhB,GACF,OADE,CACM,MADN,EACc,GADd,EAC6B;AAD7B,GAEF,OAFE,CAEM,WAFN,EAEmB,EAFnB,EAE6B;AAF7B,GAGF,OAHE,CAGM,QAHN,EAGgB,GAHhB,EAG6B;AAH7B,GAIF,OAJE,CAIM,KAJN,EAIa,EAJb,EAI6B;AAJ7B,GAKF,OALE,CAKM,KALN,EAKa,EALb,CAAP,CAD0B,CAMU;AACrC,CAPD;;AASA,IAAI,QAAS,YAAU;AACrB,MAAI,SAAS,EAAb;;AAEA,MAAI,SAAU,YAAU;AACtB,WAAO;AACL,cAAQ,kBAAU;AAChB,YAAI,SAAQ,IAAZ;AACA,YAAI,MAAM,IAAV;AACA,eAAO;AACL,iBAAO,iBAAU;AACf,qBAAQ,IAAI,IAAJ,EAAR;AACA,mBAAO,OAAM,WAAN,EAAP;AACD,WAJI;AAKL,gBAAM,gBAAU;AACd,kBAAM,IAAI,IAAJ,EAAN;AACA,mBAAO;AACL,qBAAO,OAAM,WAAN,EADF;AAEL,mBAAK,IAAI,WAAJ,EAFA;AAGL,uBAAU,MAAM,MAHX,CAGkB;AAHlB,aAAP;AAKD;AAZI,SAAP;AAcD;AAlBI,KAAP;AAoBD,GArBa,EAAd;;AAuBA,SAAO;AACL,WAAO,eAAS,SAAT,EAAmB;AACxB,UAAI,gBAAgB,OAAO,SAAP,CAApB;AACA,UAAG,aAAH,EAAiB;AACf;AACD,OAFD,MAEO;AACL,eAAO,SAAP,IAAoB,OAAO,MAAP,EAApB;AACA,eAAO,OAAO,SAAP,EAAkB,KAAlB,EAAP;AACD;AACF,KATI;AAUL,UAAM,cAAS,SAAT,EAAmB;AACvB,UAAI,gBAAgB,OAAO,SAAP,CAApB;AACA,UAAG,aAAH,EAAiB;AACf,YAAI,OAAO,cAAc,IAAd,EAAX;AACA,eAAO,OAAO,SAAP,CAAP;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACL;AACD;AACF;AAnBI,GAAP;AAsBD,CAhDY,EAAb;;QAmDE,M,GAAA,M;QACA,O,GAAA,O;QACA,K,GAAA,K;;;;;;;;;kBCjEa,UAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,EAAkC;;AAE/C;AACA,MAAM,eAAe,OAAO,QAA5B;;AAEA;AACA,MAAM,iBAAiB,EAAE,SAAS,OAAO,aAAlB,EAAvB;;AAEA;AACA,MAAM,iBAAiB,EAAE,SAAS,OAAO,aAAlB,EAAvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,SAAS,EAAf;;AAEA,SAAO,cAAP,GAAwB;AACtB,QAAI,YADkB;AAEtB,gBAAY;AACV,YAAM,4CADI;AAEV,YAAM,cAFI;AAGV,mBAAa;AAHH;AAFU,GAAxB;;AASA,SAAO,UAAP,GAAoB,UAAU,gBAAV,EAA4B,YAA5B,EAA0C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,MAAM,EAAV;AACA,WAAO,GAAP;AACD,GA9CD;;AAgDA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,SAAS,uBAAW;AACtB,SAAK,WAAW,OAAO,QAAP,CAAgB,IADV;AAEtB,cAAU,OAAO;AAFK,GAAX,CAAb;;AAKA,MAAI,sBAAsB,SAAtB,mBAAsB,GAAY;AACpC,SAAK,iBAAL,GAAyB,EAAzB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,WAAL,GAAmB,CAAnB;AACA,SAAK,cAAL,GAAsB,IAAI,IAAJ,EAAtB;AACA,SAAK,oBAAL,GAA4B,CAA5B;AACA,SAAK,eAAL,GAAuB,KAAvB;AACD,GAPD;;AASA,sBAAoB,SAApB,GAAgC;AAC9B,sBAAkB,0BAAU,QAAV,EAAoB;AACpC;AACA;AACA;AACA,UAAI,YAAY,SAAS,eAAzB,EAA0C;AACxC,aAAK,eAAL,GAAuB,SAAS,eAAhC;AACA,8BAAE,QAAF,EAAY,OAAZ,CAAoB,gBAApB,EAAsC,CAAC,KAAK,eAAN,CAAtC;AACD;AACF,KAT6B;AAU9B,WAAO,iBAAY;AACjB,WAAK,OAAL,CAAa,CAAb;AACA,WAAK,gBAAL,CAAsB,CAAtB;AACA,WAAK,aAAL,CAAmB,KAAnB;AACD,KAd6B;AAe9B,UAAM,cAAU,QAAV,EAAoB;AACxB,UAAI,cAAc;AAChB,kBAAU,KAAK,WADC;AAEhB,yBAAiB,KAAK,kBAAL,EAFD;AAGhB,yBAAiB,KAAK,eAHN;AAIhB,2BAAmB,KAAK,iBAJR;AAKhB,yBAAiB,KAAK;AALN,OAAlB;AAOA,aAAO,QAAP,CAAgB,kBAAhB,EAAoC,WAApC,EAAiD;AAC/C,qBAAa,kBADkC;AAE/C,uBAAe,KAFgC;AAG/C,kBAAU;AAHqC,OAAjD;AAKD,KA5B6B;AA6B9B,SAAK,aAAU,SAAV,EAAoB;AACvB,UAAI,cAAc,OAAO,QAAP,CAAgB,kBAAhB,EAAoC;AACpD,kBAAU,kBAAS,WAAT,EAAqB;AAC7B,cAAI,cAAc,eAAe,EAAjC;AACA,cAAI,YAAY,GAAZ,KAAoB,IAApB,IAA4B,YAAY,KAAZ,KAAsB,IAAlD,IAA0D,YAAY,KAAZ,CAAkB,QAAlB,KAA+B,EAA7F,EAAiG;AAC/F,sBAAS,YAAY,KAAZ,CAAkB,QAA3B;AACD,WAFD,MAEO;AACL,sBAAS,IAAT;AACD;AACF;AARmD,OAApC,CAAlB;AAUD,KAxC6B;AAyC9B,sBAAkB,0BAAU,QAAV,EAAoB;AACpC,WAAK,oBAAL,GAA4B,QAA5B;AACD,KA3C6B;AA4C9B,aAAS,iBAAU,IAAV,EAAgB;AACvB,WAAK,WAAL,GAAmB,IAAnB;AACA,aAAO,IAAP;AACD,KA/C6B;AAgD9B,aAAS,mBAAY;AACnB,aAAO,KAAK,WAAZ;AACD,KAlD6B;AAmD9B,mBAAe,yBAAY;AACzB,WAAK,WAAL;AACD,KArD6B;AAsD9B,mBAAe,yBAAY;AACzB,WAAK,WAAL;AACD,KAxD6B;AAyD9B,mBAAe,uBAAU,UAAV,EAAsB;AACnC,WAAK,eAAL,GAAuB,UAAvB;AACA,aAAO,IAAP;AACD,KA5D6B;AA6D9B,mBAAe,uBAAU,UAAV,EAAsB;AACnC,aAAO,KAAK,eAAZ;AACD,KA/D6B;AAgE9B,wBAAoB,8BAAY;AAC9B,aAAO,KAAK,oBAAL,GAA4B,KAAK,kBAAL,EAAnC;AACD,KAlE6B;AAmE9B,wBAAoB,8BAAY;AAC9B,aAAO,KAAK,GAAL,CAAU,IAAI,IAAJ,EAAD,GAAe,KAAK,cAA7B,CAAP;AACD,KArE6B;AAsE9B,qBAAiB,yBAAU,KAAV,EAAiB;AAChC,WAAK,eAAL,GAAuB,KAAvB;AACD,KAxE6B;AAyE9B,qBAAiB,2BAAY;AAC3B,aAAO,eAAP;AACD,KA3E6B;AA4E9B,0BAAsB,8BAAU,aAAV,EAAyB,aAAzB,EAAwC;AAC5D,WAAK,iBAAL,CAAuB,aAAvB,IAAwC,aAAxC;AACD,KA9E6B;AA+E9B,0BAAsB,gCAAY;AAChC,aAAO,KAAK,iBAAZ;AACD;AAjF6B,GAAhC;;AAoFA,MAAI,kBAAkB,IAAI,mBAAJ,EAAtB;;AAEA;AACA;AACA;;AAEA,MAAM,UAAU,SAAV,OAAU,GAAU;AACxB,QAAM,UAAU,yBAAhB;;AAEA,QAAI,aAAa,EAAjB;;AAEA,QAAI,uBAAuB;AACzB,YAAM;AACJ,YAAI,4CADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADmB;AAOzB,eAAS,OAAO,UAAP,EAPgB;AAQzB,cAAQ;AACN,kBAAU;AADJ;AARiB,KAA3B;;AAaA,QAAI,qBAAqB;AACvB,YAAM;AACJ,YAAI,0CADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADiB;AAOvB,eAAS,OAAO,UAAP,EAPc;AAQvB,cAAQ;AACN,kBAAU;AADJ;AARe,KAAzB;;AAaA,eAAW,IAAX,CAAgB,oBAAhB;;AAEA;AACA,oBAAgB,GAAhB,CAAoB,UAAS,QAAT,EAAkB;;AAEpC,UAAI,aAAa,IAAjB,EAAuB;;AAErB,yBAAE,OAAF,CAAU;AACR,mBAAS,2CADD;AAER,yBAAe,KAFP;AAGR,wBAAc,IAHN;AAIR,mBAAS,mBAAY;AACnB,4BAAgB,gBAAhB,CAAiC,QAAjC;;AAEA,gBAAI,CAAC,gBAAgB,aAAhB,EAAL,EAAsC;AACpC,kBAAI,mBAAmB;AACrB,sBAAM;AACJ,sBAAI,wCADA;AAEJ,2BAAS;AACP,6BAAS;AADF;AAFL,iBADe;AAOrB,yBAAS,OAAO,UAAP,EAPY;AAQrB,wBAAQ;AACN,4BAAU,mBAAO,KAAP,CAAa,oCAAb,CAAkD,SAAS,eAA3D;AADJ;AARa,eAAvB;AAYA,yBAAW,IAAX,CAAgB,gBAAhB;AACD;AACF,WAtBO;AAuBR,kBAAQ,kBAAY;AAClB,4BAAgB,KAAhB;;AAEA;AACA,uBAAW,IAAX,CAAgB,kBAAhB;AACA,4BAAgB,IAAhB,CAAqB,UAAS,GAAT,EAAc,GAAd,EAAkB,CAAE,CAAzC;AACD;AA7BO,SAAV;AAgCD,OAlCD,MAkCO;AACL;AACA,wBAAgB,OAAhB,CAAwB,CAAxB;AACA,mBAAW,IAAX,CAAgB,kBAAhB;AACD;;AAED,aAAO,cAAP,CAAsB,UAAtB,EAAkC,UAAS,QAAT,EAAmB,IAAnB,EAAwB;AACxD,YAAI,MAAM,SAAS,GAAnB;AACA,YAAG,GAAH,EAAO;AAAE,kBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,SAAzC,MAA+C;AAAE,kBAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAAgC;AAClF,OAHD;AAKD,KA/CD;;AAiDA,WAAO,OAAP;AACD,GApFD;;AAsFA,MAAM,oBAAoB,SAApB,iBAAoB,OAA6B;AAAA,QAAlB,eAAkB,QAAlB,eAAkB;;AACrD,QAAM,UAAU,yBAAhB;;AAEA,oBAAgB,eAAhB,CAAgC,eAAhC;AACA,oBAAgB,IAAhB,CAAqB,UAAS,GAAT,EAAc,GAAd,EAAkB;AACrC,UAAG,GAAH,EAAO;AAAE,gBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,OAAzC,MAA+C;AAAE,gBAAQ,IAAR,CAAa,IAAI,QAAjB,EAA2B,QAA3B;AAAwC;AAC1F,KAFD;;AAIA,WAAO,OAAP;AACD,GATD;;AAWA,MAAM,aAAa,SAAb,UAAa,GAAU;AAC3B,QAAM,UAAU,yBAAhB;;AAEA,QAAI,aAAa,EAAjB;;AAEA,QAAI,qBAAqB;AACvB,YAAM;AACJ,YAAI,0CADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADiB;AAOvB,eAAS,OAAO,UAAP,EAPc;AAQvB,cAAQ;AACN,oBAAY,IADN;AAEN,iBAAS,IAFH;AAGd;AACA;AACA;AACA;AACA;AACA;AACQ,kBAAU;AATJ;AARe,KAAzB;;AAqBA,eAAW,IAAX,CAAgB,kBAAhB;;AAEA,WAAO,cAAP,CAAsB,UAAtB,EAAkC,UAAS,QAAT,EAAmB,IAAnB,EAAwB;AACxD,UAAI,MAAM,SAAS,GAAnB;AACA,UAAG,GAAH,EAAO;AAAE,gBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,OAAzC,MAA+C;AAAE,gBAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAAgC;AAClF,KAHD;;AAKA,WAAO,OAAP;AACD,GAlCD;;AAoCA;AACA;AACA;;AAEA,MAAM,aAAa,SAAb,UAAa,CAAS,IAAT,EAAe,IAAf,EAAoB;AACrC,QAAM,UAAU,yBAAhB;;AAEA,QAAI,aAAa,EAAjB;;AAEA,QAAI,eAAe,SAAf,YAAe,CAAU,IAAV,EAAgB;AACjC,UAAI,SAAS,eAAb,EAA8B;AAC5B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAS,KAAK,IAAf,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAQ;AAHI,WAHT;AAQL,kBAAQ,KAAK,IARR;AASL,wBAAc;AACZ,8CAAkC;AAChC,sBAAQ,EAAC,SAAS,QAAV,EADwB;AAEhC,6BAAe,EAAC,SAAS,eAAV;AAFiB,aADtB;AAKZ,4CAAgC,EAAC,QAAQ,EAAC,SAAS,MAAV,EAAT,EAA4B,eAAe,EAAC,SAAS,KAAK,IAAf,EAA3C,EALpB;AAMZ,6CAAiC,EAAC,QAAQ,EAAC,SAAS,OAAV,EAAT,EAA6B,eAAe,EAAC,SAAS,KAAK,KAAf,EAA5C;AANrB;AATT,SAAP;AAkBD;;AAED,UAAI,SAAS,cAAb,EAA6B;AAC3B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAS,KAAK,IAAf,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAQ;AAHI,WAHT;AAQL,kBAAQ,KAAK,IARR;AASL,wBAAc;AACZ,8CAAkC,EAAC,QAAQ,EAAC,SAAS,QAAV,EAAT,EAA8B,eAAe,EAAC,SAAS,cAAV,EAA7C,EADtB;AAEZ,4CAAgC,EAAC,QAAQ,EAAC,SAAS,MAAV,EAAT,EAA4B,eAAe,EAAC,SAAS,KAAK,IAAf,EAA3C,EAFpB;AAGZ,2CAA+B,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAT,EAA2B,eAAe,EAAC,SAAS,KAAK,GAAL,CAAS,GAAnB,EAA1C,EAHnB;AAIZ,+CAAmC;AACjC,sBAAQ,EAAC,SAAS,SAAV,EADyB;AAEjC,6BAAe,EAAC,SAAS,KAAK,GAAL,CAAS,OAAnB;AAFkB;AAJvB;AATT,SAAP;AAmBD;;AAED,UAAI,SAAS,gBAAb,EAA+B;AAC7B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAS,KAAK,IAAf,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAS,KAAK,IAAL,KAAc,UAAd,GAA2B,gDAA3B,GAA8E;AAH3E,WAHT;AAQL,kBAAQ,KAAK,IARR;AASL,wBAAc;AACZ,8CAAkC;AAChC,sBAAQ,EAAC,SAAS,QAAV,EADwB;AAEhC,6BAAe,EAAC,SAAS,gBAAV;AAFiB,aADtB;AAKZ,4CAAgC,EAAC,QAAQ,EAAC,SAAS,MAAV,EAAT,EAA4B,eAAe,EAAC,SAAS,KAAK,IAAf,EAA3C,EALpB;AAMZ,6CAAiC,EAAC,QAAQ,EAAC,SAAS,OAAV,EAAT,EAA6B,eAAe,EAAC,SAAS,KAAK,KAAf,EAA5C;AANrB;AATT,SAAP;AAkBD;;AAED,UAAI,SAAS,eAAb,EAA8B;AAC5B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAS,KAAK,IAAf,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAS,KAAK,IAAL,KAAc,UAAd,GAA2B,gDAA3B,GAA8E;AAH3E,WAHT;AAQL,kBAAQ,KAAK,IARR;AASL,wBAAc;AACZ,8CAAkC;AAChC,sBAAQ,EAAC,SAAS,QAAV,EADwB;AAEhC,6BAAe,EAAC,SAAS,eAAV;AAFiB,aADtB;AAKZ,4CAAgC,EAAC,QAAQ,EAAC,SAAS,MAAV,EAAT,EAA4B,eAAe,EAAC,SAAS,KAAK,IAAf,EAA3C,EALpB;AAMZ,2CAA+B,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAT,EAA2B,eAAe,EAAC,SAAS,KAAK,GAAL,CAAS,GAAnB,EAA1C,EANnB;AAOZ,+CAAmC;AACjC,sBAAQ,EAAC,SAAS,SAAV,EADyB;AAEjC,6BAAe,EAAC,SAAS,KAAK,GAAL,CAAS,OAAnB;AAFkB;AAPvB;AATT,SAAP;AAsBD;;AAED,UAAI,SAAS,aAAb,EAA4B;AAC1B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAU,KAAK,OAAL,GAAe,KAAf,GAAuB,KAAK,GAAvC,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAQ;AAHI,WAHT;AAQL,kBAAQ,KAAK,GARR;AASL,wBAAc;AACZ,8CAAkC,EAAC,QAAQ,EAAC,SAAS,QAAV,EAAT,EAA8B,eAAe,EAAC,SAAS,aAAV,EAA7C,EADtB;AAEZ,2CAA+B,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAT,EAA2B,eAAe,EAAC,SAAS,KAAK,GAAf,EAA1C,EAFnB;AAGZ,mDAAuC;AACrC,sBAAQ,EAAC,SAAS,aAAV,EAD6B;AAErC,6BAAe,EAAC,SAAS,KAAK,WAAf;AAFsB,aAH3B;AAOZ,6CAAiC,EAAC,QAAQ,EAAC,SAAS,OAAV,EAAT,EAA6B,eAAe,EAAC,SAAS,KAAK,KAAf,EAA5C;AAPrB;AATT,SAAP;AAmBD;;AAED,UAAI,SAAS,WAAb,EAA0B;AACxB,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,EAAC,SAAU,KAAK,OAAL,GAAe,KAAf,GAAuB,KAAK,GAAvC,EADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf,EAFH;AAGZ,oBAAQ;AAHI,WAHT;AAQL,kBAAQ,KAAK,GARR;AASL,wBAAc;AACZ,8CAAkC,EAAC,QAAQ,EAAC,SAAS,QAAV,EAAT,EAA8B,eAAe,EAAC,SAAS,WAAV,EAA7C,EADtB;AAEZ,2CAA+B,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAT,EAA2B,eAAe,EAAC,SAAS,KAAK,GAAf,EAA1C,EAFnB;AAGZ,mDAAuC;AACrC,sBAAQ,EAAC,SAAS,aAAV,EAD6B;AAErC,6BAAe,EAAC,SAAS,KAAK,WAAf;AAFsB,aAH3B;AAOZ,2CAA+B,EAAC,QAAQ,EAAC,SAAS,KAAV,EAAT,EAA2B,eAAe,EAAC,SAAS,KAAK,GAAL,CAAS,GAAnB,EAA1C,EAPnB;AAQZ,+CAAmC;AACjC,sBAAQ,EAAC,SAAS,SAAV,EADyB;AAEjC,6BAAe,EAAC,SAAS,KAAK,GAAL,CAAS,OAAnB;AAFkB;AARvB;AATT,SAAP;AAuBD;;AAED,UAAI,SAAS,aAAb,EAA4B;AAC1B,eAAO;AACL,gBAAM,YADD;AAEL,wBAAc,UAFT;AAGL,wBAAc;AACZ,oBAAQ,aADI;AAEZ,2BAAe,EAAC,SAAS,KAAK,UAAf;AAFH,WAHT;AAOL,wBAAc;AACZ,8CAAkC,EAAC,QAAQ,EAAC,SAAS,QAAV,EAAT,EAA8B,eAAe,EAAC,SAAS,aAAV,EAA7C;AADtB;AAPT,SAAP;AAWD;AAEF,KAxJD;;AA0JA,QAAI,eAAe,SAAf,YAAe,CAAU,IAAV,EAAgB;AACjC,UAAI,SAAS,eAAb,EAA8B;AAC5B,eAAO,EAAP;AACD;;AAED,UAAI,SAAS,cAAb,EAA6B;AAC3B,eAAO;AACL,sBAAY,mBAAO,KAAP,CAAa,oCAAb,CAAkD,KAAK,GAAL,CAAS,OAA3D;AADP,SAAP;AAGD;;AAED,UAAI,SAAS,gBAAb,EAA+B;AAC7B,eAAO,EAAP;AACD;;AAED,UAAI,SAAS,eAAb,EAA8B;AAC5B,eAAO;AACL,sBAAY,mBAAO,KAAP,CAAa,oCAAb,CAAkD,KAAK,GAAL,CAAS,OAA3D;AADP,SAAP;AAGD;;AAED,UAAI,SAAS,aAAb,EAA4B;AAC1B,eAAO,EAAP;AACD;;AAED,UAAI,SAAS,WAAb,EAA0B;AACxB,eAAO;AACL,sBAAY,mBAAO,KAAP,CAAa,oCAAb,CAAkD,KAAK,GAAL,CAAS,OAA3D;AADP,SAAP;AAGD;;AAED,UAAI,SAAS,aAAb,EAA4B;AAC1B,eAAO,EAAP;AACD;AAEF,KAnCD;;AAqCA,QAAI,uBAAuB;AACzB,YAAM;AACJ,YAAI,iDADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADmB;AAOzB,cAAQ,aAAa,IAAb,CAPiB;AAQzB,cAAQ,aAAa,IAAb,CARiB;AASzB,eAAS,OAAO,UAAP;AATgB,KAA3B;;AAYA,eAAW,IAAX,CAAgB,oBAAhB;;AAEA,WAAO,cAAP,CAAsB,UAAtB,EAAkC,UAAS,QAAT,EAAmB,IAAnB,EAAwB;AACxD,UAAI,MAAM,SAAS,GAAnB;AACA,UAAG,GAAH,EAAO;AAAE,gBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,OAAzC,MAA+C;AAAE,gBAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAAgC;AAClF,KAHD;;AAKA,WAAO,OAAP;AACD,GAxND;;AA0NA,MAAM,eAAe,SAAf,YAAe,QAA8B;AAAA,QAAnB,UAAmB,SAAnB,UAAmB;AAAA,QAAP,IAAO,SAAP,IAAO;;AACjD;AACA;;AAEA,QAAI,QAAQ,eAAM,KAAN,CAAY,sBAAQ,IAAR,CAAZ,CAAZ;AACA,WAAO,WAAW,eAAX,EAA4B,EAAC,YAAY,UAAb,EAAyB,MAAM,IAA/B,EAAqC,OAAO,KAA5C,EAA5B,CAAP;AACD,GAND;;AAQA,MAAM,cAAc,SAAd,WAAc,QAA8B;AAAA,QAAnB,UAAmB,SAAnB,UAAmB;AAAA,QAAP,IAAO,SAAP,IAAO;;AAChD;AACA;;AAEA,QAAI,MAAM,eAAM,IAAN,CAAW,sBAAQ,IAAR,CAAX,CAAV;AACA,WAAO,WAAW,cAAX,EAA2B,EAAC,YAAY,UAAb,EAAyB,MAAM,IAA/B,EAAqC,KAAK,GAA1C,EAA3B,CAAP;AACD,GAND;;AAQA,MAAM,gBAAgB,SAAhB,aAAgB,QAAoC;AAAA,QAAzB,UAAyB,SAAzB,UAAyB;AAAA,QAAb,IAAa,SAAb,IAAa;AAAA,QAAP,IAAO,SAAP,IAAO;;AACxD;AACA;AACA;;AAEA,QAAI,QAAQ,eAAM,KAAN,CAAY,sBAAQ,IAAR,CAAZ,CAAZ;AACA,WAAO,WAAW,gBAAX,EAA6B,EAAC,YAAY,UAAb,EAAyB,MAAM,IAA/B,EAAqC,MAAM,IAA3C,EAAiD,OAAO,KAAxD,EAA7B,CAAP;AACD,GAPD;;AASA,MAAM,eAAe,SAAf,YAAe,QAAoC;AAAA,QAAzB,UAAyB,SAAzB,UAAyB;AAAA,QAAb,IAAa,SAAb,IAAa;AAAA,QAAP,IAAO,SAAP,IAAO;;AACvD;AACA;AACA;;AAEA,QAAI,MAAM,eAAM,IAAN,CAAW,sBAAQ,IAAR,CAAX,CAAV;AACA,WAAO,WAAW,eAAX,EAA4B,EAAC,YAAY,UAAb,EAAyB,MAAM,IAA/B,EAAqC,MAAM,IAA3C,EAAiD,KAAK,GAAtD,EAA5B,CAAP;AACD,GAPD;;AASA,MAAM,aAAa,SAAb,UAAa,QAAmD;AAAA,QAAxC,UAAwC,SAAxC,UAAwC;AAAA,QAA5B,GAA4B,SAA5B,GAA4B;AAAA,QAAvB,WAAuB,SAAvB,WAAuB;AAAA,QAAV,OAAU,SAAV,OAAU;;AACpE;AACA;AACA;AACA;;AAEA,QAAI,QAAQ,eAAM,KAAN,CAAY,sBAAQ,GAAR,CAAZ,CAAZ;AACA,WAAO,WAAW,aAAX,EAA0B;AAC/B,kBAAY,UADmB;AAE/B,WAAK,GAF0B;AAG/B,mBAAa,WAHkB;AAI/B,eAAS,OAJsB;AAK/B,aAAO;AALwB,KAA1B,CAAP;AAOD,GAdD;;AAgBA,MAAM,YAAY,SAAZ,SAAY,QAAmD;AAAA,QAAxC,UAAwC,SAAxC,UAAwC;AAAA,QAA5B,GAA4B,SAA5B,GAA4B;AAAA,QAAvB,WAAuB,SAAvB,WAAuB;AAAA,QAAV,OAAU,SAAV,OAAU;;AACnE;AACA;AACA;AACA;;AAEA,QAAI,MAAM,eAAM,IAAN,CAAW,sBAAQ,GAAR,CAAX,CAAV;AACA,WAAO,WAAW,WAAX,EAAwB;AAC7B,kBAAY,UADiB;AAE7B,WAAK,GAFwB;AAG7B,mBAAa,WAHgB;AAI7B,eAAS,OAJoB;AAK7B,WAAK;AALwB,KAAxB,CAAP;AAOD,GAdD;;AAgBA,MAAM,aAAa,SAAb,UAAa,QAAwB;AAAA,QAAb,UAAa,SAAb,UAAa;;AACzC;;AAEA,WAAO,WAAW,aAAX,EAA0B,EAAC,YAAY,UAAb,EAA1B,CAAP;AACD,GAJD;;AAMA;AACA;AACA;;AAEA;AACA,MAAI,WAAW,uCAAf;AACA,MAAI,cAAc,QAAlB;;AAEA;AACA,MAAI,kBAAkB,0CAAtB;;AAEA,MAAM,kBAAkB,SAAlB,eAAkB,QAAkD;AAAA,QAAvC,UAAuC,SAAvC,UAAuC;AAAA,QAA3B,IAA2B,SAA3B,IAA2B;AAAA,QAArB,QAAqB,SAArB,QAAqB;AAAA,QAAX,QAAW,SAAX,QAAW;;AACxE;AACA;AACA;AACA;;AAEA,QAAM,UAAU,yBAAhB;;AAEA,QAAI,aAAa,EAAjB;;AAEA,QAAI,eAAe,SAAf,YAAe,GAAY;AAC7B,aAAO;AACL,cAAM,YADD;AAEL,sBAAc,UAFT;AAGL,sBAAc;AACZ,kBAAQ,EAAC,SAAS,QAAV,EADI;AAEZ,yBAAe,EAAC,SAAS,eAAe,OAAf,CAAV,EAFH;AAGZ,kBAAQ,kBAAkB,GAAlB,GAAwB;AAHpB,SAHT;AAQL,gBAAQ;AARH,OAAP;AAUD,KAXD;;AAaA,QAAI,eAAe,SAAf,YAAe,GAAY;AAC7B,aAAO;AACL,oBAAY;AADP,OAAP;AAGD,KAJD;;AAMA,QAAI,UAAU,EAAd;;AAEA,QAAI,aAAa,EAAjB;;AAEA,eAAW,eAAX,IAA8B,UAA9B;;AAEA,YAAQ,YAAR,IAAwB,UAAxB;;AAEA,QAAI,uBAAuB;AACzB,YAAM;AACJ,YAAI,QADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADmB;AAOzB,cAAQ,cAPiB;AAQzB,cAAQ,cARiB;AASzB,eAAS;AATgB,KAA3B;;AAYA,eAAW,IAAX,CAAgB,oBAAhB;;AAEA,WAAO,cAAP,CAAsB,UAAtB,EAAkC,UAAS,QAAT,EAAmB,IAAnB,EAAwB;AACxD,UAAI,MAAM,SAAS,GAAnB;AACA,UAAG,GAAH,EAAO;AAAE,gBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,OAAzC,MAA+C;AAAE,gBAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAAgC;AAClF,KAHD;;AAKA,WAAO,OAAP;AACD,GAzDD;;AA2DA;;AAEA,MAAM,sBAAsB,SAAtB,mBAAsB,SAAwB;AAAA,QAAb,UAAa,UAAb,UAAa;;AAClD,QAAM,UAAU,yBAAhB;;AAEA;;AAEA,QAAI,QAAQ,eAAe,OAAO,QAAP,CAAgB,EAA/B,GAAoC,QAApC,GAA+C,QAA3D;;AAEA,QAAI,iBAAiB,SAAjB,cAAiB,CAAU,MAAV,EAAkB;AACrC,UAAI,SAAS,UAAb;AACA,UAAI,YAAY,SAAZ,SAAY,CAAU,SAAV,EAAqB;AACnC,eAAO,UAAU,OAAV,EAAmB,SAAnB,IAAiC,UAAU,OAAV,EAAmB,SAAnB,EAA8B,MAA9B,MAA0C,OAAO,KAAP,CAAa,OAAb,CAAqB,IAAhG,GAAyG,UAAU,OAAV,EAAmB,MAAnB,MAA+B,OAAO,KAAP,CAAa,IAA5J;AACD,OAFD;AAGA,UAAI,aAAa,OAAO,YAAP,EAAqB,MAArB,CAA4B,UAAU,SAAV,EAAqB;AAChE,eAAO,UAAU,SAAV,EAAqB,YAArB,KAAsC,UAAU,SAAV,EAAqB,YAArB,EAAmC,eAAnC,MAAwD,MAArG;AACD,OAFgB,CAAjB;AAGA,UAAI,YAAY,WAAW,MAAX,CAAkB,SAAlB,CAAhB;AACA,cAAQ,IAAR,CAAa,UAAU,MAAV,KAAqB,CAArB,GAAyB,IAAzB,GAAgC,UAAU,CAAV,EAAa,QAAb,EAAuB,UAAvB,CAA7C,EAAiF,QAAjF;AACD,KAVD;;AAYA,qBAAE,IAAF,CAAO;AACL,WAAK,OAAO,YAAP,CAAoB,CAApB,EAAuB,UAAvB,IAAqC,YAArC,GAAoD,KADpD;AAEL,YAAM,KAFD;AAGL,kBAAY,oBAAU,GAAV,EAAe;AACzB,YAAI,gBAAJ,CAAqB,eAArB,EAAsC,OAAO,YAAP,CAAoB,CAApB,EAAuB,MAAvB,CAAtC;AACD,OALI;AAML,eAAS;AANJ,KAAP;;AASA,WAAO,OAAP;AACD,GA7BD;;AA+BA,MAAM,uBAAuB,SAAvB,oBAAuB,SAAwB;AAAA,QAAb,UAAa,UAAb,UAAa;;AACnD,QAAM,UAAU,yBAAhB;;AAEA;;AAEA,QAAI,QAAQ,eAAe,OAAO,QAAP,CAAgB,EAA/B,GAAoC,QAApC,GAA+C,QAA3D;;AAEA,QAAI,iBAAiB,SAAjB,cAAiB,CAAU,MAAV,EAAkB;AACrC,UAAI,SAAS,UAAb;AACA,UAAI,YAAY,SAAZ,SAAY,CAAU,SAAV,EAAqB;AACnC,eAAO,UAAU,OAAV,EAAmB,SAAnB,IAAiC,UAAU,OAAV,EAAmB,SAAnB,EAA8B,MAA9B,MAA0C,OAAO,KAAP,CAAa,OAAb,CAAqB,IAAhG,GAAyG,UAAU,OAAV,EAAmB,MAAnB,MAA+B,OAAO,KAAP,CAAa,IAA5J;AACD,OAFD;AAGA,UAAI,aAAa,OAAO,YAAP,EAAqB,MAArB,CAA4B,UAAU,SAAV,EAAqB;AAChE,eAAO,UAAU,SAAV,EAAqB,YAArB,KAAsC,UAAU,SAAV,EAAqB,YAArB,EAAmC,eAAnC,MAAwD,MAArG;AACD,OAFgB,CAAjB;AAGA,UAAI,YAAY,WAAW,MAAX,CAAkB,SAAlB,CAAhB;AACA,cAAQ,IAAR,CAAa,WAAW,GAAX,CAAe,UAAU,SAAV,EAAqB;AAAE,eAAO,EAAC,OAAO,UAAU,QAAV,EAAoB,UAApB,CAAR,EAAP;AAAiD,OAAvF,CAAb,EAAuG,QAAvG;AACD,KAVD;;AAYA,qBAAE,IAAF,CAAO;AACL,WAAK,OAAO,YAAP,CAAoB,CAApB,EAAuB,UAAvB,IAAqC,YAArC,GAAoD,KADpD;AAEL,YAAM,KAFD;AAGL,kBAAY,oBAAU,GAAV,EAAe;AACzB,YAAI,gBAAJ,CAAqB,eAArB,EAAsC,OAAO,YAAP,CAAoB,CAApB,EAAuB,MAAvB,CAAtC;AACD,OALI;AAML,eAAS;AANJ,KAAP;;AASA,WAAO,OAAP;AACD,GA7BD;;AA+BA;AACA;AACA;;AAEA;AACA,MAAI,iBAAiB,kDAArB;AACA,MAAI,oBAAoB,qBAAxB;;AAEA;AACA,MAAI,wBAAwB,gDAA5B;AACA,MAAI,+BAA+B,yDAAnC;;AAEA,MAAM,oBAAoB,SAApB,iBAAoB,SAAsB;AAAA,QAAX,QAAW,UAAX,QAAW;;AAC9C;;AAEA,QAAI,aAAa,gBAAE,OAAF,CAAU,gBAAE,IAAZ,EAAkB,gBAAE,IAApB,EAA0B,QAA1B,CAAjB;AACA,QAAI,YAAY,gBAAE,OAAF,CAAU,gBAAE,IAAZ,EAAkB,gBAAE,MAApB,EAA4B,QAA5B,CAAhB;;AAEA,QAAM,UAAU,yBAAhB;;AAEA,QAAI,aAAa,EAAjB;;AAEA,QAAI,eAAe,SAAf,YAAe,GAAY;AAC7B,aAAO;AACL,cAAM,YADD;AAEL,sBAAc,UAFT;AAGL,sBAAc;AACZ,kBAAQ,EAAC,SAAS,UAAV,EADI;AAEZ,yBAAe,EAAC,SAAS,eAAe,OAAf,CAAV,EAFH;AAGZ,kBAAQ;AAHI,SAHT;AAQL,gBAAQ;AARH,OAAP;AAUD,KAXD;;AAaA,QAAI,eAAe,SAAf,YAAe,GAAY;AAC7B,aAAO,EAAP;AACD,KAFD;;AAIA,QAAI,UAAU,EAAd;;AAEA,QAAI,aAAa,EAAjB;;AAEA,eAAW,qBAAX,IAAoC,UAApC;;AAEA,eAAW,4BAAX,IAA2C,SAA3C;;AAEA,YAAQ,YAAR,IAAwB,UAAxB;;AAEA,QAAI,uBAAuB;AACzB,YAAM;AACJ,YAAI,cADA;AAEJ,iBAAS;AACP,mBAAS;AADF;AAFL,OADmB;AAOzB,cAAQ,cAPiB;AAQzB,cAAQ,cARiB;AASzB,eAAS;AATgB,KAA3B;;AAYA,eAAW,IAAX,CAAgB,oBAAhB;;AAEA,WAAO,cAAP,CAAsB,UAAtB,EAAkC,UAAS,QAAT,EAAmB,IAAnB,EAAwB;AACxD,UAAI,MAAM,SAAS,GAAnB;AACA,UAAG,GAAH,EAAO;AAAE,gBAAQ,KAAR,CAAc,GAAd,EAAmB,QAAnB;AAAgC,OAAzC,MAA+C;AAAE,gBAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAAgC;AAClF,KAHD;;AAKA,WAAO,OAAP;AACD,GAzDD;;AA2DA,MAAM,oBAAoB,SAApB,iBAAoB,SAAwB;AAAA,QAAb,UAAa,UAAb,UAAa;;AAChD,QAAM,UAAU,yBAAhB;;AAEA;;AAEA,QAAI,QAAQ,eAAe,OAAO,QAAP,CAAgB,EAA/B,GAAoC,QAApC,GAA+C,cAA3D;;AAEA,QAAI,uBAAuB,SAAvB,oBAAuB,CAAS,MAAT,EAAgB;AACzC,UAAI,eAAe,UAAnB;AACA,UAAI,YAAY,SAAZ,SAAY,CAAS,SAAT,EAAoB;AAClC,eAAO,UAAU,OAAV,EAAmB,SAAnB,IAAiC,UAAU,OAAV,EAAmB,SAAnB,EAA8B,MAA9B,MAA0C,OAAO,KAAP,CAAa,OAAb,CAAqB,IAAhG,GAAyG,UAAU,OAAV,EAAmB,MAAnB,MAA+B,OAAO,KAAP,CAAa,IAA5J;AACD,OAFD;AAGA,UAAI,aAAa,OAAO,YAAP,EAAqB,MAArB,CAA4B,SAA5B,EAAuC,MAAvC,CAA8C,UAAS,SAAT,EAAoB;AACjF,eAAO,UAAU,SAAV,EAAqB,YAArB,KAAsC,UAAU,SAAV,EAAqB,YAArB,EAAmC,qBAAnC,MAA8D,YAA3G;AACD,OAFgB,EAEd,IAFc,CAET,UAAS,CAAT,EAAW,CAAX,EAAa;AACnB;AACA;AACA,eAAO,IAAI,IAAJ,CAAS,EAAE,SAAX,IAAwB,IAAI,IAAJ,CAAS,EAAE,SAAX,CAA/B;AACD,OANgB,CAAjB;;AAQA,UAAI,kBAAkB,gBAAE,IAAF,CAAO,UAAP,CAAtB;;AAEA;AACA,UAAI,OAAO,gBAAE,MAAF,CAAS,EAAT,EAAa,CAAC,SAAD,EAAY,YAAZ,EAA0B,4BAA1B,CAAb,EAAsE,eAAtE,CAAX;;AAEA,cAAQ,IAAR,CAAa,IAAb,EAAmB,QAAnB;AAED,KApBD;;AAsBA,qBAAE,IAAF,CAAO;AACL,WAAK,OAAO,YAAP,CAAoB,CAApB,EAAuB,UAAvB,IAAqC,YAArC,GAAoD,KADpD;AAEL,YAAM,KAFD;AAGL,kBAAY,oBAAU,GAAV,EAAe;AACzB,YAAI,gBAAJ,CAAqB,eAArB,EAAsC,OAAO,YAAP,CAAoB,CAApB,EAAuB,MAAvB,CAAtC;AACD,OALI;AAML,eAAS;AANJ,KAAP;;AASA,WAAO,OAAP;AACD,GAvCD;;AAyCA;AACA;AACA;;AAEA,MAAM,QAAQ,SAAR,KAAQ,CAAS,YAAT,EAAsB;AAClC,WAAO,UAAC,MAAD;AAAA,aAAY,KAAK,IAAL,qBAAa,YAAb,EAA4B,MAA5B,GAAsC,GAAtC,CAA0C,UAAC,MAAD,EAAY;AAAE,gBAAQ,GAAR,CAAY,OAAZ,EAAqB,MAArB;AAA8B,OAAtF,CAAZ;AAAA,KAAP;AACD,GAFD;;AAIA,MAAM,MAAM;AACV,WAAO,UAAU,MAAM,WAAN,CAAV,GAA+B,OAD5B;AAEV,uBAAmB,UAAU,MAAM,qBAAN,CAAV,GAAyC,iBAFlD;AAGV,cAAU,UAAU,MAAM,eAAN,CAAV,GAAmC,UAHnC;AAIV,kBAAc,UAAU,MAAM,iBAAN,CAAV,GAAqC,YAJzC;AAKV,iBAAa,UAAU,MAAM,gBAAN,CAAV,GAAoC,WALvC;AAMV,mBAAe,UAAU,MAAM,kBAAN,CAAV,GAAsC,aAN3C;AAOV,kBAAc,UAAU,MAAM,iBAAN,CAAV,GAAqC,YAPzC;AAQV,gBAAY,UAAU,MAAM,eAAN,CAAV,GAAmC,UARrC;AASV,eAAW,UAAU,MAAM,cAAN,CAAV,GAAkC,SATnC;AAUV,gBAAY,UAAU,MAAM,eAAN,CAAV,GAAmC,UAVrC;AAWV,qBAAiB,UAAU,MAAM,mBAAN,CAAV,GAAuC,eAX9C;AAYV,yBAAqB,UAAU,MAAM,uBAAN,CAAV,GAA2C,mBAZtD;AAaV,0BAAsB,UAAU,MAAM,wBAAN,CAAV,GAA4C,oBAbxD;AAcV,uBAAmB,UAAU,MAAM,qBAAN,CAAV,GAAyC,iBAdlD;AAeV,uBAAmB,UAAU,MAAM,qBAAN,CAAV,GAAyC;AAflD,GAAZ;;AAkBA,gBAAI,EAAJ,CAAO,eAAP,EAAwB,YAAM;AAAE,QAAI,KAAJ,GAAY,KAAZ;AAAsB,GAAtD;AACA,gBAAI,EAAJ,CAAO,2BAAP,EAAoC,UAAC,MAAD,EAAY;AAAE,QAAI,iBAAJ,CAAsB,MAAtB,EAA8B,KAA9B;AAAuC,GAAzF;AACA,gBAAI,EAAJ,CAAO,kBAAP,EAA2B,YAAM;AAAE,QAAI,QAAJ,GAAe,KAAf;AAAwB,GAA3D;;AAEA,gBAAI,IAAJ,CAAS,eAAT;;AAEA,SAAO,GAAP;AAED,C;;AAh5BD;;;;AACA;;AACA;;AACA;;;;AACA;;IAAY,I;;AACZ;;AACA;;;;;;;;kNANwB;;;AAg5BvB;;;;AChjgtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnEA;;AACA;;AACA;;IAAY,I;;;;AAEZ,qCAAc,uCAAd,EAAuD,yBAAvD;;AAEA,IAAI,QAAQ,EAAZ;;AAEA,KAAK,SAAL,CAAe,4BAAf,iBACG,GADH,CACO,YAAM;AAAE,UAAQ,EAAR;AAAY,CAD3B,EAEG,KAFH;;AAIA,QAAQ,GAAR,CAAY,qBAAZ,EAAmC,KAAK,GAAL,EAAnC;;AAEA,IAAM,mBAAmB,KAAK,SAAL,CAAe,yBAAf,iBACtB,OADsB,CACd;AAAA,SAAO,KAAK,IAAL,CAAU,GAAV,CAAP;AAAA,CADc,EAEtB,MAFsB,CAEf;AAAA,SAAM,MAAM,GAAG,YAAH,CAAgB,sBAAhB,CAAN,MAAmD,IAAzD;AAAA,CAFe,EAGtB,GAHsB,CAGlB;AAAA,SAAM,MAAM,GAAG,YAAH,CAAgB,sBAAhB,CAAN,IAAiD,IAAvD;AAAA,CAHkB,EAItB,GAJsB,CAIlB;AAAA,SAAM,GAAG,YAAH,CAAgB,aAAhB,EAA+B,IAA/B,CAAN;AAAA,CAJkB,CAAzB;;QAMS,gB,GAAA,gB;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/BA;;AAEA,IAAM,mBAAmB,OAAO,gBAAP,IAA2B,OAAO,sBAAlC,IAA4D,OAAO,mBAA5F;;AAEA,IAAI,oBAAoB,EAAxB;;AAEA,IAAM,WAAW,IAAI,gBAAJ,CAAqB,UAAS,SAAT,EAAoB;AACxD,oBAAkB,OAAlB,CAA0B,gBAAmC;AAAA,QAAxB,QAAwB,QAAxB,QAAwB;AAAA,QAAd,WAAc,QAAd,WAAc;;AAC3D;AACA;AACA,QAAM,iBAAiB,SAAS,gBAAT,CAA0B,QAA1B,CAAvB;AACA,QAAG,eAAe,MAAf,GAAwB,CAA3B,EAA6B;AAC3B,oBAAI,IAAJ,CAAS,WAAT,EAAsB,cAAtB;AACD,KAFD,MAEO;AACL,oBAAI,IAAJ,CAAS,4BAAT;AACD;AACF,GATD;AAUD,CAXgB,CAAjB;;AAaA,SAAS,OAAT,CAAiB,QAAjB,EAA2B,EAAE,YAAY,IAAd,EAAoB,WAAW,IAA/B,EAAqC,eAAe,IAApD,EAA0D,SAAS,IAAnE,EAA3B;;AAEA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,QAAD,EAAW,WAAX,EAA2B;AAC/C,oBAAkB,IAAlB,CAAuB,EAAC,kBAAD,EAAW,wBAAX,EAAvB;AACD,CAFD;;QAIS,a,GAAA,a;;;;;;;;;;ACzBT;;AACA;;QAGE,a;QACA,gl0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChBA;;;;AACA;;I,AAAY;;;;;;;;;;;;;;;;;;;;EAJZ;AACA;AACA;;;AAIA,IAAI,YAAY,SAAZ,AAAY,gBAAyD;MAA9C,AAA8C,iBAA9C,AAA8C;MAAnC,AAAmC,WAAnC,AAAmC;MAA9B,AAA8B,eAA9B,AAA8B;MAArB,AAAqB,cAArB,AAAqB;MAAb,AAAa,kBAAb,AAAa,AACvE;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;MAAI,aAAa,KAAA,AAAK,KAAtB,AAAiB,AAAU,AAE3B;;AACA;AACA;AAEA;;AAEA;;MAAI,WAAW,WAAf,AAA0B,AAE1B;;MAAA,AAAG,UAAS,AAEV;;QAAI,SAAS,gBAAA,AAAE,KAAK,CAAA,AAAC,QAAR,AAAO,AAAS,OAA7B,AAAa,AAAuB,AACpC;QAAI,WAAW,gBAAA,AAAE,QAAQ,gBAAA,AAAE,OAAF,AAAS,IAAnB,AAAU,AAAa,SAAtC,AAAe,AAAgC,AAE/C;;QAAI,qBAAqB,KAAA,AAAK,KAA9B,AAAyB,AAAU,AACnC;QAAI,oBAAoB,SAApB,AAAoB,yBAAY;AAAA,AAAE;;gCAAgB;AAAtD,AAED;AAED;;AACA;AACA;AAEA;;AAEA;;AAEA;;MAAI,YAAY,WAAhB,AAA2B,AAE3B;;MAAA,AAAG,WAAU,AAEX;;QAAI,SAAS,gBAAA,AAAE,KAAK,CAAA,AAAC,QAAR,AAAO,AAAS,OAA7B,AAAa,AAAuB,AAEpC;;QAAI,qBAAqB,UAAA,AAAU,kBAAkB,EAAE,YAAvD,AAAyB,AAA4B,AAAc,AACnE;QAAI,oBAAoB,UAAxB,AAAkC,AAEnC;AAED;;AACA;AACA;AAEA;;MAAI,iBAAiB,WAArB,AAAgC,AAEhC;;MAAA,AAAG,gBAAe,AAEhB;;QAAI,cAAc,SAAd,AAAc,mBAAc;AAAA,AAAE;;gCAAmH;AAArJ,AAED;AAED;;AACA;AACA;AAEA;;AAEA;;;gBAAO,AAEL;wBAFK,AAGL;uBAHF,AAAO,AAMR;AANQ,AACL;AA9EJ;;AAqFA,OAAA,AAAO;aAAP,AAAiB;AAAA,AACf;;;;;AC5FF;;AAEA,IAAI,eAAe,SAAf,AAAe,mBAAuD;yBAA5C,AAA4C;MAA5C,AAA4C,qCAAnC,KAAA,AAAK,AAA8B,QAAA;0BAAvB,AAAuB;MAAvB,AAAuB,uCAAb,KAAA,AAAK,AAAQ,QACxE;;MAAI,IAAI,IAAA,AAAI,OAAZ,AAAQ,AAAW,AACnB;MAAI,8CAAO,AAAuC,QAAvC,AAA+C,SAAS,UAAA,AAAS,GAAG,AAC7E;QAAI,IAAI,CAAC,IAAI,KAAA,AAAK,WAAV,AAAmB,MAAnB,AAAuB,KAA/B,AAAoC,AACpC;QAAI,KAAA,AAAK,MAAM,IAAf,AAAI,AAAa,AACjB;WAAO,CAAC,KAAA,AAAG,MAAH,AAAS,IAAK,IAAA,AAAE,MAAjB,AAAqB,KAArB,AAA2B,SAAlC,AAAO,AAAoC,AAC5C;AAJD,AAAW,AAKX,GALW;SAKX,AAAU,eAAV,AAAoB,aAApB,AAA4B,AAC7B;AARD;;AAUA,OAAA,AAAO;gBAAP,AAAiB,AACD;AADC,AACf;;;;;;;;;;ACbF;;;;AACA;;I,AAAY;;AACZ;;;;AACA;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAVA,IAAI,WAAW,QAAf,AAAe,AAAQ;AACvB,IAAI,IAAI,QAAA,AAAQ,cAAhB,AAA8B;AAC9B,IAAI,QAAQ,SAAA,AAAS,KAAK,CACxB,QAAA,AAAQ,0BADgB,AACU,SAClC,QAAA,AAAQ,0BAFgB,AAEU,SAClC,QAAA,AAAQ,+BAHgB,AAGe,SACvC,QAAA,AAAQ,0BAJgB,AAIU,SAClC,QAAA,AAAQ,mCALV,AAAY,AAAc,AAKmB;;AAK7C;AACA,IAAI,sBAAsB,gBAAA,AAAE,OAAO,gBAAA,AAAE,OAAO,gBAAT,AAAW,OAAO,gBAA3B,AAAS,AAAoB,UAAU,gBAAA,AAAE,OAAzC,AAAuC,AAAS,KAAK,gBAAA,AAAE,QAAQ,gBAAV,AAAY,UAAU,gBAAA,AAAE,IAAI,gBAAA,AAAE,MAAM,gBAAR,AAAU,IAAtC,AAAsB,AAAM,AAAc,QAAQ,gBAAA,AAAE,MAAnI,AAA0B,AAAqD,AAAkD,AAAQ;;AAEzI,IAAI,SAAS,SAAT,AAAS,OAAA,AAAS,iBAAgB;MAAA,AAC9B,KAD8B,AAC0C,gBAD1C,AAC9B;MAD8B,AAC1B,MAD0B,AAC0C,gBAD1C,AAC1B;MAD0B,AACrB,YADqB,AAC0C,gBAD1C,AACrB;MADqB,AACV,UADU,AAC0C,gBAD1C,AACV;MADU,AACD,MADC,AAC0C,gBAD1C,AACD;MADC,AACI,OADJ,AAC0C,gBAD1C,AACI;MADJ,AACU,sBADV,AAC0C,gBAD1C,AACU;MADV,AAC+B,SAD/B,AAC0C,gBAD1C,AAC+B,AAEnE;;MAAI,YAAY,KAAA,AAAK,sBAAL,AAA2B,SAA3B,AAAoC,KAApD,AAAgB,AAAyC,AAEzD;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;MAAI,gBAAgB,SAAhB,AAAgB,cAAA,AAAS,OAAM,AACjC;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,KAAK,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,UAApD,AAAc,AAAgD,YAA5E,AAAc,AAA0E,AACxF;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,UAAnD,AAAa,AAAgD,YAA3E,AAAc,AAAyE,AACvF;QAAI,QAAQ,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9C,AAAgB,AAAsC,SAAlE,AAAY,AAA+D,AAC3E;QAAI,QAAQ,gBAAA,AAAE,QACZ,gBAAA,AAAE,QAAF,AAAU,gBADA,AACV,AAA0B,QAC1B,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAFpC,AAEV,AAAgB,AAAsC,cAFxD,AAAY,AAGV,AAEF;;WAAO,EAAA,AAAE,OAAF,AAAS,IAAI,CAClB,EAAA,AAAE,SAAS,EAAE,OAAO,oBAApB,AAAW,AAAS,AAAoB,YAAY,CAClD,kCAFJ,AAAO,AAAa,AAClB,AAAoD,AAClD,AAAW,AAGhB;AAdD,AAgBA;;MAAI,oBAAoB,SAApB,AAAoB,kBAAA,AAAS,KAAT,AAAc,MAAd,AAAoB,SAAQ,AAClD;SAAA,AAAK,UAAL,AAAe,SAAf,AAAwB,KAAxB,AACG,SADH,AACY,KADZ,AAEG,IAAI,iBAAA;aAAU,EAAE,OAAO,MAAA,AAAM,OAAf,AAAsB,OAAO,KAAK,MAAA,AAAM,OAAN,AAAa,QAAzD,AAAU,AAAuD;AAFxE,OAAA,AAGG,IAAI,UAAA,AAAC,MAAS,AAAE;cAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,YAAY,SAAS,EAAE,OAAO,KAAT,AAAc,OAAO,MAArB,MAA2B,SAA/E,AAAuB,AAA6B,AAA0C;AAHjH,OAAA,AAIG,UAJH,AAIa,WAJb,AAKG,AACJ;AAPD,AASA;;MAAI,SAAS,SAAT,AAAS,OAAA,AAAS,OAAM,AAC1B;QAAI,cAAc,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,gBAArE,AAAkB,AAAmE,AACrF;QAAI,OAAO,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,SAA9D,AAAW,AAA4D,AACvE;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAC7E;QAAI,QAAQ,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,YAAD,AAAa,KAA1B,AAAa,AAAkB,UAA3C,AAAY,AAAyC,AAErD;;QAAI,SAAS,SAAT,AAAS,OAAA,AAAS,OAAM,AAAE;wBAAkB,MAAlB,AAAwB,KAAxB,AAA6B,MAA7B,AAAmC,AAAW;AAA5E,AAEA;;WAAO,EAAA,AAAE,YAAY,EAAE,yBAAS,aAAT,2BAAF,AAAE,AAAoC,MAAO,OAAO,EAAE,OAAtD,AAAoD,SAAW,MAAM,EAAE,QAArF,AAAc,AAAqE,YAA1F,AAAO,AAAiG,AACzG;AATD,AAWA;;MAAI,WAAW,SAAX,AAAW,SAAA,AAAS,OAAM,AAC5B;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAC7E;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAC7E;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAE7E;;WAAO,EAAA,AAAE,OAAO,EAAE,OAAO,EAAE,YAApB,AAAS,AAAS,AAAc,UAAU,CAC/C,kCAD+C,AAC/C,AAAW,UACX,cAF+C,AAE/C,AAAc,QACd,kCAH+C,AAG/C,AAAW,UACX,OAJ+C,AAI/C,AAAO,QACP,kCALF,AAAO,AAA0C,AAK/C,AAAW,AAEd;AAZD,AAcA;;AACA;AACA;AAEA;;MAAI,kBAAkB,SAAlB,AAAkB,gBAAA,AAAS,OAAM,AACnC;WAAO,UAAA,AAAS,aAAT,AAAsB,KAAI,AAC/B;AACA;UAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAvE,AAAe,AAAiE,YAA9F,AAAc,AAA4F,AAC1G;UAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAArE,AAAa,AAAiE,YAA5F,AAAc,AAA0F,AACxG;UAAI,kBAAkB,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,YAAhF,AAAe,AAA6E,YAAlH,AAAsB,AAAwG,AAC9H;UAAI,kBAAkB,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,YAA9E,AAAa,AAA6E,YAAhH,AAAsB,AAAsG,AAC5H;UAAI,kBAAkB,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,YAAhF,AAAe,AAA6E,YAAlH,AAAsB,AAAwG,AAC9H;UAAI,kBAAkB,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,YAA9E,AAAa,AAA6E,YAAhH,AAAsB,AAAsG,AAC5H;UAAI,wBAAwB,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,WAA3F,AAAe,AAAuF,YAAlI,AAA4B,AAAkH,AAC9I;UAAI,wBAAwB,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,WAAzF,AAAa,AAAuF,YAAhI,AAA4B,AAAgH,AAC5I;UAAI,qBAAqB,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,QAA3F,AAAe,AAAoF,YAA5H,AAAyB,AAA+G,AACxI;UAAI,qBAAqB,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,QAAzF,AAAa,AAAoF,YAA1H,AAAyB,AAA6G,AACtI;UAAI,8BAA8B,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,WAA5F,AAAgB,AAAuF,YAAzI,AAAkC,AAAmH,AACrJ;UAAI,2BAA2B,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,SAAxD,AAAiE,WAAjE,AAA4E,QAA5F,AAAgB,AAAoF,YAAnI,AAA+B,AAAgH,AAE/I;;UAAI,wBAAQ,AAAE,sCAEZ,gBAAA,AAAE,KAFQ,AAEV,AAAO,qBACP,AAAE,IAAI,UAAA,AAAS,MAAK,AAAE;uBAAA,AAAa,OAAY;AAHrC,AAGV,OAAA,CAHU,EAIV,gBAAA,AAAE,MAJQ,AAIV,AAAQ,OACR,gBAAA,AAAE,OAAF,AAAS,OAAO,CALN,AAKV,AAAgB,AAAC,WALnB,AAAY,AAMV,AAEF;;UAAI,OAAO,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAhB,AAAgB,AAAC,SAA5B,AAAW,AAA0B,AACrC;UAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAb,AAAa,AAAC,YAA5B,AAAc,AAA0B,AACxC;UAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAhB,AAAgB,AAAC,IAA/B,AAAc,AAAqB,AACnC;UAAI,OAAO,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAhB,AAAgB,AAAC,IAA5B,AAAW,AAAqB,AAEhC;;aAAO,EAAA,AAAE,SAAS,EAAE,OAAO,gBAAA,AAAE,MAAM,oBAAR,AAAQ,AAAoB,UAAU,EAAE,oBAA5D,AAAW,AAAS,AAAsC,AAAsB,WAAW,CAChG,EAAA,AAAE,iBAAiB,EAAE,OAAO,oBAA5B,AAAmB,AAAS,AAAoB,oBADgD,AAChG,AAAoE,OACpE,8BAA8B,EAAA,AAAE,uBAAuB,EAAE,OAAO,oBAAlC,AAAyB,AAAS,AAAoB,0BAApF,AAA8B,AAAgF,WAFd,AAEyB,IACzH,2BAA2B,EAAA,AAAE,oBAAoB,EAAE,OAAO,oBAA/B,AAAsB,AAAS,AAAoB,uBAA9E,AAA2B,AAA0E,QAHL,AAGa,IAC7G,EAAA,AAAE,iBAAiB,EAAE,OAAO,oBAA5B,AAAmB,AAAS,AAAoB,oBAJlD,AAAO,AAA2F,AAIhG,AAAoE,AAEvE;AAlCD,AAmCD;AApCD,AAsCA;;MAAI,eAAe,SAAf,AAAe,aAAA,AAAS,OAAM,AAChC;QAAI,aAAa,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAlC,AAAe,AAA8B,WAA9D,AAAiB,AAAwD,AACzE;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,UAAvE,AAAe,AAAkE,YAA/F,AAAc,AAA6F,AAC3G;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,QAAtC,AAA8C,UAA9C,AAAwD,UAArE,AAAa,AAAkE,YAA7F,AAAc,AAA2F,AACzG;QAAI,YAAY,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAb,AAAa,AAAC,aAA9B,AAAgB,AAA2B,AAC3C;QAAI,WAAW,gBAAA,AAAE,QACf,gBADa,AACX,QACF,gBAAA,AAAE,cAAc,gBAFH,AAEb,AAAgB,AAAgB,SAFlC,AAAe,AAGb,AAEF;;AAEA;;QAAG,SAAA,AAAS,SAAZ,AAAqB,GAAE,AACrB;aAAO,EAAA,AAAE,SAAS,EAAE,OAAO,oBAApB,AAAW,AAAS,AAAoB,YAA/C,AAAO,AAAoD,AAC5D;AAFD,WAEO,AACL;aAAO,aAAa,EAAA,AAAE,OAAF,AAAS,IAAI,CAAE,kCAA5B,AAAa,AAAa,AAAE,AAAW,gBAAiB,EAAA,AAAE,OAAF,AAAS,IAAxE,AAA+D,AAAa,AAC7E;AACF;AAjBD,AAmBA;;MAAI,eAAe,SAAf,AAAe,aAAA,AAAS,OAAM,AAChC;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,KAAK,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,UAApD,AAAc,AAAgD,YAA5E,AAAc,AAA0E,AACxF;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,UAAnD,AAAa,AAAgD,YAA3E,AAAc,AAAyE,AACvF;QAAI,QAAQ,gBAAA,AAAE,OAAF,AAAS,kBAAkB,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA9B,AAAsC,UAAjE,AAA2B,AAAgD,UAAvF,AAAY,AAAqF,AACjG;WAAO,EAAA,AAAE,SAAS,EAAE,OAAO,oBAApB,AAAW,AAAS,AAAoB,YAA/C,AAAO,AAAoD,AAC5D;AALD,AAOA;;MAAI,WAAW,SAAX,AAAW,SAAA,AAAS,OAAM,AAC5B;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAC7E;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAC7E;QAAI,UAAU,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAnB,AAA8B,QAA3C,AAAa,AAAsC,YAAjE,AAAc,AAA+D,AAE7E;;WAAO,EAAA,AAAE,OAAO,EAAE,OAAO,EAAE,YAApB,AAAS,AAAS,AAAc,UAAU,CAC/C,kCAD+C,AAC/C,AAAW,UACX,aAF+C,AAE/C,AAAa,QACb,kCAH+C,AAG/C,AAAW,UACX,EAAA,AAAE,OAAO,EAAE,OAAO,EAAE,qBAApB,AAAS,AAAS,AAAuB,UAAU,aAJJ,AAI/C,AAAmD,AAAa,SAChE,kCALF,AAAO,AAA0C,AAK/C,AAAW,AAEd;AAZD,AAcA;;AACA;AACA;AAEA;;MAAI,UAAU,SAAV,AAAU,QAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,UAAS;QAC3C;;WAAO,EAAA,AAAE,OAAO,EAAE,yBAAS,cAAT,AAAuB,MAAM,OAA7B,AAAoC,6BAApC,AAA8D,MAAzE,AAAS,AAAE,AAAuE,SAAU,CACjG,EAAA,AAAE,OAAO,EAAE,+DAAA,AAAwB,MAAxB,AAAiC,gCAAjC,AAAuC,aAAvC,AAAoD,OAA/D,AAAS,YAAgE,CACvE,EAAA,AAAE,OAAO,EAAE,OAAO,EAAE,OAApB,AAAS,AAAS,AAAS,uCAF/B,AAAO,AAA4F,AACjG,AAAyE,AACvE,AAEK,AAIV;AATD,AAWA;;MAAI,QAAQ,SAAR,AAAQ,MAAA,AAAS,OAAM,AACzB;WAAO,QAAA,AAAQ,OAAR,AAAe,SAAS,CAC7B,gBAAA,AAAE,KAAK,CACL,CAAC,gBAAA,AAAE,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAA5B,AAAS,AAA8B,SAAxC,AAAC,AAAgD,aAD5C,AACL,AAA8D,WAC9D,CAAC,gBAAA,AAAE,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAA5B,AAAS,AAA8B,SAAxC,AAAC,AAAgD,aAF5C,AAEL,AAA8D,WAC9D,CAAC,gBAAD,AAAG,GAAG,gBAAA,AAAE,OAHV,AAAO,AAGL,AAAM,AAAS,UAJnB,AAAO,AAAwB,AAC7B,AAIG,AAEN;AARD,AAUA;;MAAI,UAAU,SAAV,AAAU,QAAA,AAAS,OAAM,AAC3B;QAAI,aAAa,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,WAAlC,AAAe,AAA8B,WAA9D,AAAiB,AAAwD,AAEzE;;QAAA,AAAG,YAAW,AACZ;aAAO,QAAA,AAAQ,OAAR,AAAe,WAAW,CAC/B,EAAA,AAAE,OAAF,AAAS,IAAI,CACX,kCAFJ,AAAO,AAA0B,AAC/B,AAAa,AACX,AAAW,AAGhB;AAND,WAMO,AACL;aAAO,QAAA,AAAQ,OAAR,AAAe,WAAtB,AAAO,AAA0B,AAClC;AACF;AAZD,AAcA;;MAAI,OAAO,SAAP,AAAO,KAAA,AAAS,OAAM,AACxB;QAAI,mBAAmB,gBAAA,AAAE,QAAQ,gBAAA,AAAE,OAAO,CAAA,AAAC,QAAV,AAAS,AAAS,WAAnD,AAAuB,AAAU,AAA6B,AAE9D;;WAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,QAAQ,CADP,AACH,AAAU,AACR,oBAFC,AAIH,yBACA,AAAE,MACA,CAAC,gBAAA,AAAE,OAAF,AAAS,QAAV,AAAC,AAAiB,UADb,AACL,AAA4B,AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;KAAC,gBAAD,AAAG,GAfF,AAKH,AAAO,AAUL,AAAM,QAVD,CAAP,GALJ,AAAO,AAiBL,AACH;AArBD,AAuBA;;AACA;AACA;AAEA;;MAAI;YACM,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAb,AAAa,AAAC,WADxB,AAAgB,AACN,AAAyB,AAGnC;AAJgB,AACd;;MAGE,YAAY,GAAA,AAAG,cAAnB,AAAgB,AAAiB,AAEjC;;MAAI,aAAa,EAAE,MAAF,AAAQ,QAAQ,SAAjC,AAAiB,AAAyB,AAE1C;;AACA;AACA;AAEA;;MAAI,cAAc,SAAd,AAAc,YAAA,AAAS,OAAM,AAC/B;AACA;YAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,cAAc,SAAS,EAAE,MAAxD,AAAuB,AAA+B,AAAQ,AAE9D;;YAAA,AAAQ,KAAR,AAAa,YAAY,EAAE,MAAF,AAAQ,UAAU,SAAS,EAAE,MAAF,AAAQ,aAAa,MAArB,AAA2B,eAAe,KAA9F,AAAyB,AAA2B,AAErD;AAND,AAQA;;MAAI,MAAM,SAAN,AAAM,IAAA,AAAS,WAAT,AAAoB,OAAM,AAClC;AACA;QAAI,gBAAgB,gBAAA,AAAE,QAAQ,gBAAV,AAAY,KAAK,gBAAA,AAAE,OAAO,CAAA,AAAC,QAAV,AAAS,AAAS,WAAnC,AAAiB,AAA6B,YAAlE,AAAoB,AAA0D,AAC9E;QAAI,SAAS,SAAT,AAAS,OAAA,AAAC,MAAD;aAAU,gBAAA,AAAE,cAAc,gBAAA,AAAE,OAAlB,AAAgB,AAAS,OAAO,CAAhC,AAAgC,AAAC,SAA3C,AAAU,AAA0C;AAAjE,AACA;QAAI,gBAAgB,gBAAA,AAAE,QAAF,AAAU,QAAV,AAAkB,WAAtC,AAAoB,AAA6B,AAEjD;;QAAI,eAAe,gBAAA,AAAE,cAAc,gBAAhB,AAAkB,OAAO,CAAzB,AAAyB,AAAC,SAA1B,AAAmC,UAAtD,AAAgE,AAChE;QAAI,eAAe,OAAA,AAAO,YAAY,CAAtC,AAAuC,AAEvC;;QAAA,AAAG,cAAa,AACd;kBAAA,AAAY,AACb;AAED;;AACA;AACA;AAEA;;WAAA,AAAO,AAER;AAnBD,AAqBA;;AACA;AACA;AAEA;;MAAI,UAAU,SAAV,AAAU,QAAA,AAAS,OAAM,AAC3B;QAAI,SAAS,gBAAA,AAAE,OAAF,AAAS,OAAO,CAAA,AAAC,QAAD,AAAS,UAAT,AAAmB,QAAnC,AAAgB,AAA2B,OAAxD,AAAa,AAAkD,AAC/D;QAAI,QAAQ,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAf,AAAe,AAAC,UAA5B,AAAY,AAA0B,AACtC;QAAI,gBAAgB,gBAAA,AAAE,OAAF,AAAS,MAAM,CAAf,AAAe,AAAC,gBAApC,AAAoB,AAAgC,AACpD;QAAI,WAAW,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAb,AAAa,AAAC,aAA7B,AAAe,AAA2B,AAC1C;QAAI,8BAAA,AAAa,QAAjB,AAAI,AAAsB,AAE1B;;QAAA,AAAG,eAAc,AACf;cAAA,AAAQ,KAAR,AAAa,2BAAb,AAAwC,AACxC;cAAA,AAAQ,KAAR,AAAa,oBAAoB,EAAE,IAAF,AAAM,QAAQ,KAAd,KAAmB,MAAnB,AAAyB,WAAW,SAAS,EAAE,SAAhF,AAAiC,AAA6C,AAC9E;cAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,kBAAkB,SAAS,EAAE,aAA5D,AAAuB,AAAmC,AAAe,AAC1E;AAED;;WAAA,AAAO,AAER;AAfD,AAiBA;;AACA;AACA;AAEA;;MAAI,UAAU,SAAV,AAAU,QAAA,AAAS,OAAT,AAAgB,QAAO,AACnC;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;;AAEA;;AACA;AACA;AACA;AACA;AAEA;;YAAA,AAAQ,KAAR,AAAa,YAAY,EAAE,MAAF,AAAQ,kBAAkB,SAAS,KAAA,AAAK,UAAjE,AAAyB,AAAmC,AAAe,AAE3E;;QAAI,eAAe,gBAAA,AAAE,OACnB,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,SAAS,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAA,AAAC,UADtB,AACjB,AAAyB,AAAa,AAAW,cACjD,gBAAA,AAAE,QAAQ,gBAFO,AAEjB,AAAY,WAAW,AACvB;oBAHF,AAAmB,AAGf,AAGJ;;AACA;AACA;AACA;AACA;AAEA;;QAAI,eAAgB,AAClB;AACA;AAFF,AAAkB,AAKlB;AALkB;;QAKd,2BAAW,AAAE,OAAO,UAAA,AAAC,UAAD,AAAW,YAAe,AAAE;aAAO,WAAP,AAAO,AAAW,AAAY;AAAnE,KAAA,EAAqE,gBAArE,AAAuE,IAAtF,AAAe,AAA2E,AAE1F;;QAAI,aAAa,SAAb,AAAa,qBAAY,AAC3B;UAAI,SAAS,gBAAA,AAAE,KAAF,AAAO,UAApB,AAAa,AAAiB,AAC9B;aAAO,gBAAA,AAAE,OACP,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,SAAS,gBAAA,AAAE,KAAK,CAAA,AAAC,UAD5B,AACL,AAAyB,AAAO,AAAW,cAC3C,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAb,AAAY,AAAU,SAAS,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,SAF7C,AAEL,AAA+B,AAA4B,UAC3D,gBAHK,AAGH,UAHJ,AAAO,AAIL,AACH;AAPD,AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;QAAI,eAAe,SAAf,AAAe,uBAAY,AAC7B;UAAI,SAAS,gBAAA,AAAE,KAAF,AAAO,UAApB,AAAa,AAAiB,AAC9B;aAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,WAAW,gBAAA,AAAE,KAAK,CAAA,AAAC,UADhC,AACH,AAA2B,AAAO,AAAW,cAC7C,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAD,AAAU,QAAtB,AAAY,AAAkB,WAAW,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,WAFzD,AAEH,AAAyC,AAA8B,UACvE,gBAHG,AAGD,UAHN,AAAO,AAIL,AACH;AAPD,AASA;;QAAI,uBAAuB,SAAvB,AAAuB,+BAAY,AACrC;UAAI,SAAS,gBAAA,AAAE,KAAF,AAAO,UAApB,AAAa,AAAiB,AAE9B;;aAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,aAAa,gBAAA,AAAE,KAAK,CAAA,AAAC,UADlC,AACH,AAA6B,AAAO,AAAW,cAC/C,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAb,AAAY,AAAU,aAAa,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,aAFnD,AAEH,AAAmC,AAAgC,UACnE,gBAHG,AAGD,UAHN,AAAO,AAIL,AACH;AARD,AAUA;;QAAI,cAAc,SAAd,AAAc,sBAAY,AAC5B;UAAI,SAAS,gBAAA,AAAE,KAAF,AAAO,UAApB,AAAa,AAAiB,AAC9B;UAAI,QAAQ,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,UAA/B,AAAY,AAA6B,AACzC;UAAI,OAAO,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,SAA9B,AAAW,AAA4B,AACvC;UAAI,UAAU,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,YAAjC,AAAc,AAA+B,AAE7C;;aAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,UAAU,gBAAA,AAAE,KAAK,CAAA,AAAC,UAD/B,AACH,AAA0B,AAAO,AAAW,cAC5C,gBAAA,AAAE,QACA,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAD,AAAU,YAAtB,AAAY,AAAsB,MAAM,EAAE,OAAF,OAAS,MAAT,MAAe,SADzD,AACE,AAAwC,YACxC,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAb,AAAY,AAAU,gBAJrB,AAEH,AAEE,AAAsC,QAExC,gBANG,AAMD,UANN,AAAO,AAOL,AACH;AAdD,AAgBA;;QAAI,oBAAoB,SAApB,AAAoB,4BAAY,AAClC;UAAI,SAAS,gBAAA,AAAE,KAAF,AAAO,UAApB,AAAa,AAAiB,AAC9B;aAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,QAAQ,gBAAA,AAAE,IAAZ,AAAU,AAAM,gBAAgB,gBAAA,AAAE,KAAK,CAAA,AAAC,UADrC,AACH,AAAgC,AAAO,AAAW,cAClD,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAb,AAAY,AAAU,gBAAgB,gBAAA,AAAE,KAAK,CAAA,AAAC,WAAR,AAAO,AAAY,gBAFtD,AAEH,AAAsC,AAAmC,UACzE,gBAHG,AAGD,UAHN,AAAO,AAIL,AACH;AAPD,AASA;;QAAI,mBAAoB,AACtB;AADoB,AAEpB;AACA;AAHoB,kBAAA,AAIpB,sBAJoB,AAKpB,aACA,AACA;AACA;AACA;AACA;AAVF,AAAsB,AAatB;AAbsB;;QAalB,YAAY,SAAZ,AAAY,oBAAY,AAC1B;aAAO,gBAAA,AAAE,OACL,gBAAA,AAAE,cAAc,gBAAhB,AAAkB,SADf,AACH,AAA2B,2BAC3B,AAAE,OAAO,UAAA,AAAC,UAAD,AAAW,gBAAmB,AAAE;eAAO,eAAP,AAAO,AAAe,AAAY;AAA3E,OAAA,EAA6E,gBAA7E,AAA+E,IAF5E,AAEH,AAAmF,kBACnF,gBAAA,AAAE,UAAU,CAAA,AAAC,SAAb,AAAY,AAAU,WAAW,gBAAA,AAAE,KAAK,CAAP,AAAO,AAAC,WAHtC,AAGH,AAAiC,AAAmB,YAHxD,AAAO,AAIL,AACH;AAND,AAQA;;2BAAO,AAAE,wBACL,AAAE,IAAI,UAAA,AAAC,OAAU,AAAE;cAAA,AAAQ,KAAR,AAAa,YAAY,EAAE,MAAF,AAAQ,oBAAoB,SAAS,KAAA,AAAK,UAAnE,AAAyB,AAAqC,AAAe,AAAY;AADzG,AACH,KAAA,CADG,EAEH,gBAAA,AAAE,KAFC,AAEH,AAAO,UAFJ,AAGH,WAHG,AAIH,UACF,EAAE,OAAF,OAAS,QAAT,QAAiB,QALnB,AAAO,AAKL,AAAyB,AAE5B;AApID,AAsIA;;AACA;AACA;AAEA;;MAAI,SAAS,SAAT,AAAS,OAAA,AAAS,QAAO,AAC3B;YAAA,AAAQ,KAAR,AAAa,YAAb,AAAyB,AACzB;YAAA,AAAQ,KAAR,AAAa,YAAY,EAAE,MAAF,AAAQ,UAAU,MAAM,OAAxB,AAA+B,MAAM,SAAS,KAAA,AAAK,UAAU,OAAtF,AAAyB,AAA8C,AAAsB,AAC7F;AAEA;;AACA;QAAG,OAAA,AAAO,SAAV,AAAmB;aACV,KAAA,AAAK,GADuB,AACnC,AAAO,AAAQ,QADoB,AACnC,CAAwB,AACzB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB;aACV,KAAA,AAAK,GAD2B,AACvC,AAAO,AAAQ,QADwB,AACvC,CAAwB,AACzB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB,mBAAkB,AAAE;AACrC;aAAO,KAAA,AAAK,GAAZ,AAAO,AAAQ,AAChB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB;aACV,KAAA,AAAK,GADgB,AAC5B,AAAO,AAAQ,QADa,AAC5B,CAAwB,AACzB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB;aACV,KAAA,AAAK,GADmB,AAC/B,AAAO,AAAQ,QADgB,AAC/B,CAAwB,AACzB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB;aACV,KAAA,AAAK,GADsB,AAClC,AAAO,AAAQ,QADmB,AAClC,CAAwB,AACzB;AAED;;QAAG,OAAA,AAAO,SAAV,AAAmB,cAAa,AAC9B;AACA;kBAAO,AAAK,GAAL,AAAQ,QAAR,AACF,MADE,AACI,KADJ,AAEF,IAAI,YAAM,AAAE;YAAG,OAAA,AAAO,QAAP,AAAe,SAAlB,AAA2B,SAAQ,AAAE,CAAE;AAFxD,AAAO,AAGR,OAHQ;AAKT;;WAAO,KAAA,AAAK,GAAG,EAAE,MAAF,AAAQ,WAAW,SAAlC,AAAO,AAAQ,AAA4B,AAC5C;AAtCD,AAwCA;;AACA;AACA;AAEA;;AAEA;;AAEA;;OAAA,AAAK,UAAL,AAAe,UAAf,AAAyB,SAAzB,AACK,UADL,AACe,YADf,AAEK,QAFL,AAEa,QAFb,AAE6C;GAF7C,AAGK,KAHL,AAGU,SAHV,AAGmB,WAA0B,AAC3C;AAJF;GAAA,AAKK,IALL,AAKS,SALT,AAK6C;GAL7C,AAMK,IAAI,UAAA,AAAC,OAAU,AAAE;YAAA,AAAQ,KAAR,AAAa,gBAAb,AAA6B,AAAQ;AAN3D,KAAA,AAOK,UAPL,AAOe,WAPf,AAQK,AAEL;;OAAA,AAAK,UAAL,AAAe,gBAAf,AAA+B,SAA/B,AACK,IADL,AACS,MADT,AAC6C;GAD7C,AAEK,KAFL,AAEU,OAFV,AAEiB,WAFjB,AAE6C;GAF7C,AAGK,YAHL,AAIK,IAAI,UAAA,AAAC,YAAe,AAAE;YAAA,AAAQ,KAAR,AAAa,YAAY,WAAzB,AAAoC,AAAO;AAJtE,KAAA,AAKK,UALL,AAKe,WALf,AAMK,AAEL;;OAAA,AAAK,UAAL,AAAe,gBAAf,AAA+B,SAA/B,AACK,QAAQ,UAAA,AAAC,OAAD,AAAQ,YAAe,AAAE;WAAO,EAAE,OAAF,OAAS,YAAhB,AAAO,AAAwB;AADrE,KACuE,KAAA,AAAK,UAAL,AAAe,YADtF,AACuE,AAA2B,UADlG,AAEK,gBAAgB,uBAA0D;QAAvD,AAAuD,aAAvD,AAAuD;QAAhD,AAAgD,kBAAhD,AAAgD;QAAhC,AAAgC,kBAAhC,AAAgC;QAArB,AAAqB,uBAArB,AAAqB,AAAE;WAAO,eAAP,AAAsB,AAAiB;AAFxH,KAAA,AAGK,IAAI,gBAAA,AAAE,KAHX,AAGS,AAAO,UAHhB,AAIK,KAJL,AAIU,KAJV,AAIe,WAJf,AAI0C;GAJ1C,AAKK,UALL,AAKe,WALf,AAMK,AAEL;;AACA;AACA;AAEA;;AAEA;;AACA;kBAAA,AAAE,OAAO,EAAE,SAAS,mBAAM,AAAE,CAA5B,AAAS,KAAT,AAAgC,cAAhC,AAA8C,MAA9C,AAAoD,UAApD,AAA8D,WAA9D,AAAyE,QAAS,kBAAA;WAAU,QAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,mBAAmB,SAAS,EAAE,QAAvE,AAAU,AAAuB,AAAoC;AAAvJ,AACA;kBAAA,AAAE,OAAO,EAAE,SAAS,mBAAM,AAAE,CAA5B,AAAS,KAAT,AAAgC,sBAAhC,AAAsD,MAAtD,AAA4D,UAA5D,AAAsE,WAAtE,AAAiF,QAAS,oBAAA;WAAY,QAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,uBAAuB,SAAS,EAAE,UAA7E,AAAY,AAAuB,AAAwC;AAArK,AAEA;;MAAI,oBAAoB,SAApB,AAAoB,kBAAA,AAAS;QAC3B,MAAM,gBAAA,AAAE,OAAO,YAAU,AAAE,CAArB,GAAA,AAAuB,qBAAjC,AAAU,AAA4C,AACtD;QAAI,EAAE,UAAN,AAAI,YAFoC,AAExC,AAAkB,QAFsB,AACxC,CAC2B,AAC5B;AAHD,AAKA;;OAAA,AAAK,UAAL,AAAe,2BAAf,AAA0C,SAA1C,AACG,IADH,AACO,mBADP,AAEG,UAFH,AAEa,WAFb,AAGG,AAEH;;AACA;AACA;AAEA;;MAAM,YAAY,KAAA,AAAK,UAAL,AAAe,YAAf,AAA2B,SAA3B,AACf,UADH,AAAkB,AACL,AAEb;;YAAA,AACG,IAAI,QADP,AACe,KADf,AAEG,AAEH;;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;;OAAA,AAAK,UAAL,AAAe,WAAf,AAA0B,KAA1B,AACG,OAAO,gBAAA,AAAE,OAAO,CAAA,AAAC,YAAV,AAAS,AAAa,SADhC,AACU,AAA+B,eADzC,AAEG,IAAI,mBAAW,AAAE;YAAA,AAAQ,KAAR,AAAa,UAAU,EAAE,MAAF,AAAQ,mBAAmB,SAAlD,AAAuB,AAAoC,AAAY;AAF3F,KAAA,AAGG,UAHH,AAGa,WAHb,AAIG,AAEH;;AACA;OAAA,AAAK,UAAL,AAAe,oBAAf,AAAmC,SAAnC,AACG,IAAI,iBAAgC;QAA7B,AAA6B,WAA7B,AAA6B;QAAzB,AAAyB,YAAzB,AAAyB;QAApB,AAAoB,aAApB,AAAoB;QAAd,AAAc,gBAAd,AAAc,AAAE;QAAA,AAAI,KAAJ,AAAS,WAAW,EAAE,MAAM,EAAE,MAAF,MAAQ,IAAR,IAAY,KAApB,AAAQ,OAAmB,UAAU,EAAE,MAAF,AAAQ,cAAc,IAA3D,AAAqC,AAA0B,aAAa,SAAhG,AAAoB,AAAwF;AADrJ,KAAA,AAEG,UAFH,AAEa,WAFb,AAGG,AAEH;;AAEA;;AACA;AACA;AAEA;;AACA;AAED;AAplBD;;Q,AAulBE,S,AAAA;;;;;;;;;;AC3mBF;;;;AACA;;I,AAAY;;AACZ;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAM,sBAAsB,SAAtB,AAAsB,0BAA0D;MAAhD,AAAgD,qBAAhD,AAAgD;MAAjC,AAAiC,2BAAjC,AAAiC;MAAZ,AAAY,kBAAZ,AAAY,AAEpF;;4BAAA,AACG,OAAO,cAAA;WAAM,GAAA,AAAG,aAAH,AAAgB,wBAAtB,AAA8C;AADxD,KAAA,AAEG,IAAI,cAAA;WAAM,GAAA,AAAG,YAAT,AAAqB;AAF5B,KAAA,AAGG,IAAI,UAAA,AAAS,IAAG,AACf;QAAM,YAAY,2BAAa,EAAE,QAAjC,AAAkB,AAAa,AAAU,AACzC;QAAM,UAAU,cAAhB,AACA;QAAM,MAAM,GAAA,AAAG,aAAf,AAAY,AAAgB,AAC5B;QAAM,UAAU,gBAAA,AAAE,OAAO,gBAAT,AAAW,OAAO,KAAlB,AAAuB,OAAO,GAAA,AAAG,aAAjD,AAAgB,AAA8B,AAAgB,AAC9D;QAAM,SAAS,gBAAA,AAAE,OAAF,AAAS,IAAI,CAAb,AAAa,AAAC,MAA7B,AAAe,AAAoB,AACnC;QAAM,OAAO,qBAAU,EAAE,WAAF,WAAa,KAAb,KAAkB,SAAlB,SAA2B,QAA3B,QAAmC,YAA1D,AAAa,AAAU,AAEvB;;AAEA;;WAAO,EAAE,IAAF,IAAM,KAAN,KAAW,WAAX,WAAsB,SAAtB,SAA+B,eAA/B,KAAoC,MAA3C,AAAO,AACR;AAdH,KAAA,AAeG,oBAfH,AAgBG,AAEJ;AApBD;;Q,AAsBS,sB,AAAA","file":"config.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { configureActionplan } from './src/setup';\nimport { bus } from 'partybus';\nimport tincanInit from 'tincan'; // this should come in through activity.js (hucklebuck)\n\nvar config = { // this should come in from '../../activity_config'\n  activity_name: 'Measuring and Setting Quality Goals',\n  slug: 'measuring_setting_quality_goals',\n  full_url: 'https://governance.netlify.com/measuring_setting_quality_goals',\n  distpath: '../../measuring_setting_quality_goals',\n  author: 'Scitent http://scitent.com',\n  first_section: 'measuring_quality_dashboards_and_scorecards',\n  theme: 'clean-blog-3.3.7'\n};\n\nvar allActionplans = {\n  // universal defaults overriden by single actionplans\n};\n\nvar actionplans = {\n  'enter-ten-items': {\n    plan: {\n      id: 'governance',\n      title: 'governance-action-plan'\n    },\n    element: {\n      type: 'question',\n      html: {\n        prehead: '<div>Stuff...</div>',\n        prebody: '<div>Info...</div>',\n        prefoot: '<div>Remember...</div>'\n      },\n      loader: '<div>LOADING...</div>',\n      meta: {\n        text: 'Enter 10 items...',\n        template: '<div>{{text}}</div>',\n        markup: {\n          element: 'h3',\n          classes: ''\n        },\n        placeholder: 'Enter notes...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'what-are-your-thoughts': {\n    plan: {\n      id: 'governance',\n      title: 'governance-action-plan'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: 'What are your thoughts?',\n        markup: {\n          element: 'h3',\n          classes: ''\n        },\n        placeholder: 'Answer this...',\n        context: ['Section 2', Date.now()]\n      }\n    }\n  },\n  'governance-takeaway': {\n    plan: {\n      id: 'governance',\n      title: 'governance-action-plan'\n    },\n    element: {\n      type: 'takeaway',\n      loader: '<div>LOADING TAKEAWAY...</div>',\n      html: {\n        prehead: '<div>Stuff...</div>',\n        prebody: '<div>Info...</div>',\n        prefoot: '<div>Remember...</div>'\n      },\n      meta: {\n        markup: {\n          element: 'h2',\n          title: 'Your Takeaway:',\n          classes: ''\n        },\n        each: {\n          markup: {\n            parent: {\n              element: 'ul',\n              //element: 'div',\n              classes: ''\n            },\n            child: {\n              element: 'li',\n              //element: 'div',\n              classes: 'section-background'\n            },\n            inner: {\n              question: {\n                element: 'h3',\n                classes: ''\n              },\n              context: {\n                section: {\n                  display: true,\n                  element: 'pre',\n                  classes: ''\n                },\n                date: {\n                  display: true,\n                  element: 'span',\n                  classes: ''\n                }\n              },\n              response: {\n                element: 'div',\n                classes: ''\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  'page1': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: '',\n        markup: {\n          element: 'h3',\n          classes: ''\n        },\n        placeholder: 'Enter notes...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'page2': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: 'How do you make things better?',\n        markup: {\n          element: 'h3',\n          classes: ''\n        },\n        placeholder: 'Answer this...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'page3': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: 'Are things better?',\n        markup: {\n          element: 'h3',\n          classes: ''\n        },\n        placeholder: 'Answer this...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'page4': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: 'When will things get better?',\n        markup: {\n          element: 'p',\n          classes: ''\n        },\n        placeholder: 'Answer this...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'page5': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'question',\n      meta: {\n        text: 'Will things get better?',\n        markup: {\n          element: 'a',\n          classes: ''\n        },\n        placeholder: 'What do you think...',\n        context: ['Section 1', Date.now()]\n      }\n    }\n  },\n  'takeaway': {\n    plan: {\n      id: 'are-things-ok',\n      title: 'Are things ok?'\n    },\n    element: {\n      type: 'takeaway',\n      meta: {\n        markup: {\n          element: 'h2',\n          title: 'Notes:',\n          classes: ''\n        },\n        each: {\n          markup: {\n            outer: {\n              element: 'li',\n              classes: ''\n            },\n            inner: {\n              question: {\n                element: 'h3',\n                classes: ''\n              },\n              context: {\n                element: 'pre',\n                classes: ''\n              },\n              response: {\n                element: 'div',\n                classes: ''\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nvar testActionplanData = {\n  'governance': {\n    //'enter-ten-items': {\n    //  text: 'Enter 10 items...',\n    //  context: ['Section 1', 1489421176326],\n    //  value: '1. hi, 2. ok, 3. bye, ....'\n    //},\n    'what-are-your-thoughts': {\n      text: 'What are your thoughts?',\n      context: ['Section 2', 1589421176327],\n      value: 'I have a few...'\n    }\n  }\n};\n\n/////////////////////\n// TEST DATA TEST //\n///////////////////\n\n//var tincan = tincanInit(config, true);\n//\n//var source = {\n//  //firebase: { /* config for fb */ },\n//  //tincan: { /* api for tincan */ },\n//  test: testActionplanData\n//};\n\n///////////////////////\n// TINCAN DATA TEST //\n/////////////////////\n\nvar email = 'xghftohnson';\nvar firstName = 'Gim';\nvar lastName = 'Tohnson';\n\nvar authUrl = `https://17515-presscdn-0-77-pagely.netdna-ssl.com/wp-content/uploads/grassblade/6896-course-3/index.html?actor=%7B%22mbox%22%3A%22mailto%3A${email}%40scitent.us%22%2C%22name%22%3A%22${firstName}%20${lastName}%22%2C%22objectType%22%3A%22Agent%22%7D&auth=Basic%20MzctMzRiOTNjYWI2MTc0MmUwOmRjOThhYjFjN2U3NDRmZTE4NGRkYzU4N2U%3D&endpoint=https%3A%2F%2Flrs.scitent.us%2FxAPI%2F&registration=&activity_id=http%3A%2F%2Fcareerdevelopment.aaas.org%2Fcourse3`;\nvar tincan = tincanInit(config, false, authUrl);\n\nvar source = {\n  tincan: {\n    setActionplanData: tincan.setActionplanData,\n    getActionplanData: tincan.getActionplanData\n  }\n};\n\n////////////\n// CONFIG //\n////////////\n\nconfigureActionplan({\n  configuration: actionplans,\n  globalConfiguration: allActionplans,\n  dataSource: source\n});\n\n//////////////////////////////////////////////////////////////////////////////////\n// example for use via index.js && actionplan_config.js (with no global config) //\n//////////////////////////////////////////////////////////////////////////////////\n\n//export default dataSource => configureActionplan({\n//  configuration: actionplans,\n//  dataSource: dataSource || { test: testActionplanData }\n//});","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@most/prelude')) :\n  typeof define === 'function' && define.amd ? define(['exports', '@most/prelude'], factory) :\n  (factory((global.mostMulticast = global.mostMulticast || {}),global.mostPrelude));\n}(this, (function (exports,_most_prelude) { 'use strict';\n\nvar MulticastDisposable = function MulticastDisposable (source, sink) {\n  this.source = source\n  this.sink = sink\n  this.disposed = false\n};\n\nMulticastDisposable.prototype.dispose = function dispose () {\n  if (this.disposed) {\n    return\n  }\n  this.disposed = true\n  var remaining = this.source.remove(this.sink)\n  return remaining === 0 && this.source._dispose()\n};\n\nfunction tryEvent (t, x, sink) {\n  try {\n    sink.event(t, x)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n\nfunction tryEnd (t, x, sink) {\n  try {\n    sink.end(t, x)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n\nvar dispose = function (disposable) { return disposable.dispose(); }\n\nvar emptyDisposable = {\n  dispose: function dispose$1 () {}\n}\n\nvar MulticastSource = function MulticastSource (source) {\n  this.source = source\n  this.sinks = []\n  this._disposable = emptyDisposable\n};\n\nMulticastSource.prototype.run = function run (sink, scheduler) {\n  var n = this.add(sink)\n  if (n === 1) {\n    this._disposable = this.source.run(this, scheduler)\n  }\n  return new MulticastDisposable(this, sink)\n};\n\nMulticastSource.prototype._dispose = function _dispose () {\n  var disposable = this._disposable\n  this._disposable = emptyDisposable\n  return Promise.resolve(disposable).then(dispose)\n};\n\nMulticastSource.prototype.add = function add (sink) {\n  this.sinks = _most_prelude.append(sink, this.sinks)\n  return this.sinks.length\n};\n\nMulticastSource.prototype.remove = function remove$1 (sink) {\n  var i = _most_prelude.findIndex(sink, this.sinks)\n  // istanbul ignore next\n  if (i >= 0) {\n    this.sinks = _most_prelude.remove(i, this.sinks)\n  }\n\n  return this.sinks.length\n};\n\nMulticastSource.prototype.event = function event (time, value) {\n  var s = this.sinks\n  if (s.length === 1) {\n    return s[0].event(time, value)\n  }\n  for (var i = 0; i < s.length; ++i) {\n    tryEvent(time, value, s[i])\n  }\n};\n\nMulticastSource.prototype.end = function end (time, value) {\n  var s = this.sinks\n  for (var i = 0; i < s.length; ++i) {\n    tryEnd(time, value, s[i])\n  }\n};\n\nMulticastSource.prototype.error = function error (time, err) {\n  var s = this.sinks\n  for (var i = 0; i < s.length; ++i) {\n    s[i].error(time, err)\n  }\n};\n\nfunction multicast (stream) {\n  var source = stream.source\n  return source instanceof MulticastSource\n    ? stream\n    : new stream.constructor(new MulticastSource(source))\n}\n\nexports['default'] = multicast;\nexports.MulticastSource = MulticastSource;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=multicast.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.mostPrelude = global.mostPrelude || {})));\n}(this, (function (exports) { 'use strict';\n\n  /** @license MIT License (c) copyright 2010-2016 original author or authors */\n\n  // Non-mutating array operations\n\n  // cons :: a -> [a] -> [a]\n  // a with x prepended\n  function cons (x, a) {\n    var l = a.length\n    var b = new Array(l + 1)\n    b[0] = x\n    for (var i = 0; i < l; ++i) {\n      b[i + 1] = a[i]\n    }\n    return b\n  }\n\n  // append :: a -> [a] -> [a]\n  // a with x appended\n  function append (x, a) {\n    var l = a.length\n    var b = new Array(l + 1)\n    for (var i = 0; i < l; ++i) {\n      b[i] = a[i]\n    }\n\n    b[l] = x\n    return b\n  }\n\n  // drop :: Int -> [a] -> [a]\n  // drop first n elements\n  function drop (n, a) { // eslint-disable-line complexity\n    if (n < 0) {\n      throw new TypeError('n must be >= 0')\n    }\n\n    var l = a.length\n    if (n === 0 || l === 0) {\n      return a\n    }\n\n    if (n >= l) {\n      return []\n    }\n\n    return unsafeDrop(n, a, l - n)\n  }\n\n  // unsafeDrop :: Int -> [a] -> Int -> [a]\n  // Internal helper for drop\n  function unsafeDrop (n, a, l) {\n    var b = new Array(l)\n    for (var i = 0; i < l; ++i) {\n      b[i] = a[n + i]\n    }\n    return b\n  }\n\n  // tail :: [a] -> [a]\n  // drop head element\n  function tail (a) {\n    return drop(1, a)\n  }\n\n  // copy :: [a] -> [a]\n  // duplicate a (shallow duplication)\n  function copy (a) {\n    var l = a.length\n    var b = new Array(l)\n    for (var i = 0; i < l; ++i) {\n      b[i] = a[i]\n    }\n    return b\n  }\n\n  // map :: (a -> b) -> [a] -> [b]\n  // transform each element with f\n  function map (f, a) {\n    var l = a.length\n    var b = new Array(l)\n    for (var i = 0; i < l; ++i) {\n      b[i] = f(a[i])\n    }\n    return b\n  }\n\n  // reduce :: (a -> b -> a) -> a -> [b] -> a\n  // accumulate via left-fold\n  function reduce (f, z, a) {\n    var r = z\n    for (var i = 0, l = a.length; i < l; ++i) {\n      r = f(r, a[i], i)\n    }\n    return r\n  }\n\n  // replace :: a -> Int -> [a]\n  // replace element at index\n  function replace (x, i, a) { // eslint-disable-line complexity\n    if (i < 0) {\n      throw new TypeError('i must be >= 0')\n    }\n\n    var l = a.length\n    var b = new Array(l)\n    for (var j = 0; j < l; ++j) {\n      b[j] = i === j ? x : a[j]\n    }\n    return b\n  }\n\n  // remove :: Int -> [a] -> [a]\n  // remove element at index\n  function remove (i, a) {  // eslint-disable-line complexity\n    if (i < 0) {\n      throw new TypeError('i must be >= 0')\n    }\n\n    var l = a.length\n    if (l === 0 || i >= l) { // exit early if index beyond end of array\n      return a\n    }\n\n    if (l === 1) { // exit early if index in bounds and length === 1\n      return []\n    }\n\n    return unsafeRemove(i, a, l - 1)\n  }\n\n  // unsafeRemove :: Int -> [a] -> Int -> [a]\n  // Internal helper to remove element at index\n  function unsafeRemove (i, a, l) {\n    var b = new Array(l)\n    var j\n    for (j = 0; j < i; ++j) {\n      b[j] = a[j]\n    }\n    for (j = i; j < l; ++j) {\n      b[j] = a[j + 1]\n    }\n\n    return b\n  }\n\n  // removeAll :: (a -> boolean) -> [a] -> [a]\n  // remove all elements matching a predicate\n  function removeAll (f, a) {\n    var l = a.length\n    var b = new Array(l)\n    var j = 0\n    for (var x, i = 0; i < l; ++i) {\n      x = a[i]\n      if (!f(x)) {\n        b[j] = x\n        ++j\n      }\n    }\n\n    b.length = j\n    return b\n  }\n\n  // findIndex :: a -> [a] -> Int\n  // find index of x in a, from the left\n  function findIndex (x, a) {\n    for (var i = 0, l = a.length; i < l; ++i) {\n      if (x === a[i]) {\n        return i\n      }\n    }\n    return -1\n  }\n\n  // isArrayLike :: * -> boolean\n  // Return true iff x is array-like\n  function isArrayLike (x) {\n    return x != null && typeof x.length === 'number' && typeof x !== 'function'\n  }\n\n  /** @license MIT License (c) copyright 2010-2016 original author or authors */\n\n  // id :: a -> a\n  var id = function (x) { return x; }\n\n  // compose :: (b -> c) -> (a -> b) -> (a -> c)\n  var compose = function (f, g) { return function (x) { return f(g(x)); }; }\n\n  // apply :: (a -> b) -> a -> b\n  var apply = function (f, x) { return f(x); }\n\n  // curry2 :: ((a, b) -> c) -> (a -> b -> c)\n  function curry2 (f) {\n    function curried (a, b) {\n      switch (arguments.length) {\n        case 0: return curried\n        case 1: return function (b) { return f(a, b); }\n        default: return f(a, b)\n      }\n    }\n    return curried\n  }\n\n  // curry3 :: ((a, b, c) -> d) -> (a -> b -> c -> d)\n  function curry3 (f) {\n    function curried (a, b, c) { // eslint-disable-line complexity\n      switch (arguments.length) {\n        case 0: return curried\n        case 1: return curry2(function (b, c) { return f(a, b, c); })\n        case 2: return function (c) { return f(a, b, c); }\n        default:return f(a, b, c)\n      }\n    }\n    return curried\n  }\n\n  // curry4 :: ((a, b, c, d) -> e) -> (a -> b -> c -> d -> e)\n  function curry4 (f) {\n    function curried (a, b, c, d) { // eslint-disable-line complexity\n      switch (arguments.length) {\n        case 0: return curried\n        case 1: return curry3(function (b, c, d) { return f(a, b, c, d); })\n        case 2: return curry2(function (c, d) { return f(a, b, c, d); })\n        case 3: return function (d) { return f(a, b, c, d); }\n        default:return f(a, b, c, d)\n      }\n    }\n    return curried\n  }\n\n  exports.cons = cons;\n  exports.append = append;\n  exports.drop = drop;\n  exports.tail = tail;\n  exports.copy = copy;\n  exports.map = map;\n  exports.reduce = reduce;\n  exports.replace = replace;\n  exports.remove = remove;\n  exports.removeAll = removeAll;\n  exports.findIndex = findIndex;\n  exports.isArrayLike = isArrayLike;\n  exports.id = id;\n  exports.compose = compose;\n  exports.apply = apply;\n  exports.curry2 = curry2;\n  exports.curry3 = curry3;\n  exports.curry4 = curry4;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=prelude.js.map\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","","'use strict';\n\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  var enc = encoding;\n  var _fill = fill;\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n  var buf = new Buffer(size);\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n  return buf;\n}\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new Buffer(size);\n}\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    var len = length;\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n    return new Buffer(value.slice(offset, offset + len));\n  }\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n  if (value) {\n    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n      return new Buffer(value);\n    }\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n}\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new SlowBuffer(size);\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * classie v1.0.1\n * class helper functions\n * from bonzo https://github.com/ded/bonzo\n * MIT license\n * \n * classie.has( elem, 'my-class' ) -> true/false\n * classie.add( elem, 'my-new-class' )\n * classie.remove( elem, 'my-unwanted-class' )\n * classie.toggle( elem, 'my-class' )\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n/*global define: false, module: false */\n\n( function( window ) {\n\n'use strict';\n\n// class helper functions from bonzo https://github.com/ded/bonzo\n\nfunction classReg( className ) {\n  return new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\");\n}\n\n// classList support for class management\n// altho to be fair, the api sucks because it won't accept multiple classes at once\nvar hasClass, addClass, removeClass;\n\nif ( 'classList' in document.documentElement ) {\n  hasClass = function( elem, c ) {\n    return elem.classList.contains( c );\n  };\n  addClass = function( elem, c ) {\n    elem.classList.add( c );\n  };\n  removeClass = function( elem, c ) {\n    elem.classList.remove( c );\n  };\n}\nelse {\n  hasClass = function( elem, c ) {\n    return classReg( c ).test( elem.className );\n  };\n  addClass = function( elem, c ) {\n    if ( !hasClass( elem, c ) ) {\n      elem.className = elem.className + ' ' + c;\n    }\n  };\n  removeClass = function( elem, c ) {\n    elem.className = elem.className.replace( classReg( c ), ' ' );\n  };\n}\n\nfunction toggleClass( elem, c ) {\n  var fn = hasClass( elem, c ) ? removeClass : addClass;\n  fn( elem, c );\n}\n\nvar classie = {\n  // full names\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  // short names\n  has: hasClass,\n  add: addClass,\n  remove: removeClass,\n  toggle: toggleClass\n};\n\n// transport\nif ( typeof define === 'function' && define.amd ) {\n  // AMD\n  define( classie );\n} else if ( typeof exports === 'object' ) {\n  // CommonJS\n  module.exports = classie;\n} else {\n  // browser global\n  window.classie = classie;\n}\n\n})( window );\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","var attrRE = /([\\w-]+)|(['\"])(.*?)\\2/g;\n\n// create optimized lookup object for\n// void elements as listed here:\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nvar lookup = (Object.create) ? Object.create(null) : {};\nlookup.area = true;\nlookup.base = true;\nlookup.br = true;\nlookup.col = true;\nlookup.embed = true;\nlookup.hr = true;\nlookup.img = true;\nlookup.input = true;\nlookup.keygen = true;\nlookup.link = true;\nlookup.menuitem = true;\nlookup.meta = true;\nlookup.param = true;\nlookup.source = true;\nlookup.track = true;\nlookup.wbr = true;\n\nmodule.exports = function (tag) {\n    var i = 0;\n    var key;\n    var res = {\n        type: 'tag',\n        name: '',\n        voidElement: false,\n        attrs: {},\n        children: []\n    };\n\n    tag.replace(attrRE, function (match) {\n        if (i % 2) {\n            key = match;\n        } else {\n            if (i === 0) {\n                if (lookup[match] || tag.charAt(tag.length - 2) === '/') {\n                    res.voidElement = true;\n                }\n                res.name = match;\n            } else {\n                res.attrs[key] = match.replace(/^['\"]|['\"]$/g, '');\n            }\n        }\n        i++;\n    });\n\n    return res;\n};\n","/*jshint -W030 */\nvar tagRE = /(?:<!--[\\S\\s]*?-->|<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>)/g;\nvar parseTag = require('./parse-tag');\n// re-used obj for quick lookups of components\nvar empty = Object.create ? Object.create(null) : {};\n// common logic for pushing a child node onto a list\nfunction pushTextNode(list, html, start) {\n    // calculate correct end of the content slice in case there's\n    // no tag after the text node.\n    var end = html.indexOf('<', start);\n    var content = html.slice(start, end === -1 ? undefined : end);\n    // if a node is nothing but whitespace, no need to add it.\n    if (!/^\\s*$/.test(content)) {\n        list.push({\n            type: 'text',\n            content: content\n        });\n    }\n}\n\nmodule.exports = function parse(html, options) {\n    options || (options = {});\n    options.components || (options.components = empty);\n    var result = [];\n    var current;\n    var level = -1;\n    var arr = [];\n    var byTag = {};\n    var inComponent = false;\n\n    html.replace(tagRE, function (tag, index) {\n        if (inComponent) {\n            if (tag !== ('</' + current.name + '>')) {\n                return;\n            } else {\n                inComponent = false;\n            }\n        }\n\n        var isOpen = tag.charAt(1) !== '/';\n        var isComment = tag.indexOf('<!--') === 0;\n        var start = index + tag.length;\n        var nextChar = html.charAt(start);\n        var parent;\n\n        if (isOpen && !isComment) {\n            level++;\n\n            current = parseTag(tag);\n            if (current.type === 'tag' && options.components[current.name]) {\n                current.type = 'component';\n                inComponent = true;\n            }\n\n            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\n                pushTextNode(current.children, html, start);\n            }\n\n            byTag[current.tagName] = current;\n\n            // if we're at root, push new base node\n            if (level === 0) {\n                result.push(current);\n            }\n\n            parent = arr[level - 1];\n\n            if (parent) {\n                parent.children.push(current);\n            }\n\n            arr[level] = current;\n        }\n\n        if (isComment || !isOpen || current.voidElement) {\n            if (!isComment) {\n                level--;\n            }\n            if (!inComponent && nextChar !== '<' && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                parent = level === -1 ? result : arr[level].children;\n                pushTextNode(parent, html, start);\n            }\n        }\n    });\n\n    return result;\n};\n","var http = require('http');\n\nvar https = module.exports;\n\nfor (var key in http) {\n    if (http.hasOwnProperty(key)) https[key] = http[key];\n};\n\nhttps.request = function (params, cb) {\n    if (!params) params = {};\n    params.scheme = 'https';\n    params.protocol = 'https:';\n    return http.request.call(this, params, cb);\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * jQuery JavaScript Library v3.2.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-16T21:26Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.2.0\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkable types, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( rcheckableType.test( this.type ) &&\n\t\t\t\t\tthis.click && nodeName( this, \"input\" ) ) {\n\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( \">tbody\", elem )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with computed style\n\tvar valueIsBorderBox,\n\t\tstyles = getStyles( elem ),\n\t\tval = curCSS( elem, name, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Computed unit is not pixels. Stop here and return.\n\tif ( rnumnonpx.test( val ) ) {\n\t\treturn val;\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = isBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t// Normalize \"\", auto, and prepare for extra\n\tval = parseFloat( val ) || 0;\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar doc, docElem, rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\tdoc = elem.ownerDocument;\n\t\tdocElem = doc.documentElement;\n\t\twin = doc.defaultView;\n\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t}\n} );\n\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","\"use strict\";\nvar prelude_1 = require(\"@most/prelude\");\nexports.complete = prelude_1.curry2(function complete(value, subject) {\n    return subject.complete(value);\n});\n//# sourceMappingURL=complete.js.map","\"use strict\";\nvar prelude_1 = require(\"@most/prelude\");\nexports.error = prelude_1.curry2(function error(err, subject) {\n    return subject.error(err);\n});\n//# sourceMappingURL=error.js.map","\"use strict\";\nvar prelude_1 = require(\"@most/prelude\");\nvar sources_1 = require(\"../sources\");\nexports.hold = prelude_1.curry2(function hold(bufferSize, subject) {\n    return new subject.constructor(new sources_1.HoldSubjectSource(subject.source, bufferSize));\n});\n//# sourceMappingURL=hold.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require(\"./next\"));\n__export(require(\"./error\"));\n__export(require(\"./complete\"));\n__export(require(\"./hold\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar prelude_1 = require(\"@most/prelude\");\nexports.next = prelude_1.curry2(function next(value, subject) {\n    return subject.next(value);\n});\n//# sourceMappingURL=next.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require(\"./sources\"));\n__export(require(\"./subjects\"));\n__export(require(\"./combinators\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar most_1 = require(\"most\");\nvar multicast_1 = require(\"@most/multicast\");\nvar prelude_1 = require(\"@most/prelude\");\nvar HoldSubjectSource = (function (_super) {\n    __extends(HoldSubjectSource, _super);\n    function HoldSubjectSource(source, bufferSize) {\n        var _this = _super.call(this, source) || this;\n        _this.has = false;\n        _this.buffer = [];\n        _this.bufferSize = bufferSize;\n        return _this;\n    }\n    HoldSubjectSource.prototype.add = function (sink) {\n        if (this.has) {\n            pushEvents(this.buffer, sink);\n        }\n        return _super.prototype.add.call(this, sink);\n    };\n    HoldSubjectSource.prototype.event = function (time, value) {\n        this.has = true;\n        this.buffer = dropAndAppend(value, this.buffer, this.bufferSize);\n        return _super.prototype.event.call(this, time, value);\n    };\n    return HoldSubjectSource;\n}(multicast_1.MulticastSource));\nexports.HoldSubjectSource = HoldSubjectSource;\nfunction pushEvents(buffer, sink) {\n    var length = buffer.length;\n    for (var i = 0; i < length; ++i) {\n        sink.event(most_1.defaultScheduler.now(), buffer[i]);\n    }\n}\nfunction dropAndAppend(value, buffer, bufferSize) {\n    if (buffer.length === bufferSize) {\n        return prelude_1.append(value, prelude_1.drop(1, buffer));\n    }\n    return prelude_1.append(value, buffer);\n}\nexports.dropAndAppend = dropAndAppend;\n//# sourceMappingURL=HoldSubjectSource.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require(\"./HoldSubjectSource\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar most_1 = require(\"most\");\nvar multicast_1 = require(\"@most/multicast\");\nfunction async() {\n    return asAsync(most_1.never());\n}\nexports.async = async;\nfunction asAsync(stream) {\n    return new AsyncSubject(new multicast_1.MulticastSource(stream.source));\n}\nexports.asAsync = asAsync;\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject(source) {\n        return _super.call(this, source) || this;\n    }\n    AsyncSubject.prototype.next = function (value) {\n        most_1.defaultScheduler.asap(most_1.PropagateTask.event(value, this.source));\n        return this;\n    };\n    AsyncSubject.prototype.error = function (err) {\n        most_1.defaultScheduler.asap(most_1.PropagateTask.error(err, this.source));\n        return this;\n    };\n    AsyncSubject.prototype.complete = function (value) {\n        most_1.defaultScheduler.asap(most_1.PropagateTask.end(value, this.source));\n        return this;\n    };\n    return AsyncSubject;\n}(most_1.Stream));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=index.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require(\"./async\"));\n__export(require(\"./sync\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar most_1 = require(\"most\");\nvar multicast_1 = require(\"@most/multicast\");\nfunction sync() {\n    return asSync(most_1.never());\n}\nexports.sync = sync;\nfunction asSync(stream) {\n    return new SyncSubject(new multicast_1.MulticastSource(stream.source));\n}\nexports.asSync = asSync;\nvar SyncSubject = (function (_super) {\n    __extends(SyncSubject, _super);\n    function SyncSubject(source) {\n        return _super.call(this, source) || this;\n    }\n    SyncSubject.prototype.next = function (value) {\n        this.source.event(most_1.defaultScheduler.now(), value);\n        return this;\n    };\n    SyncSubject.prototype.error = function (err) {\n        this.source.error(most_1.defaultScheduler.now(), err);\n        return this;\n    };\n    SyncSubject.prototype.complete = function (value) {\n        this.source.end(most_1.defaultScheduler.now(), value);\n        return this;\n    };\n    return SyncSubject;\n}(most_1.Stream));\nexports.SyncSubject = SyncSubject;\n//# sourceMappingURL=index.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = LinkedList;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/**\n * Doubly linked list\n * @constructor\n */\nfunction LinkedList() {\n  this.head = null;\n  this.length = 0;\n}\n\n/**\n * Add a node to the end of the list\n * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to add\n */\nLinkedList.prototype.add = function (x) {\n  if (this.head !== null) {\n    this.head.prev = x;\n    x.next = this.head;\n  }\n  this.head = x;\n  ++this.length;\n};\n\n/**\n * Remove the provided node from the list\n * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to remove\n */\nLinkedList.prototype.remove = function (x) {\n  // eslint-disable-line  complexity\n  --this.length;\n  if (x === this.head) {\n    this.head = this.head.next;\n  }\n  if (x.next !== null) {\n    x.next.prev = x.prev;\n    x.next = null;\n  }\n  if (x.prev !== null) {\n    x.prev.next = x.next;\n    x.prev = null;\n  }\n};\n\n/**\n * @returns {boolean} true iff there are no nodes in the list\n */\nLinkedList.prototype.isEmpty = function () {\n  return this.length === 0;\n};\n\n/**\n * Dispose all nodes\n * @returns {Promise} promise that fulfills when all nodes have been disposed,\n *  or rejects if an error occurs while disposing\n */\nLinkedList.prototype.dispose = function () {\n  if (this.isEmpty()) {\n    return Promise.resolve();\n  }\n\n  var promises = [];\n  var x = this.head;\n  this.head = null;\n  this.length = 0;\n\n  while (x !== null) {\n    promises.push(x.dispose());\n    x = x.next;\n  }\n\n  return Promise.all(promises);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPromise = isPromise;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction isPromise(p) {\n  return p !== null && typeof p === 'object' && typeof p.then === 'function';\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Queue;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n// Based on https://github.com/petkaantonov/deque\n\nfunction Queue(capPow2) {\n  this._capacity = capPow2 || 32;\n  this._length = 0;\n  this._head = 0;\n}\n\nQueue.prototype.push = function (x) {\n  var len = this._length;\n  this._checkCapacity(len + 1);\n\n  var i = this._head + len & this._capacity - 1;\n  this[i] = x;\n  this._length = len + 1;\n};\n\nQueue.prototype.shift = function () {\n  var head = this._head;\n  var x = this[head];\n\n  this[head] = void 0;\n  this._head = head + 1 & this._capacity - 1;\n  this._length--;\n  return x;\n};\n\nQueue.prototype.isEmpty = function () {\n  return this._length === 0;\n};\n\nQueue.prototype.length = function () {\n  return this._length;\n};\n\nQueue.prototype._checkCapacity = function (size) {\n  if (this._capacity < size) {\n    this._ensureCapacity(this._capacity << 1);\n  }\n};\n\nQueue.prototype._ensureCapacity = function (capacity) {\n  var oldCapacity = this._capacity;\n  this._capacity = capacity;\n\n  var last = this._head + this._length;\n\n  if (last > oldCapacity) {\n    copy(this, 0, this, oldCapacity, last & oldCapacity - 1);\n  }\n};\n\nfunction copy(src, srcIndex, dst, dstIndex, len) {\n  for (var j = 0; j < len; ++j) {\n    dst[j + dstIndex] = src[j + srcIndex];\n    src[j + srcIndex] = void 0;\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Stream;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Stream(source) {\n  this.source = source;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scan = scan;\nexports.reduce = reduce;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _runSource = require('../runSource');\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a stream containing successive reduce results of applying f to\n * the previous reduce result and the current stream item.\n * @param {function(result:*, x:*):*} f reducer function\n * @param {*} initial initial value\n * @param {Stream} stream stream to scan\n * @returns {Stream} new stream containing successive reduce results\n */\nfunction scan(f, initial, stream) {\n  return new _Stream2.default(new Scan(f, initial, stream.source));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Scan(f, z, source) {\n  this.source = source;\n  this.f = f;\n  this.value = z;\n}\n\nScan.prototype.run = function (sink, scheduler) {\n  var d1 = scheduler.asap(_PropagateTask2.default.event(this.value, sink));\n  var d2 = this.source.run(new ScanSink(this.f, this.value, sink), scheduler);\n  return dispose.all([d1, d2]);\n};\n\nfunction ScanSink(f, z, sink) {\n  this.f = f;\n  this.value = z;\n  this.sink = sink;\n}\n\nScanSink.prototype.event = function (t, x) {\n  var f = this.f;\n  this.value = f(this.value, x);\n  this.sink.event(t, this.value);\n};\n\nScanSink.prototype.error = _Pipe2.default.prototype.error;\nScanSink.prototype.end = _Pipe2.default.prototype.end;\n\n/**\n* Reduce a stream to produce a single result.  Note that reducing an infinite\n* stream will return a Promise that never fulfills, but that may reject if an error\n* occurs.\n* @param {function(result:*, x:*):*} f reducer function\n* @param {*} initial initial value\n* @param {Stream} stream to reduce\n* @returns {Promise} promise for the file result of the reduce\n*/\nfunction reduce(f, initial, stream) {\n  return (0, _runSource.withDefaultScheduler)(new Reduce(f, initial, stream.source));\n}\n\nfunction Reduce(f, z, source) {\n  this.source = source;\n  this.f = f;\n  this.value = z;\n}\n\nReduce.prototype.run = function (sink, scheduler) {\n  return this.source.run(new ReduceSink(this.f, this.value, sink), scheduler);\n};\n\nfunction ReduceSink(f, z, sink) {\n  this.f = f;\n  this.value = z;\n  this.sink = sink;\n}\n\nReduceSink.prototype.event = function (t, x) {\n  var f = this.f;\n  this.value = f(this.value, x);\n  this.sink.event(t, this.value);\n};\n\nReduceSink.prototype.error = _Pipe2.default.prototype.error;\n\nReduceSink.prototype.end = function (t) {\n  this.sink.end(t, this.value);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ap = ap;\n\nvar _combine = require('./combine');\n\nvar _prelude = require('@most/prelude');\n\n/**\n * Assume fs is a stream containing functions, and apply the latest function\n * in fs to the latest value in xs.\n * fs:         --f---------g--------h------>\n * xs:         -a-------b-------c-------d-->\n * ap(fs, xs): --fa-----fb-gb---gc--hc--hd->\n * @param {Stream} fs stream of functions to apply to the latest x\n * @param {Stream} xs stream of values to which to apply all the latest f\n * @returns {Stream} stream containing all the applications of fs to xs\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction ap(fs, xs) {\n  return (0, _combine.combine)(_prelude.apply, fs, xs);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cons = cons;\nexports.concat = concat;\n\nvar _core = require('../source/core');\n\nvar _continueWith = require('./continueWith');\n\n/**\n * @param {*} x value to prepend\n * @param {Stream} stream\n * @returns {Stream} new stream with x prepended\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction cons(x, stream) {\n  return concat((0, _core.of)(x), stream);\n}\n\n/**\n* @param {Stream} left\n* @param {Stream} right\n* @returns {Stream} new stream containing all events in left followed by all\n*  events in right.  This *timeshifts* right to the end of left.\n*/\nfunction concat(left, right) {\n  return (0, _continueWith.continueWith)(function () {\n    return right;\n  }, left);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.combine = combine;\nexports.combineArray = combineArray;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _transform = require('./transform');\n\nvar transform = _interopRequireWildcard(_transform);\n\nvar _core = require('../source/core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _IndexSink = require('../sink/IndexSink');\n\nvar _IndexSink2 = _interopRequireDefault(_IndexSink);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nvar _invoke = require('../invoke');\n\nvar _invoke2 = _interopRequireDefault(_invoke);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar map = base.map;\nvar tail = base.tail;\n\n/**\n * Combine latest events from all input streams\n * @param {function(...events):*} f function to combine most recent events\n * @returns {Stream} stream containing the result of applying f to the most recent\n *  event of each input stream, whenever a new event arrives on any stream.\n */\nfunction combine(f /*, ...streams */) {\n  return combineArray(f, tail(arguments));\n}\n\n/**\n* Combine latest events from all input streams\n* @param {function(...events):*} f function to combine most recent events\n* @param {[Stream]} streams most recent events\n* @returns {Stream} stream containing the result of applying f to the most recent\n*  event of each input stream, whenever a new event arrives on any stream.\n*/\nfunction combineArray(f, streams) {\n  var l = streams.length;\n  return l === 0 ? core.empty() : l === 1 ? transform.map(f, streams[0]) : new _Stream2.default(combineSources(f, streams));\n}\n\nfunction combineSources(f, streams) {\n  return new Combine(f, map(getSource, streams));\n}\n\nfunction getSource(stream) {\n  return stream.source;\n}\n\nfunction Combine(f, sources) {\n  this.f = f;\n  this.sources = sources;\n}\n\nCombine.prototype.run = function (sink, scheduler) {\n  var this$1 = this;\n\n  var l = this.sources.length;\n  var disposables = new Array(l);\n  var sinks = new Array(l);\n\n  var mergeSink = new CombineSink(disposables, sinks, sink, this.f);\n\n  for (var indexSink, i = 0; i < l; ++i) {\n    indexSink = sinks[i] = new _IndexSink2.default(i, mergeSink);\n    disposables[i] = this$1.sources[i].run(indexSink, scheduler);\n  }\n\n  return dispose.all(disposables);\n};\n\nfunction CombineSink(disposables, sinks, sink, f) {\n  var this$1 = this;\n\n  this.sink = sink;\n  this.disposables = disposables;\n  this.sinks = sinks;\n  this.f = f;\n\n  var l = sinks.length;\n  this.awaiting = l;\n  this.values = new Array(l);\n  this.hasValue = new Array(l);\n  for (var i = 0; i < l; ++i) {\n    this$1.hasValue[i] = false;\n  }\n\n  this.activeCount = sinks.length;\n}\n\nCombineSink.prototype.error = _Pipe2.default.prototype.error;\n\nCombineSink.prototype.event = function (t, indexedValue) {\n  var i = indexedValue.index;\n  var awaiting = this._updateReady(i);\n\n  this.values[i] = indexedValue.value;\n  if (awaiting === 0) {\n    this.sink.event(t, (0, _invoke2.default)(this.f, this.values));\n  }\n};\n\nCombineSink.prototype._updateReady = function (index) {\n  if (this.awaiting > 0) {\n    if (!this.hasValue[index]) {\n      this.hasValue[index] = true;\n      this.awaiting -= 1;\n    }\n  }\n  return this.awaiting;\n};\n\nCombineSink.prototype.end = function (t, indexedValue) {\n  dispose.tryDispose(t, this.disposables[indexedValue.index], this.sink);\n  if (--this.activeCount === 0) {\n    this.sink.end(t, indexedValue.value);\n  }\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatMap = concatMap;\n\nvar _mergeConcurrently = require('./mergeConcurrently');\n\n/**\n * Map each value in stream to a new stream, and concatenate them all\n * stream:              -a---b---cX\n * f(a):                 1-1-1-1X\n * f(b):                        -2-2-2-2X\n * f(c):                                -3-3-3-3X\n * stream.concatMap(f): -1-1-1-1-2-2-2-2-3-3-3-3X\n * @param {function(x:*):Stream} f function to map each value to a stream\n * @param {Stream} stream\n * @returns {Stream} new stream containing all events from each stream returned by f\n */\nfunction concatMap(f, stream) {\n  return (0, _mergeConcurrently.mergeMapConcurrently)(f, 1, stream);\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.continueWith = continueWith;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction continueWith(f, stream) {\n  return new _Stream2.default(new ContinueWith(f, stream.source));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction ContinueWith(f, source) {\n  this.f = f;\n  this.source = source;\n}\n\nContinueWith.prototype.run = function (sink, scheduler) {\n  return new ContinueWithSink(this.f, this.source, sink, scheduler);\n};\n\nfunction ContinueWithSink(f, source, sink, scheduler) {\n  this.f = f;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.active = true;\n  this.disposable = dispose.once(source.run(this, scheduler));\n}\n\nContinueWithSink.prototype.error = _Pipe2.default.prototype.error;\n\nContinueWithSink.prototype.event = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.sink.event(t, x);\n};\n\nContinueWithSink.prototype.end = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n\n  dispose.tryDispose(t, this.disposable, this.sink);\n  this._startNext(t, x, this.sink);\n};\n\nContinueWithSink.prototype._startNext = function (t, x, sink) {\n  try {\n    this.disposable = this._continue(this.f, x, sink);\n  } catch (e) {\n    sink.error(t, e);\n  }\n};\n\nContinueWithSink.prototype._continue = function (f, x, sink) {\n  return f(x).source.run(sink, this.scheduler);\n};\n\nContinueWithSink.prototype.dispose = function () {\n  this.active = false;\n  return this.disposable.dispose();\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.delay = delay;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param {Number} delayTime milliseconds to delay each item\n * @param {Stream} stream\n * @returns {Stream} new stream containing the same items, but delayed by ms\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction delay(delayTime, stream) {\n  return delayTime <= 0 ? stream : new _Stream2.default(new Delay(delayTime, stream.source));\n}\n\nfunction Delay(dt, source) {\n  this.dt = dt;\n  this.source = source;\n}\n\nDelay.prototype.run = function (sink, scheduler) {\n  var delaySink = new DelaySink(this.dt, sink, scheduler);\n  return dispose.all([delaySink, this.source.run(delaySink, scheduler)]);\n};\n\nfunction DelaySink(dt, sink, scheduler) {\n  this.dt = dt;\n  this.sink = sink;\n  this.scheduler = scheduler;\n}\n\nDelaySink.prototype.dispose = function () {\n  var self = this;\n  this.scheduler.cancelAll(function (task) {\n    return task.sink === self.sink;\n  });\n};\n\nDelaySink.prototype.event = function (t, x) {\n  this.scheduler.delay(this.dt, _PropagateTask2.default.event(x, this.sink));\n};\n\nDelaySink.prototype.end = function (t, x) {\n  this.scheduler.delay(this.dt, _PropagateTask2.default.end(x, this.sink));\n};\n\nDelaySink.prototype.error = _Pipe2.default.prototype.error;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flatMapError = undefined;\nexports.recoverWith = recoverWith;\nexports.throwError = throwError;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _SafeSink = require('../sink/SafeSink');\n\nvar _SafeSink2 = _interopRequireDefault(_SafeSink);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _tryEvent = require('../source/tryEvent');\n\nvar tryEvent = _interopRequireWildcard(_tryEvent);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * If stream encounters an error, recover and continue with items from stream\n * returned by f.\n * @param {function(error:*):Stream} f function which returns a new stream\n * @param {Stream} stream\n * @returns {Stream} new stream which will recover from an error by calling f\n */\nfunction recoverWith(f, stream) {\n  return new _Stream2.default(new RecoverWith(f, stream.source));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar flatMapError = exports.flatMapError = recoverWith;\n\n/**\n * Create a stream containing only an error\n * @param {*} e error value, preferably an Error or Error subtype\n * @returns {Stream} new stream containing only an error\n */\nfunction throwError(e) {\n  return new _Stream2.default(new ErrorSource(e));\n}\n\nfunction ErrorSource(e) {\n  this.value = e;\n}\n\nErrorSource.prototype.run = function (sink, scheduler) {\n  return scheduler.asap(new _PropagateTask2.default(runError, this.value, sink));\n};\n\nfunction runError(t, e, sink) {\n  sink.error(t, e);\n}\n\nfunction RecoverWith(f, source) {\n  this.f = f;\n  this.source = source;\n}\n\nRecoverWith.prototype.run = function (sink, scheduler) {\n  return new RecoverWithSink(this.f, this.source, sink, scheduler);\n};\n\nfunction RecoverWithSink(f, source, sink, scheduler) {\n  this.f = f;\n  this.sink = new _SafeSink2.default(sink);\n  this.scheduler = scheduler;\n  this.disposable = source.run(this, scheduler);\n}\n\nRecoverWithSink.prototype.event = function (t, x) {\n  tryEvent.tryEvent(t, x, this.sink);\n};\n\nRecoverWithSink.prototype.end = function (t, x) {\n  tryEvent.tryEnd(t, x, this.sink);\n};\n\nRecoverWithSink.prototype.error = function (t, e) {\n  var nextSink = this.sink.disable();\n\n  dispose.tryDispose(t, this.disposable, this.sink);\n  this._startNext(t, e, nextSink);\n};\n\nRecoverWithSink.prototype._startNext = function (t, x, sink) {\n  try {\n    this.disposable = this._continue(this.f, x, sink);\n  } catch (e) {\n    sink.error(t, e);\n  }\n};\n\nRecoverWithSink.prototype._continue = function (f, x, sink) {\n  var stream = f(x);\n  return stream.source.run(sink, this.scheduler);\n};\n\nRecoverWithSink.prototype.dispose = function () {\n  return this.disposable.dispose();\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filter = filter;\nexports.skipRepeats = skipRepeats;\nexports.skipRepeatsWith = skipRepeatsWith;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _Filter = require('../fusion/Filter');\n\nvar _Filter2 = _interopRequireDefault(_Filter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Retain only items matching a predicate\n * @param {function(x:*):boolean} p filtering predicate called for each item\n * @param {Stream} stream stream to filter\n * @returns {Stream} stream containing only items for which predicate returns truthy\n */\nfunction filter(p, stream) {\n  return new _Stream2.default(_Filter2.default.create(p, stream.source));\n}\n\n/**\n * Skip repeated events, using === to detect duplicates\n * @param {Stream} stream stream from which to omit repeated events\n * @returns {Stream} stream without repeated events\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction skipRepeats(stream) {\n  return skipRepeatsWith(same, stream);\n}\n\n/**\n * Skip repeated events using the provided equals function to detect duplicates\n * @param {function(a:*, b:*):boolean} equals optional function to compare items\n * @param {Stream} stream stream from which to omit repeated events\n * @returns {Stream} stream without repeated events\n */\nfunction skipRepeatsWith(equals, stream) {\n  return new _Stream2.default(new SkipRepeats(equals, stream.source));\n}\n\nfunction SkipRepeats(equals, source) {\n  this.equals = equals;\n  this.source = source;\n}\n\nSkipRepeats.prototype.run = function (sink, scheduler) {\n  return this.source.run(new SkipRepeatsSink(this.equals, sink), scheduler);\n};\n\nfunction SkipRepeatsSink(equals, sink) {\n  this.equals = equals;\n  this.sink = sink;\n  this.value = void 0;\n  this.init = true;\n}\n\nSkipRepeatsSink.prototype.end = _Pipe2.default.prototype.end;\nSkipRepeatsSink.prototype.error = _Pipe2.default.prototype.error;\n\nSkipRepeatsSink.prototype.event = function (t, x) {\n  if (this.init) {\n    this.init = false;\n    this.value = x;\n    this.sink.event(t, x);\n  } else if (!this.equals(this.value, x)) {\n    this.value = x;\n    this.sink.event(t, x);\n  }\n};\n\nfunction same(a, b) {\n  return a === b;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flatMap = flatMap;\nexports.join = join;\n\nvar _mergeConcurrently = require('./mergeConcurrently');\n\n/**\n * Map each value in the stream to a new stream, and merge it into the\n * returned outer stream. Event arrival times are preserved.\n * @param {function(x:*):Stream} f chaining function, must return a Stream\n * @param {Stream} stream\n * @returns {Stream} new stream containing all events from each stream returned by f\n */\nfunction flatMap(f, stream) {\n  return (0, _mergeConcurrently.mergeMapConcurrently)(f, Infinity, stream);\n}\n\n/**\n * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner\n * streams to the outer. Event arrival times are preserved.\n * @param {Stream<Stream<X>>} stream stream of streams\n * @returns {Stream<X>} new stream containing all events of all inner streams\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction join(stream) {\n  return (0, _mergeConcurrently.mergeConcurrently)(Infinity, stream);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.throttle = throttle;\nexports.debounce = debounce;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nvar _Map = require('../fusion/Map');\n\nvar _Map2 = _interopRequireDefault(_Map);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Limit the rate of events by suppressing events that occur too often\n * @param {Number} period time to suppress events\n * @param {Stream} stream\n * @returns {Stream}\n */\nfunction throttle(period, stream) {\n  return new _Stream2.default(throttleSource(period, stream.source));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction throttleSource(period, source) {\n  return source instanceof _Map2.default ? commuteMapThrottle(period, source) : source instanceof Throttle ? fuseThrottle(period, source) : new Throttle(period, source);\n}\n\nfunction commuteMapThrottle(period, source) {\n  return _Map2.default.create(source.f, throttleSource(period, source.source));\n}\n\nfunction fuseThrottle(period, source) {\n  return new Throttle(Math.max(period, source.period), source.source);\n}\n\nfunction Throttle(period, source) {\n  this.period = period;\n  this.source = source;\n}\n\nThrottle.prototype.run = function (sink, scheduler) {\n  return this.source.run(new ThrottleSink(this.period, sink), scheduler);\n};\n\nfunction ThrottleSink(period, sink) {\n  this.time = 0;\n  this.period = period;\n  this.sink = sink;\n}\n\nThrottleSink.prototype.event = function (t, x) {\n  if (t >= this.time) {\n    this.time = t + this.period;\n    this.sink.event(t, x);\n  }\n};\n\nThrottleSink.prototype.end = _Pipe2.default.prototype.end;\n\nThrottleSink.prototype.error = _Pipe2.default.prototype.error;\n\n/**\n * Wait for a burst of events to subside and emit only the last event in the burst\n * @param {Number} period events occuring more frequently than this\n *  will be suppressed\n * @param {Stream} stream stream to debounce\n * @returns {Stream} new debounced stream\n */\nfunction debounce(period, stream) {\n  return new _Stream2.default(new Debounce(period, stream.source));\n}\n\nfunction Debounce(dt, source) {\n  this.dt = dt;\n  this.source = source;\n}\n\nDebounce.prototype.run = function (sink, scheduler) {\n  return new DebounceSink(this.dt, this.source, sink, scheduler);\n};\n\nfunction DebounceSink(dt, source, sink, scheduler) {\n  this.dt = dt;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.value = void 0;\n  this.timer = null;\n\n  var sourceDisposable = source.run(this, scheduler);\n  this.disposable = dispose.all([this, sourceDisposable]);\n}\n\nDebounceSink.prototype.event = function (t, x) {\n  this._clearTimer();\n  this.value = x;\n  this.timer = this.scheduler.delay(this.dt, _PropagateTask2.default.event(x, this.sink));\n};\n\nDebounceSink.prototype.end = function (t, x) {\n  if (this._clearTimer()) {\n    this.sink.event(t, this.value);\n    this.value = void 0;\n  }\n  this.sink.end(t, x);\n};\n\nDebounceSink.prototype.error = function (t, x) {\n  this._clearTimer();\n  this.sink.error(t, x);\n};\n\nDebounceSink.prototype.dispose = function () {\n  this._clearTimer();\n};\n\nDebounceSink.prototype._clearTimer = function () {\n  if (this.timer === null) {\n    return false;\n  }\n  this.timer.dispose();\n  this.timer = null;\n  return true;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loop = loop;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Generalized feedback loop. Call a stepper function for each event. The stepper\n * will be called with 2 params: the current seed and the an event value.  It must\n * return a new { seed, value } pair. The `seed` will be fed back into the next\n * invocation of stepper, and the `value` will be propagated as the event value.\n * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function\n * @param {*} seed initial seed value passed to first stepper call\n * @param {Stream} stream event stream\n * @returns {Stream} new stream whose values are the `value` field of the objects\n * returned by the stepper\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction loop(stepper, seed, stream) {\n  return new _Stream2.default(new Loop(stepper, seed, stream.source));\n}\n\nfunction Loop(stepper, seed, source) {\n  this.step = stepper;\n  this.seed = seed;\n  this.source = source;\n}\n\nLoop.prototype.run = function (sink, scheduler) {\n  return this.source.run(new LoopSink(this.step, this.seed, sink), scheduler);\n};\n\nfunction LoopSink(stepper, seed, sink) {\n  this.step = stepper;\n  this.seed = seed;\n  this.sink = sink;\n}\n\nLoopSink.prototype.error = _Pipe2.default.prototype.error;\n\nLoopSink.prototype.event = function (t, x) {\n  var result = this.step(this.seed, x);\n  this.seed = result.seed;\n  this.sink.event(t, result.value);\n};\n\nLoopSink.prototype.end = function (t) {\n  this.sink.end(t, this.seed);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = merge;\nexports.mergeArray = mergeArray;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _IndexSink = require('../sink/IndexSink');\n\nvar _IndexSink2 = _interopRequireDefault(_IndexSink);\n\nvar _core = require('../source/core');\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar copy = base.copy;\nvar reduce = base.reduce;\n\n/**\n * @returns {Stream} stream containing events from all streams in the argument\n * list in time order.  If two events are simultaneous they will be merged in\n * arbitrary order.\n */\nfunction merge() /* ...streams*/{\n  return mergeArray(copy(arguments));\n}\n\n/**\n * @param {Array} streams array of stream to merge\n * @returns {Stream} stream containing events from all input observables\n * in time order.  If two events are simultaneous they will be merged in\n * arbitrary order.\n */\nfunction mergeArray(streams) {\n  var l = streams.length;\n  return l === 0 ? (0, _core.empty)() : l === 1 ? streams[0] : new _Stream2.default(mergeSources(streams));\n}\n\n/**\n * This implements fusion/flattening for merge.  It will\n * fuse adjacent merge operations.  For example:\n * - a.merge(b).merge(c) effectively becomes merge(a, b, c)\n * - merge(a, merge(b, c)) effectively becomes merge(a, b, c)\n * It does this by concatenating the sources arrays of\n * any nested Merge sources, in effect \"flattening\" nested\n * merge operations into a single merge.\n */\nfunction mergeSources(streams) {\n  return new Merge(reduce(appendSources, [], streams));\n}\n\nfunction appendSources(sources, stream) {\n  var source = stream.source;\n  return source instanceof Merge ? sources.concat(source.sources) : sources.concat(source);\n}\n\nfunction Merge(sources) {\n  this.sources = sources;\n}\n\nMerge.prototype.run = function (sink, scheduler) {\n  var this$1 = this;\n\n  var l = this.sources.length;\n  var disposables = new Array(l);\n  var sinks = new Array(l);\n\n  var mergeSink = new MergeSink(disposables, sinks, sink);\n\n  for (var indexSink, i = 0; i < l; ++i) {\n    indexSink = sinks[i] = new _IndexSink2.default(i, mergeSink);\n    disposables[i] = this$1.sources[i].run(indexSink, scheduler);\n  }\n\n  return dispose.all(disposables);\n};\n\nfunction MergeSink(disposables, sinks, sink) {\n  this.sink = sink;\n  this.disposables = disposables;\n  this.activeCount = sinks.length;\n}\n\nMergeSink.prototype.error = _Pipe2.default.prototype.error;\n\nMergeSink.prototype.event = function (t, indexValue) {\n  this.sink.event(t, indexValue.value);\n};\n\nMergeSink.prototype.end = function (t, indexedValue) {\n  dispose.tryDispose(t, this.disposables[indexedValue.index], this.sink);\n  if (--this.activeCount === 0) {\n    this.sink.end(t, indexedValue.value);\n  }\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeConcurrently = mergeConcurrently;\nexports.mergeMapConcurrently = mergeMapConcurrently;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _LinkedList = require('../LinkedList');\n\nvar _LinkedList2 = _interopRequireDefault(_LinkedList);\n\nvar _prelude = require('@most/prelude');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction mergeConcurrently(concurrency, stream) {\n  return mergeMapConcurrently(_prelude.id, concurrency, stream);\n}\n\nfunction mergeMapConcurrently(f, concurrency, stream) {\n  return new _Stream2.default(new MergeConcurrently(f, concurrency, stream.source));\n}\n\nfunction MergeConcurrently(f, concurrency, source) {\n  this.f = f;\n  this.concurrency = concurrency;\n  this.source = source;\n}\n\nMergeConcurrently.prototype.run = function (sink, scheduler) {\n  return new Outer(this.f, this.concurrency, this.source, sink, scheduler);\n};\n\nfunction Outer(f, concurrency, source, sink, scheduler) {\n  this.f = f;\n  this.concurrency = concurrency;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.pending = [];\n  this.current = new _LinkedList2.default();\n  this.disposable = dispose.once(source.run(this, scheduler));\n  this.active = true;\n}\n\nOuter.prototype.event = function (t, x) {\n  this._addInner(t, x);\n};\n\nOuter.prototype._addInner = function (t, x) {\n  if (this.current.length < this.concurrency) {\n    this._startInner(t, x);\n  } else {\n    this.pending.push(x);\n  }\n};\n\nOuter.prototype._startInner = function (t, x) {\n  try {\n    this._initInner(t, x);\n  } catch (e) {\n    this.error(t, e);\n  }\n};\n\nOuter.prototype._initInner = function (t, x) {\n  var innerSink = new Inner(t, this, this.sink);\n  innerSink.disposable = mapAndRun(this.f, x, innerSink, this.scheduler);\n  this.current.add(innerSink);\n};\n\nfunction mapAndRun(f, x, sink, scheduler) {\n  return f(x).source.run(sink, scheduler);\n}\n\nOuter.prototype.end = function (t, x) {\n  this.active = false;\n  dispose.tryDispose(t, this.disposable, this.sink);\n  this._checkEnd(t, x);\n};\n\nOuter.prototype.error = function (t, e) {\n  this.active = false;\n  this.sink.error(t, e);\n};\n\nOuter.prototype.dispose = function () {\n  this.active = false;\n  this.pending.length = 0;\n  return Promise.all([this.disposable.dispose(), this.current.dispose()]);\n};\n\nOuter.prototype._endInner = function (t, x, inner) {\n  this.current.remove(inner);\n  dispose.tryDispose(t, inner, this);\n\n  if (this.pending.length === 0) {\n    this._checkEnd(t, x);\n  } else {\n    this._startInner(t, this.pending.shift());\n  }\n};\n\nOuter.prototype._checkEnd = function (t, x) {\n  if (!this.active && this.current.isEmpty()) {\n    this.sink.end(t, x);\n  }\n};\n\nfunction Inner(time, outer, sink) {\n  this.prev = this.next = null;\n  this.time = time;\n  this.outer = outer;\n  this.sink = sink;\n  this.disposable = void 0;\n}\n\nInner.prototype.event = function (t, x) {\n  this.sink.event(Math.max(t, this.time), x);\n};\n\nInner.prototype.end = function (t, x) {\n  this.outer._endInner(Math.max(t, this.time), x, this);\n};\n\nInner.prototype.error = function (t, e) {\n  this.outer.error(Math.max(t, this.time), e);\n};\n\nInner.prototype.dispose = function () {\n  return this.disposable.dispose();\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.observe = observe;\nexports.drain = drain;\n\nvar _runSource = require('../runSource');\n\nvar _transform = require('./transform');\n\n/**\n * Observe all the event values in the stream in time order. The\n * provided function `f` will be called for each event value\n * @param {function(x:T):*} f function to call with each event value\n * @param {Stream<T>} stream stream to observe\n * @return {Promise} promise that fulfills after the stream ends without\n *  an error, or rejects if the stream ends with an error.\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction observe(f, stream) {\n  return drain((0, _transform.tap)(f, stream));\n}\n\n/**\n * \"Run\" a stream by creating demand and consuming all events\n * @param {Stream<T>} stream stream to drain\n * @return {Promise} promise that fulfills after the stream ends without\n *  an error, or rejects if the stream ends with an error.\n */\nfunction drain(stream) {\n  return (0, _runSource.withDefaultScheduler)(stream.source);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromPromise = fromPromise;\nexports.awaitPromises = awaitPromises;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _fatalError = require('../fatalError');\n\nvar _fatalError2 = _interopRequireDefault(_fatalError);\n\nvar _core = require('../source/core');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a stream containing only the promise's fulfillment\n * value at the time it fulfills.\n * @param {Promise<T>} p promise\n * @return {Stream<T>} stream containing promise's fulfillment value.\n *  If the promise rejects, the stream will error\n */\nfunction fromPromise(p) {\n  return awaitPromises((0, _core.of)(p));\n}\n\n/**\n * Turn a Stream<Promise<T>> into Stream<T> by awaiting each promise.\n * Event order is preserved.\n * @param {Stream<Promise<T>>} stream\n * @return {Stream<T>} stream of fulfillment values.  The stream will\n * error if any promise rejects.\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction awaitPromises(stream) {\n  return new _Stream2.default(new Await(stream.source));\n}\n\nfunction Await(source) {\n  this.source = source;\n}\n\nAwait.prototype.run = function (sink, scheduler) {\n  return this.source.run(new AwaitSink(sink, scheduler), scheduler);\n};\n\nfunction AwaitSink(sink, scheduler) {\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.queue = Promise.resolve();\n  var self = this;\n\n  // Pre-create closures, to avoid creating them per event\n  this._eventBound = function (x) {\n    self.sink.event(self.scheduler.now(), x);\n  };\n\n  this._endBound = function (x) {\n    self.sink.end(self.scheduler.now(), x);\n  };\n\n  this._errorBound = function (e) {\n    self.sink.error(self.scheduler.now(), e);\n  };\n}\n\nAwaitSink.prototype.event = function (t, promise) {\n  var self = this;\n  this.queue = this.queue.then(function () {\n    return self._event(promise);\n  }).catch(this._errorBound);\n};\n\nAwaitSink.prototype.end = function (t, x) {\n  var self = this;\n  this.queue = this.queue.then(function () {\n    return self._end(x);\n  }).catch(this._errorBound);\n};\n\nAwaitSink.prototype.error = function (t, e) {\n  var self = this;\n  // Don't resolve error values, propagate directly\n  this.queue = this.queue.then(function () {\n    return self._errorBound(e);\n  }).catch(_fatalError2.default);\n};\n\nAwaitSink.prototype._event = function (promise) {\n  return promise.then(this._eventBound);\n};\n\nAwaitSink.prototype._end = function (x) {\n  return Promise.resolve(x).then(this._endBound);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sample = sample;\nexports.sampleWith = sampleWith;\nexports.sampleArray = sampleArray;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nvar _invoke = require('../invoke');\n\nvar _invoke2 = _interopRequireDefault(_invoke);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * When an event arrives on sampler, emit the result of calling f with the latest\n * values of all streams being sampled\n * @param {function(...values):*} f function to apply to each set of sampled values\n * @param {Stream} sampler streams will be sampled whenever an event arrives\n *  on sampler\n * @returns {Stream} stream of sampled and transformed values\n */\nfunction sample(f, sampler /*, ...streams */) {\n  return sampleArray(f, sampler, base.drop(2, arguments));\n}\n\n/**\n * When an event arrives on sampler, emit the latest event value from stream.\n * @param {Stream} sampler stream of events at whose arrival time\n *  stream's latest value will be propagated\n * @param {Stream} stream stream of values\n * @returns {Stream} sampled stream of values\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction sampleWith(sampler, stream) {\n  return new _Stream2.default(new Sampler(base.id, sampler.source, [stream.source]));\n}\n\nfunction sampleArray(f, sampler, streams) {\n  return new _Stream2.default(new Sampler(f, sampler.source, base.map(getSource, streams)));\n}\n\nfunction getSource(stream) {\n  return stream.source;\n}\n\nfunction Sampler(f, sampler, sources) {\n  this.f = f;\n  this.sampler = sampler;\n  this.sources = sources;\n}\n\nSampler.prototype.run = function (sink, scheduler) {\n  var this$1 = this;\n\n  var l = this.sources.length;\n  var disposables = new Array(l + 1);\n  var sinks = new Array(l);\n\n  var sampleSink = new SampleSink(this.f, sinks, sink);\n\n  for (var hold, i = 0; i < l; ++i) {\n    hold = sinks[i] = new Hold(sampleSink);\n    disposables[i] = this$1.sources[i].run(hold, scheduler);\n  }\n\n  disposables[i] = this.sampler.run(sampleSink, scheduler);\n\n  return dispose.all(disposables);\n};\n\nfunction Hold(sink) {\n  this.sink = sink;\n  this.hasValue = false;\n}\n\nHold.prototype.event = function (t, x) {\n  this.value = x;\n  this.hasValue = true;\n  this.sink._notify(this);\n};\n\nHold.prototype.end = function () {};\nHold.prototype.error = _Pipe2.default.prototype.error;\n\nfunction SampleSink(f, sinks, sink) {\n  this.f = f;\n  this.sinks = sinks;\n  this.sink = sink;\n  this.active = false;\n}\n\nSampleSink.prototype._notify = function () {\n  if (!this.active) {\n    this.active = this.sinks.every(hasValue);\n  }\n};\n\nSampleSink.prototype.event = function (t) {\n  if (this.active) {\n    this.sink.event(t, (0, _invoke2.default)(this.f, base.map(getValue, this.sinks)));\n  }\n};\n\nSampleSink.prototype.end = _Pipe2.default.prototype.end;\nSampleSink.prototype.error = _Pipe2.default.prototype.error;\n\nfunction hasValue(hold) {\n  return hold.hasValue;\n}\n\nfunction getValue(hold) {\n  return hold.value;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.take = take;\nexports.skip = skip;\nexports.slice = slice;\nexports.takeWhile = takeWhile;\nexports.skipWhile = skipWhile;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _core = require('../source/core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _Map = require('../fusion/Map');\n\nvar _Map2 = _interopRequireDefault(_Map);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param {number} n\n * @param {Stream} stream\n * @returns {Stream} new stream containing only up to the first n items from stream\n */\nfunction take(n, stream) {\n  return slice(0, n, stream);\n}\n\n/**\n * @param {number} n\n * @param {Stream} stream\n * @returns {Stream} new stream with the first n items removed\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction skip(n, stream) {\n  return slice(n, Infinity, stream);\n}\n\n/**\n * Slice a stream by index. Negative start/end indexes are not supported\n * @param {number} start\n * @param {number} end\n * @param {Stream} stream\n * @returns {Stream} stream containing items where start <= index < end\n */\nfunction slice(start, end, stream) {\n  return end <= start ? core.empty() : new _Stream2.default(sliceSource(start, end, stream.source));\n}\n\nfunction sliceSource(start, end, source) {\n  return source instanceof _Map2.default ? commuteMapSlice(start, end, source) : source instanceof Slice ? fuseSlice(start, end, source) : new Slice(start, end, source);\n}\n\nfunction commuteMapSlice(start, end, source) {\n  return _Map2.default.create(source.f, sliceSource(start, end, source.source));\n}\n\nfunction fuseSlice(start, end, source) {\n  start += source.min;\n  end = Math.min(end + source.min, source.max);\n  return new Slice(start, end, source.source);\n}\n\nfunction Slice(min, max, source) {\n  this.source = source;\n  this.min = min;\n  this.max = max;\n}\n\nSlice.prototype.run = function (sink, scheduler) {\n  return new SliceSink(this.min, this.max - this.min, this.source, sink, scheduler);\n};\n\nfunction SliceSink(skip, take, source, sink, scheduler) {\n  this.sink = sink;\n  this.skip = skip;\n  this.take = take;\n  this.disposable = dispose.once(source.run(this, scheduler));\n}\n\nSliceSink.prototype.end = _Pipe2.default.prototype.end;\nSliceSink.prototype.error = _Pipe2.default.prototype.error;\n\nSliceSink.prototype.event = function (t, x) {\n  // eslint-disable-line complexity\n  if (this.skip > 0) {\n    this.skip -= 1;\n    return;\n  }\n\n  if (this.take === 0) {\n    return;\n  }\n\n  this.take -= 1;\n  this.sink.event(t, x);\n  if (this.take === 0) {\n    this.dispose();\n    this.sink.end(t, x);\n  }\n};\n\nSliceSink.prototype.dispose = function () {\n  return this.disposable.dispose();\n};\n\nfunction takeWhile(p, stream) {\n  return new _Stream2.default(new TakeWhile(p, stream.source));\n}\n\nfunction TakeWhile(p, source) {\n  this.p = p;\n  this.source = source;\n}\n\nTakeWhile.prototype.run = function (sink, scheduler) {\n  return new TakeWhileSink(this.p, this.source, sink, scheduler);\n};\n\nfunction TakeWhileSink(p, source, sink, scheduler) {\n  this.p = p;\n  this.sink = sink;\n  this.active = true;\n  this.disposable = dispose.once(source.run(this, scheduler));\n}\n\nTakeWhileSink.prototype.end = _Pipe2.default.prototype.end;\nTakeWhileSink.prototype.error = _Pipe2.default.prototype.error;\n\nTakeWhileSink.prototype.event = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n\n  var p = this.p;\n  this.active = p(x);\n  if (this.active) {\n    this.sink.event(t, x);\n  } else {\n    this.dispose();\n    this.sink.end(t, x);\n  }\n};\n\nTakeWhileSink.prototype.dispose = function () {\n  return this.disposable.dispose();\n};\n\nfunction skipWhile(p, stream) {\n  return new _Stream2.default(new SkipWhile(p, stream.source));\n}\n\nfunction SkipWhile(p, source) {\n  this.p = p;\n  this.source = source;\n}\n\nSkipWhile.prototype.run = function (sink, scheduler) {\n  return this.source.run(new SkipWhileSink(this.p, sink), scheduler);\n};\n\nfunction SkipWhileSink(p, sink) {\n  this.p = p;\n  this.sink = sink;\n  this.skipping = true;\n}\n\nSkipWhileSink.prototype.end = _Pipe2.default.prototype.end;\nSkipWhileSink.prototype.error = _Pipe2.default.prototype.error;\n\nSkipWhileSink.prototype.event = function (t, x) {\n  if (this.skipping) {\n    var p = this.p;\n    this.skipping = p(x);\n    if (this.skipping) {\n      return;\n    }\n  }\n\n  this.sink.event(t, x);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switch = undefined;\nexports.switchLatest = switchLatest;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a stream of streams, return a new stream that adopts the behavior\n * of the most recent inner stream.\n * @param {Stream} stream of streams on which to switch\n * @returns {Stream} switching stream\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction switchLatest(stream) {\n  return new _Stream2.default(new Switch(stream.source));\n}\n\nexports.switch = switchLatest;\n\n\nfunction Switch(source) {\n  this.source = source;\n}\n\nSwitch.prototype.run = function (sink, scheduler) {\n  var switchSink = new SwitchSink(sink, scheduler);\n  return dispose.all([switchSink, this.source.run(switchSink, scheduler)]);\n};\n\nfunction SwitchSink(sink, scheduler) {\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.current = null;\n  this.ended = false;\n}\n\nSwitchSink.prototype.event = function (t, stream) {\n  this._disposeCurrent(t); // TODO: capture the result of this dispose\n  this.current = new Segment(t, Infinity, this, this.sink);\n  this.current.disposable = stream.source.run(this.current, this.scheduler);\n};\n\nSwitchSink.prototype.end = function (t, x) {\n  this.ended = true;\n  this._checkEnd(t, x);\n};\n\nSwitchSink.prototype.error = function (t, e) {\n  this.ended = true;\n  this.sink.error(t, e);\n};\n\nSwitchSink.prototype.dispose = function () {\n  return this._disposeCurrent(this.scheduler.now());\n};\n\nSwitchSink.prototype._disposeCurrent = function (t) {\n  if (this.current !== null) {\n    return this.current._dispose(t);\n  }\n};\n\nSwitchSink.prototype._disposeInner = function (t, inner) {\n  inner._dispose(t); // TODO: capture the result of this dispose\n  if (inner === this.current) {\n    this.current = null;\n  }\n};\n\nSwitchSink.prototype._checkEnd = function (t, x) {\n  if (this.ended && this.current === null) {\n    this.sink.end(t, x);\n  }\n};\n\nSwitchSink.prototype._endInner = function (t, x, inner) {\n  this._disposeInner(t, inner);\n  this._checkEnd(t, x);\n};\n\nSwitchSink.prototype._errorInner = function (t, e, inner) {\n  this._disposeInner(t, inner);\n  this.sink.error(t, e);\n};\n\nfunction Segment(min, max, outer, sink) {\n  this.min = min;\n  this.max = max;\n  this.outer = outer;\n  this.sink = sink;\n  this.disposable = dispose.empty();\n}\n\nSegment.prototype.event = function (t, x) {\n  if (t < this.max) {\n    this.sink.event(Math.max(t, this.min), x);\n  }\n};\n\nSegment.prototype.end = function (t, x) {\n  this.outer._endInner(Math.max(t, this.min), x, this);\n};\n\nSegment.prototype.error = function (t, e) {\n  this.outer._errorInner(Math.max(t, this.min), e, this);\n};\n\nSegment.prototype._dispose = function (t) {\n  this.max = t;\n  dispose.tryDispose(t, this.disposable, this.sink);\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.thru = thru;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction thru(f, stream) {\n  return f(stream);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.takeUntil = takeUntil;\nexports.skipUntil = skipUntil;\nexports.during = during;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _flatMap = require('../combinator/flatMap');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction takeUntil(signal, stream) {\n  return new _Stream2.default(new Until(signal.source, stream.source));\n}\n\nfunction skipUntil(signal, stream) {\n  return new _Stream2.default(new Since(signal.source, stream.source));\n}\n\nfunction during(timeWindow, stream) {\n  return takeUntil((0, _flatMap.join)(timeWindow), skipUntil(timeWindow, stream));\n}\n\nfunction Until(maxSignal, source) {\n  this.maxSignal = maxSignal;\n  this.source = source;\n}\n\nUntil.prototype.run = function (sink, scheduler) {\n  var min = new Bound(-Infinity, sink);\n  var max = new UpperBound(this.maxSignal, sink, scheduler);\n  var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);\n\n  return dispose.all([min, max, disposable]);\n};\n\nfunction Since(minSignal, source) {\n  this.minSignal = minSignal;\n  this.source = source;\n}\n\nSince.prototype.run = function (sink, scheduler) {\n  var min = new LowerBound(this.minSignal, sink, scheduler);\n  var max = new Bound(Infinity, sink);\n  var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);\n\n  return dispose.all([min, max, disposable]);\n};\n\nfunction Bound(value, sink) {\n  this.value = value;\n  this.sink = sink;\n}\n\nBound.prototype.error = _Pipe2.default.prototype.error;\nBound.prototype.event = noop;\nBound.prototype.end = noop;\nBound.prototype.dispose = noop;\n\nfunction TimeWindowSink(min, max, sink) {\n  this.min = min;\n  this.max = max;\n  this.sink = sink;\n}\n\nTimeWindowSink.prototype.event = function (t, x) {\n  if (t >= this.min.value && t < this.max.value) {\n    this.sink.event(t, x);\n  }\n};\n\nTimeWindowSink.prototype.error = _Pipe2.default.prototype.error;\nTimeWindowSink.prototype.end = _Pipe2.default.prototype.end;\n\nfunction LowerBound(signal, sink, scheduler) {\n  this.value = Infinity;\n  this.sink = sink;\n  this.disposable = signal.run(this, scheduler);\n}\n\nLowerBound.prototype.event = function (t /*, x */) {\n  if (t < this.value) {\n    this.value = t;\n  }\n};\n\nLowerBound.prototype.end = noop;\nLowerBound.prototype.error = _Pipe2.default.prototype.error;\n\nLowerBound.prototype.dispose = function () {\n  return this.disposable.dispose();\n};\n\nfunction UpperBound(signal, sink, scheduler) {\n  this.value = Infinity;\n  this.sink = sink;\n  this.disposable = signal.run(this, scheduler);\n}\n\nUpperBound.prototype.event = function (t, x) {\n  if (t < this.value) {\n    this.value = t;\n    this.sink.end(t, x);\n  }\n};\n\nUpperBound.prototype.end = noop;\nUpperBound.prototype.error = _Pipe2.default.prototype.error;\n\nUpperBound.prototype.dispose = function () {\n  return this.disposable.dispose();\n};\n\nfunction noop() {}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timestamp = timestamp;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction timestamp(stream) {\n  return new _Stream2.default(new Timestamp(stream.source));\n}\n\nfunction Timestamp(source) {\n  this.source = source;\n}\n\nTimestamp.prototype.run = function (sink, scheduler) {\n  return this.source.run(new TimestampSink(sink), scheduler);\n};\n\nfunction TimestampSink(sink) {\n  this.sink = sink;\n}\n\nTimestampSink.prototype.end = _Pipe2.default.prototype.end;\nTimestampSink.prototype.error = _Pipe2.default.prototype.error;\n\nTimestampSink.prototype.event = function (t, x) {\n  this.sink.event(t, { time: t, value: x });\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transduce = transduce;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transform a stream by passing its events through a transducer.\n * @param  {function} transducer transducer function\n * @param  {Stream} stream stream whose events will be passed through the\n *  transducer\n * @return {Stream} stream of events transformed by the transducer\n */\nfunction transduce(transducer, stream) {\n  return new _Stream2.default(new Transduce(transducer, stream.source));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Transduce(transducer, source) {\n  this.transducer = transducer;\n  this.source = source;\n}\n\nTransduce.prototype.run = function (sink, scheduler) {\n  var xf = this.transducer(new Transformer(sink));\n  return this.source.run(new TransduceSink(getTxHandler(xf), sink), scheduler);\n};\n\nfunction TransduceSink(adapter, sink) {\n  this.xf = adapter;\n  this.sink = sink;\n}\n\nTransduceSink.prototype.event = function (t, x) {\n  var next = this.xf.step(t, x);\n\n  return this.xf.isReduced(next) ? this.sink.end(t, this.xf.getResult(next)) : next;\n};\n\nTransduceSink.prototype.end = function (t, x) {\n  return this.xf.result(x);\n};\n\nTransduceSink.prototype.error = function (t, e) {\n  return this.sink.error(t, e);\n};\n\nfunction Transformer(sink) {\n  this.time = -Infinity;\n  this.sink = sink;\n}\n\nTransformer.prototype['@@transducer/init'] = Transformer.prototype.init = function () {};\n\nTransformer.prototype['@@transducer/step'] = Transformer.prototype.step = function (t, x) {\n  if (!isNaN(t)) {\n    this.time = Math.max(t, this.time);\n  }\n  return this.sink.event(this.time, x);\n};\n\nTransformer.prototype['@@transducer/result'] = Transformer.prototype.result = function (x) {\n  return this.sink.end(this.time, x);\n};\n\n/**\n* Given an object supporting the new or legacy transducer protocol,\n* create an adapter for it.\n* @param {object} tx transform\n* @returns {TxAdapter|LegacyTxAdapter}\n*/\nfunction getTxHandler(tx) {\n  return typeof tx['@@transducer/step'] === 'function' ? new TxAdapter(tx) : new LegacyTxAdapter(tx);\n}\n\n/**\n* Adapter for new official transducer protocol\n* @param {object} tx transform\n* @constructor\n*/\nfunction TxAdapter(tx) {\n  this.tx = tx;\n}\n\nTxAdapter.prototype.step = function (t, x) {\n  return this.tx['@@transducer/step'](t, x);\n};\nTxAdapter.prototype.result = function (x) {\n  return this.tx['@@transducer/result'](x);\n};\nTxAdapter.prototype.isReduced = function (x) {\n  return x != null && x['@@transducer/reduced'];\n};\nTxAdapter.prototype.getResult = function (x) {\n  return x['@@transducer/value'];\n};\n\n/**\n* Adapter for older transducer protocol\n* @param {object} tx transform\n* @constructor\n*/\nfunction LegacyTxAdapter(tx) {\n  this.tx = tx;\n}\n\nLegacyTxAdapter.prototype.step = function (t, x) {\n  return this.tx.step(t, x);\n};\nLegacyTxAdapter.prototype.result = function (x) {\n  return this.tx.result(x);\n};\nLegacyTxAdapter.prototype.isReduced = function (x) {\n  return x != null && x.__transducers_reduced__;\n};\nLegacyTxAdapter.prototype.getResult = function (x) {\n  return x.value;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.map = map;\nexports.constant = constant;\nexports.tap = tap;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _Map = require('../fusion/Map');\n\nvar _Map2 = _interopRequireDefault(_Map);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transform each value in the stream by applying f to each\n * @param {function(*):*} f mapping function\n * @param {Stream} stream stream to map\n * @returns {Stream} stream containing items transformed by f\n */\nfunction map(f, stream) {\n  return new _Stream2.default(_Map2.default.create(f, stream.source));\n}\n\n/**\n* Replace each value in the stream with x\n* @param {*} x\n* @param {Stream} stream\n* @returns {Stream} stream containing items replaced with x\n*/\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction constant(x, stream) {\n  return map(function () {\n    return x;\n  }, stream);\n}\n\n/**\n* Perform a side effect for each item in the stream\n* @param {function(x:*):*} f side effect to execute for each item. The\n*  return value will be discarded.\n* @param {Stream} stream stream to tap\n* @returns {Stream} new stream containing the same items as this stream\n*/\nfunction tap(f, stream) {\n  return new _Stream2.default(new Tap(f, stream.source));\n}\n\nfunction Tap(f, source) {\n  this.source = source;\n  this.f = f;\n}\n\nTap.prototype.run = function (sink, scheduler) {\n  return this.source.run(new TapSink(this.f, sink), scheduler);\n};\n\nfunction TapSink(f, sink) {\n  this.sink = sink;\n  this.f = f;\n}\n\nTapSink.prototype.end = _Pipe2.default.prototype.end;\nTapSink.prototype.error = _Pipe2.default.prototype.error;\n\nTapSink.prototype.event = function (t, x) {\n  var f = this.f;\n  f(x);\n  this.sink.event(t, x);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zip = zip;\nexports.zipArray = zipArray;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _transform = require('./transform');\n\nvar transform = _interopRequireWildcard(_transform);\n\nvar _core = require('../source/core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _IndexSink = require('../sink/IndexSink');\n\nvar _IndexSink2 = _interopRequireDefault(_IndexSink);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nvar _invoke = require('../invoke');\n\nvar _invoke2 = _interopRequireDefault(_invoke);\n\nvar _Queue = require('../Queue');\n\nvar _Queue2 = _interopRequireDefault(_Queue);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar map = base.map; /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar tail = base.tail;\n\n/**\n * Combine streams pairwise (or tuple-wise) by index by applying f to values\n * at corresponding indices.  The returned stream ends when any of the input\n * streams ends.\n * @param {function} f function to combine values\n * @returns {Stream} new stream with items at corresponding indices combined\n *  using f\n */\nfunction zip(f /*, ...streams */) {\n  return zipArray(f, tail(arguments));\n}\n\n/**\n* Combine streams pairwise (or tuple-wise) by index by applying f to values\n* at corresponding indices.  The returned stream ends when any of the input\n* streams ends.\n* @param {function} f function to combine values\n* @param {[Stream]} streams streams to zip using f\n* @returns {Stream} new stream with items at corresponding indices combined\n*  using f\n*/\nfunction zipArray(f, streams) {\n  return streams.length === 0 ? core.empty() : streams.length === 1 ? transform.map(f, streams[0]) : new _Stream2.default(new Zip(f, map(getSource, streams)));\n}\n\nfunction getSource(stream) {\n  return stream.source;\n}\n\nfunction Zip(f, sources) {\n  this.f = f;\n  this.sources = sources;\n}\n\nZip.prototype.run = function (sink, scheduler) {\n  var this$1 = this;\n\n  var l = this.sources.length;\n  var disposables = new Array(l);\n  var sinks = new Array(l);\n  var buffers = new Array(l);\n\n  var zipSink = new ZipSink(this.f, buffers, sinks, sink);\n\n  for (var indexSink, i = 0; i < l; ++i) {\n    buffers[i] = new _Queue2.default();\n    indexSink = sinks[i] = new _IndexSink2.default(i, zipSink);\n    disposables[i] = this$1.sources[i].run(indexSink, scheduler);\n  }\n\n  return dispose.all(disposables);\n};\n\nfunction ZipSink(f, buffers, sinks, sink) {\n  this.f = f;\n  this.sinks = sinks;\n  this.sink = sink;\n  this.buffers = buffers;\n}\n\nZipSink.prototype.event = function (t, indexedValue) {\n  // eslint-disable-line complexity\n  var buffers = this.buffers;\n  var buffer = buffers[indexedValue.index];\n\n  buffer.push(indexedValue.value);\n\n  if (buffer.length() === 1) {\n    if (!ready(this.buffers)) {\n      return;\n    }\n\n    emitZipped(this.f, t, buffers, this.sink);\n\n    if (ended(this.buffers, this.sinks)) {\n      this.sink.end(t, void 0);\n    }\n  }\n};\n\nZipSink.prototype.end = function (t, indexedValue) {\n  var buffer = this.buffers[indexedValue.index];\n  if (buffer.isEmpty()) {\n    this.sink.end(t, indexedValue.value);\n  }\n};\n\nZipSink.prototype.error = _Pipe2.default.prototype.error;\n\nfunction emitZipped(f, t, buffers, sink) {\n  sink.event(t, (0, _invoke2.default)(f, map(head, buffers)));\n}\n\nfunction head(buffer) {\n  return buffer.shift();\n}\n\nfunction ended(buffers, sinks) {\n  for (var i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty() && !sinks[i].active) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction ready(buffers) {\n  for (var i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty()) {\n      return false;\n    }\n  }\n  return true;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Disposable;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/**\n * Create a new Disposable which will dispose its underlying resource.\n * @param {function} dispose function\n * @param {*?} data any data to be passed to disposer function\n * @constructor\n */\nfunction Disposable(dispose, data) {\n  this._dispose = dispose;\n  this._data = data;\n}\n\nDisposable.prototype.dispose = function () {\n  return this._dispose(this._data);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SettableDisposable;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction SettableDisposable() {\n  this.disposable = void 0;\n  this.disposed = false;\n  this._resolve = void 0;\n\n  var self = this;\n  this.result = new Promise(function (resolve) {\n    self._resolve = resolve;\n  });\n}\n\nSettableDisposable.prototype.setDisposable = function (disposable) {\n  if (this.disposable !== void 0) {\n    throw new Error('setDisposable called more than once');\n  }\n\n  this.disposable = disposable;\n\n  if (this.disposed) {\n    this._resolve(disposable.dispose());\n  }\n};\n\nSettableDisposable.prototype.dispose = function () {\n  if (this.disposed) {\n    return this.result;\n  }\n\n  this.disposed = true;\n\n  if (this.disposable !== void 0) {\n    this.result = this.disposable.dispose();\n  }\n\n  return this.result;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryDispose = tryDispose;\nexports.create = create;\nexports.empty = empty;\nexports.all = all;\nexports.promised = promised;\nexports.settable = settable;\nexports.once = once;\n\nvar _Disposable = require('./Disposable');\n\nvar _Disposable2 = _interopRequireDefault(_Disposable);\n\nvar _SettableDisposable = require('./SettableDisposable');\n\nvar _SettableDisposable2 = _interopRequireDefault(_SettableDisposable);\n\nvar _Promise = require('../Promise');\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\nvar map = base.map;\nvar identity = base.id;\n\n/**\n * Call disposable.dispose.  If it returns a promise, catch promise\n * error and forward it through the provided sink.\n * @param {number} t time\n * @param {{dispose: function}} disposable\n * @param {{error: function}} sink\n * @return {*} result of disposable.dispose\n */\nfunction tryDispose(t, disposable, sink) {\n  var result = disposeSafely(disposable);\n  return (0, _Promise.isPromise)(result) ? result.catch(function (e) {\n    sink.error(t, e);\n  }) : result;\n}\n\n/**\n * Create a new Disposable which will dispose its underlying resource\n * at most once.\n * @param {function} dispose function\n * @param {*?} data any data to be passed to disposer function\n * @return {Disposable}\n */\nfunction create(dispose, data) {\n  return once(new _Disposable2.default(dispose, data));\n}\n\n/**\n * Create a noop disposable. Can be used to satisfy a Disposable\n * requirement when no actual resource needs to be disposed.\n * @return {Disposable|exports|module.exports}\n */\nfunction empty() {\n  return new _Disposable2.default(identity, void 0);\n}\n\n/**\n * Create a disposable that will dispose all input disposables in parallel.\n * @param {Array<Disposable>} disposables\n * @return {Disposable}\n */\nfunction all(disposables) {\n  return create(disposeAll, disposables);\n}\n\nfunction disposeAll(disposables) {\n  return Promise.all(map(disposeSafely, disposables));\n}\n\nfunction disposeSafely(disposable) {\n  try {\n    return disposable.dispose();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Create a disposable from a promise for another disposable\n * @param {Promise<Disposable>} disposablePromise\n * @return {Disposable}\n */\nfunction promised(disposablePromise) {\n  return create(disposePromise, disposablePromise);\n}\n\nfunction disposePromise(disposablePromise) {\n  return disposablePromise.then(disposeOne);\n}\n\nfunction disposeOne(disposable) {\n  return disposable.dispose();\n}\n\n/**\n * Create a disposable proxy that allows its underlying disposable to\n * be set later.\n * @return {SettableDisposable}\n */\nfunction settable() {\n  return new _SettableDisposable2.default();\n}\n\n/**\n * Wrap an existing disposable (which may not already have been once()d)\n * so that it will only dispose its underlying resource at most once.\n * @param {{ dispose: function() }} disposable\n * @return {Disposable} wrapped disposable\n */\nfunction once(disposable) {\n  return new _Disposable2.default(disposeMemoized, memoized(disposable));\n}\n\nfunction disposeMemoized(memoized) {\n  if (!memoized.disposed) {\n    memoized.disposed = true;\n    memoized.value = disposeSafely(memoized.disposable);\n    memoized.disposable = void 0;\n  }\n\n  return memoized.value;\n}\n\nfunction memoized(disposable) {\n  return { disposed: false, disposable: disposable, value: void 0 };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = fatalError;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction fatalError(e) {\n  setTimeout(function () {\n    throw e;\n  }, 0);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Filter;\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Filter(p, source) {\n  this.p = p;\n  this.source = source;\n}\n\n/**\n * Create a filtered source, fusing adjacent filter.filter if possible\n * @param {function(x:*):boolean} p filtering predicate\n * @param {{run:function}} source source to filter\n * @returns {Filter} filtered source\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nFilter.create = function createFilter(p, source) {\n  if (source instanceof Filter) {\n    return new Filter(and(source.p, p), source.source);\n  }\n\n  return new Filter(p, source);\n};\n\nFilter.prototype.run = function (sink, scheduler) {\n  return this.source.run(new FilterSink(this.p, sink), scheduler);\n};\n\nfunction FilterSink(p, sink) {\n  this.p = p;\n  this.sink = sink;\n}\n\nFilterSink.prototype.end = _Pipe2.default.prototype.end;\nFilterSink.prototype.error = _Pipe2.default.prototype.error;\n\nFilterSink.prototype.event = function (t, x) {\n  var p = this.p;\n  p(x) && this.sink.event(t, x);\n};\n\nfunction and(p, q) {\n  return function (x) {\n    return p(x) && q(x);\n  };\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = FilterMap;\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction FilterMap(p, f, source) {\n  this.p = p;\n  this.f = f;\n  this.source = source;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nFilterMap.prototype.run = function (sink, scheduler) {\n  return this.source.run(new FilterMapSink(this.p, this.f, sink), scheduler);\n};\n\nfunction FilterMapSink(p, f, sink) {\n  this.p = p;\n  this.f = f;\n  this.sink = sink;\n}\n\nFilterMapSink.prototype.event = function (t, x) {\n  var f = this.f;\n  var p = this.p;\n  p(x) && this.sink.event(t, f(x));\n};\n\nFilterMapSink.prototype.end = _Pipe2.default.prototype.end;\nFilterMapSink.prototype.error = _Pipe2.default.prototype.error;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Map;\n\nvar _Pipe = require('../sink/Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nvar _Filter = require('./Filter');\n\nvar _Filter2 = _interopRequireDefault(_Filter);\n\nvar _FilterMap = require('./FilterMap');\n\nvar _FilterMap2 = _interopRequireDefault(_FilterMap);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Map(f, source) {\n  this.f = f;\n  this.source = source;\n}\n\n/**\n * Create a mapped source, fusing adjacent map.map, filter.map,\n * and filter.map.map if possible\n * @param {function(*):*} f mapping function\n * @param {{run:function}} source source to map\n * @returns {Map|FilterMap} mapped source, possibly fused\n */\nMap.create = function createMap(f, source) {\n  if (source instanceof Map) {\n    return new Map(base.compose(f, source.f), source.source);\n  }\n\n  if (source instanceof _Filter2.default) {\n    return new _FilterMap2.default(source.p, f, source.source);\n  }\n\n  return new Map(f, source);\n};\n\nMap.prototype.run = function (sink, scheduler) {\n  // eslint-disable-line no-extend-native\n  return this.source.run(new MapSink(this.f, sink), scheduler);\n};\n\nfunction MapSink(f, sink) {\n  this.f = f;\n  this.sink = sink;\n}\n\nMapSink.prototype.end = _Pipe2.default.prototype.end;\nMapSink.prototype.error = _Pipe2.default.prototype.error;\n\nMapSink.prototype.event = function (t, x) {\n  var f = this.f;\n  this.sink.event(t, f(x));\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropagateTask = exports.defaultScheduler = exports.multicast = exports.throwError = exports.flatMapError = exports.recoverWith = exports.await = exports.awaitPromises = exports.fromPromise = exports.debounce = exports.throttle = exports.timestamp = exports.delay = exports.during = exports.since = exports.skipUntil = exports.until = exports.takeUntil = exports.skipWhile = exports.takeWhile = exports.slice = exports.skip = exports.take = exports.distinctBy = exports.skipRepeatsWith = exports.distinct = exports.skipRepeats = exports.filter = exports.switch = exports.switchLatest = exports.zipArray = exports.zip = exports.sampleWith = exports.sampleArray = exports.sample = exports.combineArray = exports.combine = exports.mergeArray = exports.merge = exports.mergeConcurrently = exports.concatMap = exports.flatMapEnd = exports.continueWith = exports.join = exports.chain = exports.flatMap = exports.transduce = exports.ap = exports.tap = exports.constant = exports.map = exports.startWith = exports.concat = exports.generate = exports.iterate = exports.unfold = exports.reduce = exports.scan = exports.loop = exports.drain = exports.forEach = exports.observe = exports.fromEvent = exports.periodic = exports.from = exports.never = exports.empty = exports.just = exports.of = exports.Stream = undefined;\n\nvar _fromEvent = require('./source/fromEvent');\n\nObject.defineProperty(exports, 'fromEvent', {\n  enumerable: true,\n  get: function () {\n    return _fromEvent.fromEvent;\n  }\n});\n\nvar _unfold = require('./source/unfold');\n\nObject.defineProperty(exports, 'unfold', {\n  enumerable: true,\n  get: function () {\n    return _unfold.unfold;\n  }\n});\n\nvar _iterate = require('./source/iterate');\n\nObject.defineProperty(exports, 'iterate', {\n  enumerable: true,\n  get: function () {\n    return _iterate.iterate;\n  }\n});\n\nvar _generate = require('./source/generate');\n\nObject.defineProperty(exports, 'generate', {\n  enumerable: true,\n  get: function () {\n    return _generate.generate;\n  }\n});\n\nvar _Stream = require('./Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nvar _core = require('./source/core');\n\nvar _from = require('./source/from');\n\nvar _periodic = require('./source/periodic');\n\nvar _symbolObservable = require('symbol-observable');\n\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);\n\nvar _subscribe = require('./observable/subscribe');\n\nvar _thru = require('./combinator/thru');\n\nvar _observe = require('./combinator/observe');\n\nvar _loop = require('./combinator/loop');\n\nvar _accumulate = require('./combinator/accumulate');\n\nvar _build = require('./combinator/build');\n\nvar _transform = require('./combinator/transform');\n\nvar _applicative = require('./combinator/applicative');\n\nvar _transduce = require('./combinator/transduce');\n\nvar _flatMap = require('./combinator/flatMap');\n\nvar _continueWith = require('./combinator/continueWith');\n\nvar _concatMap = require('./combinator/concatMap');\n\nvar _mergeConcurrently = require('./combinator/mergeConcurrently');\n\nvar _merge = require('./combinator/merge');\n\nvar _combine = require('./combinator/combine');\n\nvar _sample = require('./combinator/sample');\n\nvar _zip = require('./combinator/zip');\n\nvar _switch = require('./combinator/switch');\n\nvar _filter = require('./combinator/filter');\n\nvar _slice = require('./combinator/slice');\n\nvar _timeslice = require('./combinator/timeslice');\n\nvar _delay = require('./combinator/delay');\n\nvar _timestamp = require('./combinator/timestamp');\n\nvar _limit = require('./combinator/limit');\n\nvar _promises = require('./combinator/promises');\n\nvar _errors = require('./combinator/errors');\n\nvar _multicast = require('@most/multicast');\n\nvar _multicast2 = _interopRequireDefault(_multicast);\n\nvar _defaultScheduler = require('./scheduler/defaultScheduler');\n\nvar _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);\n\nvar _PropagateTask = require('./scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Core stream type\n * @type {Stream}\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nexports.Stream = _Stream2.default;\n\n// Add of and empty to constructor for fantasy-land compat\n\n_Stream2.default.of = _core.of;\n_Stream2.default.empty = _core.empty;\n// Add from to constructor for ES Observable compat\n_Stream2.default.from = _from.from;\nexports.of = _core.of;\nexports.just = _core.of;\nexports.empty = _core.empty;\nexports.never = _core.never;\nexports.from = _from.from;\nexports.periodic = _periodic.periodic;\n\n// -----------------------------------------------------------------------\n// Draft ES Observable proposal interop\n// https://github.com/zenparsing/es-observable\n\n_Stream2.default.prototype.subscribe = function (subscriber) {\n  return (0, _subscribe.subscribe)(subscriber, this);\n};\n\n_Stream2.default.prototype[_symbolObservable2.default] = function () {\n  return this;\n};\n\n// -----------------------------------------------------------------------\n// Fluent adapter\n\n/**\n * Adapt a functional stream transform to fluent style.\n * It applies f to the this stream object\n * @param  {function(s: Stream): Stream} f function that\n * receives the stream itself and must return a new stream\n * @return {Stream}\n */\n_Stream2.default.prototype.thru = function (f) {\n  return (0, _thru.thru)(f, this);\n};\n\n// -----------------------------------------------------------------------\n// Adapting other sources\n\n/**\n * Create a stream of events from the supplied EventTarget or EventEmitter\n * @param {String} event event name\n * @param {EventTarget|EventEmitter} source EventTarget or EventEmitter. The source\n *  must support either addEventListener/removeEventListener (w3c EventTarget:\n *  http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget),\n *  or addListener/removeListener (node EventEmitter: http://nodejs.org/api/events.html)\n * @returns {Stream} stream of events of the specified type from the source\n */\n\n\n// -----------------------------------------------------------------------\n// Observing\n\nexports.observe = _observe.observe;\nexports.forEach = _observe.observe;\nexports.drain = _observe.drain;\n\n/**\n * Process all the events in the stream\n * @returns {Promise} promise that fulfills when the stream ends, or rejects\n *  if the stream fails with an unhandled error.\n */\n\n_Stream2.default.prototype.observe = _Stream2.default.prototype.forEach = function (f) {\n  return (0, _observe.observe)(f, this);\n};\n\n/**\n * Consume all events in the stream, without providing a function to process each.\n * This causes a stream to become active and begin emitting events, and is useful\n * in cases where all processing has been setup upstream via other combinators, and\n * there is no need to process the terminal events.\n * @returns {Promise} promise that fulfills when the stream ends, or rejects\n *  if the stream fails with an unhandled error.\n */\n_Stream2.default.prototype.drain = function () {\n  return (0, _observe.drain)(this);\n};\n\n// -------------------------------------------------------\n\nexports.loop = _loop.loop;\n\n/**\n * Generalized feedback loop. Call a stepper function for each event. The stepper\n * will be called with 2 params: the current seed and the an event value.  It must\n * return a new { seed, value } pair. The `seed` will be fed back into the next\n * invocation of stepper, and the `value` will be propagated as the event value.\n * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function\n * @param {*} seed initial seed value passed to first stepper call\n * @returns {Stream} new stream whose values are the `value` field of the objects\n * returned by the stepper\n */\n\n_Stream2.default.prototype.loop = function (stepper, seed) {\n  return (0, _loop.loop)(stepper, seed, this);\n};\n\n// -------------------------------------------------------\n\nexports.scan = _accumulate.scan;\nexports.reduce = _accumulate.reduce;\n\n/**\n * Create a stream containing successive reduce results of applying f to\n * the previous reduce result and the current stream item.\n * @param {function(result:*, x:*):*} f reducer function\n * @param {*} initial initial value\n * @returns {Stream} new stream containing successive reduce results\n */\n\n_Stream2.default.prototype.scan = function (f, initial) {\n  return (0, _accumulate.scan)(f, initial, this);\n};\n\n/**\n * Reduce the stream to produce a single result.  Note that reducing an infinite\n * stream will return a Promise that never fulfills, but that may reject if an error\n * occurs.\n * @param {function(result:*, x:*):*} f reducer function\n * @param {*} initial optional initial value\n * @returns {Promise} promise for the file result of the reduce\n */\n_Stream2.default.prototype.reduce = function (f, initial) {\n  return (0, _accumulate.reduce)(f, initial, this);\n};\n\n// -----------------------------------------------------------------------\n// Building and extending\n\nexports.concat = _build.concat;\nexports.startWith = _build.cons;\n\n/**\n * @param {Stream} tail\n * @returns {Stream} new stream containing all items in this followed by\n *  all items in tail\n */\n\n_Stream2.default.prototype.concat = function (tail) {\n  return (0, _build.concat)(this, tail);\n};\n\n/**\n * @param {*} x value to prepend\n * @returns {Stream} a new stream with x prepended\n */\n_Stream2.default.prototype.startWith = function (x) {\n  return (0, _build.cons)(x, this);\n};\n\n// -----------------------------------------------------------------------\n// Transforming\n\nexports.map = _transform.map;\nexports.constant = _transform.constant;\nexports.tap = _transform.tap;\nexports.ap = _applicative.ap;\n\n/**\n * Transform each value in the stream by applying f to each\n * @param {function(*):*} f mapping function\n * @returns {Stream} stream containing items transformed by f\n */\n\n_Stream2.default.prototype.map = function (f) {\n  return (0, _transform.map)(f, this);\n};\n\n/**\n * Assume this stream contains functions, and apply each function to each item\n * in the provided stream.  This generates, in effect, a cross product.\n * @param {Stream} xs stream of items to which\n * @returns {Stream} stream containing the cross product of items\n */\n_Stream2.default.prototype.ap = function (xs) {\n  return (0, _applicative.ap)(this, xs);\n};\n\n/**\n * Replace each value in the stream with x\n * @param {*} x\n * @returns {Stream} stream containing items replaced with x\n */\n_Stream2.default.prototype.constant = function (x) {\n  return (0, _transform.constant)(x, this);\n};\n\n/**\n * Perform a side effect for each item in the stream\n * @param {function(x:*):*} f side effect to execute for each item. The\n *  return value will be discarded.\n * @returns {Stream} new stream containing the same items as this stream\n */\n_Stream2.default.prototype.tap = function (f) {\n  return (0, _transform.tap)(f, this);\n};\n\n// -----------------------------------------------------------------------\n// Transducer support\n\nexports.transduce = _transduce.transduce;\n\n/**\n * Transform this stream by passing its events through a transducer.\n * @param  {function} transducer transducer function\n * @return {Stream} stream of events transformed by the transducer\n */\n\n_Stream2.default.prototype.transduce = function (transducer) {\n  return (0, _transduce.transduce)(transducer, this);\n};\n\n// -----------------------------------------------------------------------\n// FlatMapping\n\n// @deprecated flatMap, use chain instead\nexports.flatMap = _flatMap.flatMap;\nexports.chain = _flatMap.flatMap;\nexports.join = _flatMap.join;\n\n/**\n * Map each value in the stream to a new stream, and merge it into the\n * returned outer stream. Event arrival times are preserved.\n * @param {function(x:*):Stream} f chaining function, must return a Stream\n * @returns {Stream} new stream containing all events from each stream returned by f\n */\n\n_Stream2.default.prototype.chain = function (f) {\n  return (0, _flatMap.flatMap)(f, this);\n};\n\n// @deprecated use chain instead\n_Stream2.default.prototype.flatMap = _Stream2.default.prototype.chain;\n\n/**\n* Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner\n* streams to the outer. Event arrival times are preserved.\n* @returns {Stream<X>} new stream containing all events of all inner streams\n*/\n_Stream2.default.prototype.join = function () {\n  return (0, _flatMap.join)(this);\n};\n\n// @deprecated flatMapEnd, use continueWith instead\nexports.continueWith = _continueWith.continueWith;\nexports.flatMapEnd = _continueWith.continueWith;\n\n/**\n * Map the end event to a new stream, and begin emitting its values.\n * @param {function(x:*):Stream} f function that receives the end event value,\n * and *must* return a new Stream to continue with.\n * @returns {Stream} new stream that emits all events from the original stream,\n * followed by all events from the stream returned by f.\n */\n\n_Stream2.default.prototype.continueWith = function (f) {\n  return (0, _continueWith.continueWith)(f, this);\n};\n\n// @deprecated use continueWith instead\n_Stream2.default.prototype.flatMapEnd = _Stream2.default.prototype.continueWith;\n\nexports.concatMap = _concatMap.concatMap;\n\n\n_Stream2.default.prototype.concatMap = function (f) {\n  return (0, _concatMap.concatMap)(f, this);\n};\n\n// -----------------------------------------------------------------------\n// Concurrent merging\n\nexports.mergeConcurrently = _mergeConcurrently.mergeConcurrently;\n\n/**\n * Flatten a Stream<Stream<X>> to Stream<X> by merging inner\n * streams to the outer, limiting the number of inner streams that may\n * be active concurrently.\n * @param {number} concurrency at most this many inner streams will be\n *  allowed to be active concurrently.\n * @return {Stream<X>} new stream containing all events of all inner\n *  streams, with limited concurrency.\n */\n\n_Stream2.default.prototype.mergeConcurrently = function (concurrency) {\n  return (0, _mergeConcurrently.mergeConcurrently)(concurrency, this);\n};\n\n// -----------------------------------------------------------------------\n// Merging\n\nexports.merge = _merge.merge;\nexports.mergeArray = _merge.mergeArray;\n\n/**\n * Merge this stream and all the provided streams\n * @returns {Stream} stream containing items from this stream and s in time\n * order.  If two events are simultaneous they will be merged in\n * arbitrary order.\n */\n\n_Stream2.default.prototype.merge = function () /* ...streams*/{\n  return (0, _merge.mergeArray)(base.cons(this, arguments));\n};\n\n// -----------------------------------------------------------------------\n// Combining\n\nexports.combine = _combine.combine;\nexports.combineArray = _combine.combineArray;\n\n/**\n * Combine latest events from all input streams\n * @param {function(...events):*} f function to combine most recent events\n * @returns {Stream} stream containing the result of applying f to the most recent\n *  event of each input stream, whenever a new event arrives on any stream.\n */\n\n_Stream2.default.prototype.combine = function (f /*, ...streams*/) {\n  return (0, _combine.combineArray)(f, base.replace(this, 0, arguments));\n};\n\n// -----------------------------------------------------------------------\n// Sampling\n\nexports.sample = _sample.sample;\nexports.sampleArray = _sample.sampleArray;\nexports.sampleWith = _sample.sampleWith;\n\n/**\n * When an event arrives on sampler, emit the latest event value from stream.\n * @param {Stream} sampler stream of events at whose arrival time\n *  signal's latest value will be propagated\n * @returns {Stream} sampled stream of values\n */\n\n_Stream2.default.prototype.sampleWith = function (sampler) {\n  return (0, _sample.sampleWith)(sampler, this);\n};\n\n/**\n * When an event arrives on this stream, emit the result of calling f with the latest\n * values of all streams being sampled\n * @param {function(...values):*} f function to apply to each set of sampled values\n * @returns {Stream} stream of sampled and transformed values\n */\n_Stream2.default.prototype.sample = function (f /* ...streams */) {\n  return (0, _sample.sampleArray)(f, this, base.tail(arguments));\n};\n\n// -----------------------------------------------------------------------\n// Zipping\n\nexports.zip = _zip.zip;\nexports.zipArray = _zip.zipArray;\n\n/**\n * Pair-wise combine items with those in s. Given 2 streams:\n * [1,2,3] zipWith f [4,5,6] -> [f(1,4),f(2,5),f(3,6)]\n * Note: zip causes fast streams to buffer and wait for slow streams.\n * @param {function(a:Stream, b:Stream, ...):*} f function to combine items\n * @returns {Stream} new stream containing pairs\n */\n\n_Stream2.default.prototype.zip = function (f /*, ...streams*/) {\n  return (0, _zip.zipArray)(f, base.replace(this, 0, arguments));\n};\n\n// -----------------------------------------------------------------------\n// Switching\n\n// @deprecated switch, use switchLatest instead\nexports.switchLatest = _switch.switchLatest;\nexports.switch = _switch.switchLatest;\n\n/**\n * Given a stream of streams, return a new stream that adopts the behavior\n * of the most recent inner stream.\n * @returns {Stream} switching stream\n */\n\n_Stream2.default.prototype.switchLatest = function () {\n  return (0, _switch.switchLatest)(this);\n};\n\n// @deprecated use switchLatest instead\n_Stream2.default.prototype.switch = _Stream2.default.prototype.switchLatest;\n\n// -----------------------------------------------------------------------\n// Filtering\n\n// @deprecated distinct, use skipRepeats instead\n// @deprecated distinctBy, use skipRepeatsWith instead\nexports.filter = _filter.filter;\nexports.skipRepeats = _filter.skipRepeats;\nexports.distinct = _filter.skipRepeats;\nexports.skipRepeatsWith = _filter.skipRepeatsWith;\nexports.distinctBy = _filter.skipRepeatsWith;\n\n/**\n * Retain only items matching a predicate\n * stream:                           -12345678-\n * filter(x => x % 2 === 0, stream): --2-4-6-8-\n * @param {function(x:*):boolean} p filtering predicate called for each item\n * @returns {Stream} stream containing only items for which predicate returns truthy\n */\n\n_Stream2.default.prototype.filter = function (p) {\n  return (0, _filter.filter)(p, this);\n};\n\n/**\n * Skip repeated events, using === to compare items\n * stream:           -abbcd-\n * distinct(stream): -ab-cd-\n * @returns {Stream} stream with no repeated events\n */\n_Stream2.default.prototype.skipRepeats = function () {\n  return (0, _filter.skipRepeats)(this);\n};\n\n/**\n * Skip repeated events, using supplied equals function to compare items\n * @param {function(a:*, b:*):boolean} equals function to compare items\n * @returns {Stream} stream with no repeated events\n */\n_Stream2.default.prototype.skipRepeatsWith = function (equals) {\n  return (0, _filter.skipRepeatsWith)(equals, this);\n};\n\n// -----------------------------------------------------------------------\n// Slicing\n\nexports.take = _slice.take;\nexports.skip = _slice.skip;\nexports.slice = _slice.slice;\nexports.takeWhile = _slice.takeWhile;\nexports.skipWhile = _slice.skipWhile;\n\n/**\n * stream:          -abcd-\n * take(2, stream): -ab|\n * @param {Number} n take up to this many events\n * @returns {Stream} stream containing at most the first n items from this stream\n */\n\n_Stream2.default.prototype.take = function (n) {\n  return (0, _slice.take)(n, this);\n};\n\n/**\n * stream:          -abcd->\n * skip(2, stream): ---cd->\n * @param {Number} n skip this many events\n * @returns {Stream} stream not containing the first n events\n */\n_Stream2.default.prototype.skip = function (n) {\n  return (0, _slice.skip)(n, this);\n};\n\n/**\n * Slice a stream by event index. Equivalent to, but more efficient than\n * stream.take(end).skip(start);\n * NOTE: Negative start and end are not supported\n * @param {Number} start skip all events before the start index\n * @param {Number} end allow all events from the start index to the end index\n * @returns {Stream} stream containing items where start <= index < end\n */\n_Stream2.default.prototype.slice = function (start, end) {\n  return (0, _slice.slice)(start, end, this);\n};\n\n/**\n * stream:                        -123451234->\n * takeWhile(x => x < 5, stream): -1234|\n * @param {function(x:*):boolean} p predicate\n * @returns {Stream} stream containing items up to, but not including, the\n * first item for which p returns falsy.\n */\n_Stream2.default.prototype.takeWhile = function (p) {\n  return (0, _slice.takeWhile)(p, this);\n};\n\n/**\n * stream:                        -123451234->\n * skipWhile(x => x < 5, stream): -----51234->\n * @param {function(x:*):boolean} p predicate\n * @returns {Stream} stream containing items following *and including* the\n * first item for which p returns falsy.\n */\n_Stream2.default.prototype.skipWhile = function (p) {\n  return (0, _slice.skipWhile)(p, this);\n};\n\n// -----------------------------------------------------------------------\n// Time slicing\n\n// @deprecated takeUntil, use until instead\n// @deprecated skipUntil, use since instead\nexports.takeUntil = _timeslice.takeUntil;\nexports.until = _timeslice.takeUntil;\nexports.skipUntil = _timeslice.skipUntil;\nexports.since = _timeslice.skipUntil;\nexports.during = _timeslice.during;\n\n/**\n * stream:                    -a-b-c-d-e-f-g->\n * signal:                    -------x\n * takeUntil(signal, stream): -a-b-c-|\n * @param {Stream} signal retain only events in stream before the first\n * event in signal\n * @returns {Stream} new stream containing only events that occur before\n * the first event in signal.\n */\n\n_Stream2.default.prototype.until = function (signal) {\n  return (0, _timeslice.takeUntil)(signal, this);\n};\n\n// @deprecated use until instead\n_Stream2.default.prototype.takeUntil = _Stream2.default.prototype.until;\n\n/**\n* stream:                    -a-b-c-d-e-f-g->\n* signal:                    -------x\n* takeUntil(signal, stream): -------d-e-f-g->\n* @param {Stream} signal retain only events in stream at or after the first\n* event in signal\n* @returns {Stream} new stream containing only events that occur after\n* the first event in signal.\n*/\n_Stream2.default.prototype.since = function (signal) {\n  return (0, _timeslice.skipUntil)(signal, this);\n};\n\n// @deprecated use since instead\n_Stream2.default.prototype.skipUntil = _Stream2.default.prototype.since;\n\n/**\n* stream:                    -a-b-c-d-e-f-g->\n* timeWindow:                -----s\n* s:                               -----t\n* stream.during(timeWindow): -----c-d-e-|\n* @param {Stream<Stream>} timeWindow a stream whose first event (s) represents\n*  the window start time.  That event (s) is itself a stream whose first event (t)\n*  represents the window end time\n* @returns {Stream} new stream containing only events within the provided timespan\n*/\n_Stream2.default.prototype.during = function (timeWindow) {\n  return (0, _timeslice.during)(timeWindow, this);\n};\n\n// -----------------------------------------------------------------------\n// Delaying\n\nexports.delay = _delay.delay;\n\n/**\n * @param {Number} delayTime milliseconds to delay each item\n * @returns {Stream} new stream containing the same items, but delayed by ms\n */\n\n_Stream2.default.prototype.delay = function (delayTime) {\n  return (0, _delay.delay)(delayTime, this);\n};\n\n// -----------------------------------------------------------------------\n// Getting event timestamp\n\nexports.timestamp = _timestamp.timestamp;\n\n/**\n * Expose event timestamps into the stream. Turns a Stream<X> into\n * Stream<{time:t, value:X}>\n * @returns {Stream<{time:number, value:*}>}\n */\n\n_Stream2.default.prototype.timestamp = function () {\n  return (0, _timestamp.timestamp)(this);\n};\n\n// -----------------------------------------------------------------------\n// Rate limiting\n\nexports.throttle = _limit.throttle;\nexports.debounce = _limit.debounce;\n\n/**\n * Limit the rate of events\n * stream:              abcd----abcd----\n * throttle(2, stream): a-c-----a-c-----\n * @param {Number} period time to suppress events\n * @returns {Stream} new stream that skips events for throttle period\n */\n\n_Stream2.default.prototype.throttle = function (period) {\n  return (0, _limit.throttle)(period, this);\n};\n\n/**\n * Wait for a burst of events to subside and emit only the last event in the burst\n * stream:              abcd----abcd----\n * debounce(2, stream): -----d-------d--\n * @param {Number} period events occuring more frequently than this\n *  on the provided scheduler will be suppressed\n * @returns {Stream} new debounced stream\n */\n_Stream2.default.prototype.debounce = function (period) {\n  return (0, _limit.debounce)(period, this);\n};\n\n// -----------------------------------------------------------------------\n// Awaiting Promises\n\n// @deprecated await, use awaitPromises instead\nexports.fromPromise = _promises.fromPromise;\nexports.awaitPromises = _promises.awaitPromises;\nexports.await = _promises.awaitPromises;\n\n/**\n * Await promises, turning a Stream<Promise<X>> into Stream<X>.  Preserves\n * event order, but timeshifts events based on promise resolution time.\n * @returns {Stream<X>} stream containing non-promise values\n */\n\n_Stream2.default.prototype.awaitPromises = function () {\n  return (0, _promises.awaitPromises)(this);\n};\n\n// @deprecated use awaitPromises instead\n_Stream2.default.prototype.await = _Stream2.default.prototype.awaitPromises;\n\n// -----------------------------------------------------------------------\n// Error handling\n\n// @deprecated flatMapError, use recoverWith instead\nexports.recoverWith = _errors.recoverWith;\nexports.flatMapError = _errors.flatMapError;\nexports.throwError = _errors.throwError;\n\n/**\n * If this stream encounters an error, recover and continue with items from stream\n * returned by f.\n * stream:                  -a-b-c-X-\n * f(X):                           d-e-f-g-\n * flatMapError(f, stream): -a-b-c-d-e-f-g-\n * @param {function(error:*):Stream} f function which returns a new stream\n * @returns {Stream} new stream which will recover from an error by calling f\n */\n\n_Stream2.default.prototype.recoverWith = function (f) {\n  return (0, _errors.flatMapError)(f, this);\n};\n\n// @deprecated use recoverWith instead\n_Stream2.default.prototype.flatMapError = _Stream2.default.prototype.recoverWith;\n\n// -----------------------------------------------------------------------\n// Multicasting\n\nexports.multicast = _multicast2.default;\n\n/**\n * Transform the stream into multicast stream.  That means that many subscribers\n * to the stream will not cause multiple invocations of the internal machinery.\n * @returns {Stream} new stream which will multicast events to all observers.\n */\n\n_Stream2.default.prototype.multicast = function () {\n  return (0, _multicast2.default)(this);\n};\n\n// export the instance of the defaultScheduler for third-party libraries\nexports.defaultScheduler = _defaultScheduler2.default;\n\n// export an implementation of Task used internally for third-party libraries\n\nexports.PropagateTask = _PropagateTask2.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invoke;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction invoke(f, args) {\n  /*eslint complexity: [2,7]*/\n  switch (args.length) {\n    case 0:\n      return f();\n    case 1:\n      return f(args[0]);\n    case 2:\n      return f(args[0], args[1]);\n    case 3:\n      return f(args[0], args[1], args[2]);\n    case 4:\n      return f(args[0], args[1], args[2], args[3]);\n    case 5:\n      return f(args[0], args[1], args[2], args[3], args[4]);\n    default:\n      return f.apply(void 0, args);\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isIterable = isIterable;\nexports.getIterator = getIterator;\nexports.makeIterable = makeIterable;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global Set, Symbol*/\nvar iteratorSymbol;\n// Firefox ships a partial implementation using the name @@iterator.\n// https://bugzilla.mozilla.org/show_bug.cgi?id=907077#c14\nif (typeof Set === 'function' && typeof new Set()['@@iterator'] === 'function') {\n  iteratorSymbol = '@@iterator';\n} else {\n  iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator || '_es6shim_iterator_';\n}\n\nfunction isIterable(o) {\n  return typeof o[iteratorSymbol] === 'function';\n}\n\nfunction getIterator(o) {\n  return o[iteratorSymbol]();\n}\n\nfunction makeIterable(f, o) {\n  o[iteratorSymbol] = f;\n  return o;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromObservable = fromObservable;\nexports.ObservableSource = ObservableSource;\nexports.SubscriberSink = SubscriberSink;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _tryEvent = require('../source/tryEvent');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction fromObservable(observable) {\n  return new _Stream2.default(new ObservableSource(observable));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction ObservableSource(observable) {\n  this.observable = observable;\n}\n\nObservableSource.prototype.run = function (sink, scheduler) {\n  var sub = this.observable.subscribe(new SubscriberSink(sink, scheduler));\n  if (typeof sub === 'function') {\n    return dispose.create(sub);\n  } else if (sub && typeof sub.unsubscribe === 'function') {\n    return dispose.create(unsubscribe, sub);\n  }\n\n  throw new TypeError('Observable returned invalid subscription ' + String(sub));\n};\n\nfunction SubscriberSink(sink, scheduler) {\n  this.sink = sink;\n  this.scheduler = scheduler;\n}\n\nSubscriberSink.prototype.next = function (x) {\n  (0, _tryEvent.tryEvent)(this.scheduler.now(), x, this.sink);\n};\n\nSubscriberSink.prototype.complete = function (x) {\n  (0, _tryEvent.tryEnd)(this.scheduler.now(), x, this.sink);\n};\n\nSubscriberSink.prototype.error = function (e) {\n  this.sink.error(this.scheduler.now(), e);\n};\n\nfunction unsubscribe(subscription) {\n  return subscription.unsubscribe();\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getObservable;\n\nvar _symbolObservable = require('symbol-observable');\n\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getObservable(o) {\n  // eslint-disable-line complexity\n  var obs = null;\n  if (o) {\n    // Access foreign method only once\n    var method = o[_symbolObservable2.default];\n    if (typeof method === 'function') {\n      obs = method.call(o);\n      if (!(obs && typeof obs.subscribe === 'function')) {\n        throw new TypeError('invalid observable ' + obs);\n      }\n    }\n  }\n\n  return obs;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribe = subscribe;\nexports.SubscribeObserver = SubscribeObserver;\nexports.Subscription = Subscription;\n\nvar _defaultScheduler = require('../scheduler/defaultScheduler');\n\nvar _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _fatalError = require('../fatalError');\n\nvar _fatalError2 = _interopRequireDefault(_fatalError);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction subscribe(subscriber, stream) {\n  if (subscriber == null || typeof subscriber !== 'object') {\n    throw new TypeError('subscriber must be an object');\n  }\n\n  var disposable = dispose.settable();\n  var observer = new SubscribeObserver(_fatalError2.default, subscriber, disposable);\n\n  disposable.setDisposable(stream.source.run(observer, _defaultScheduler2.default));\n\n  return new Subscription(disposable);\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction SubscribeObserver(fatalError, subscriber, disposable) {\n  this.fatalError = fatalError;\n  this.subscriber = subscriber;\n  this.disposable = disposable;\n}\n\nSubscribeObserver.prototype.event = function (t, x) {\n  if (!this.disposable.disposed && typeof this.subscriber.next === 'function') {\n    this.subscriber.next(x);\n  }\n};\n\nSubscribeObserver.prototype.end = function (t, x) {\n  if (!this.disposable.disposed) {\n    var s = this.subscriber;\n    doDispose(this.fatalError, s, s.complete, s.error, this.disposable, x);\n  }\n};\n\nSubscribeObserver.prototype.error = function (t, e) {\n  var s = this.subscriber;\n  doDispose(this.fatalError, s, s.error, s.error, this.disposable, e);\n};\n\nfunction Subscription(disposable) {\n  this.disposable = disposable;\n}\n\nSubscription.prototype.unsubscribe = function () {\n  this.disposable.dispose();\n};\n\nfunction doDispose(fatal, subscriber, complete, error, disposable, x) {\n  Promise.resolve(disposable.dispose()).then(function () {\n    if (typeof complete === 'function') {\n      complete.call(subscriber, x);\n    }\n  }).catch(function (e) {\n    if (typeof error === 'function') {\n      error.call(subscriber, e);\n    }\n  }).catch(fatal);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withDefaultScheduler = withDefaultScheduler;\nexports.withScheduler = withScheduler;\n\nvar _dispose = require('./disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _defaultScheduler = require('./scheduler/defaultScheduler');\n\nvar _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction withDefaultScheduler(source) {\n  return withScheduler(source, _defaultScheduler2.default);\n}\n\nfunction withScheduler(source, scheduler) {\n  return new Promise(function (resolve, reject) {\n    runSource(source, scheduler, resolve, reject);\n  });\n}\n\nfunction runSource(source, scheduler, resolve, reject) {\n  var disposable = dispose.settable();\n  var observer = new Drain(resolve, reject, disposable);\n\n  disposable.setDisposable(source.run(observer, scheduler));\n}\n\nfunction Drain(end, error, disposable) {\n  this._end = end;\n  this._error = error;\n  this._disposable = disposable;\n  this.active = true;\n}\n\nDrain.prototype.event = function (t, x) {};\n\nDrain.prototype.end = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.active = false;\n  disposeThen(this._end, this._error, this._disposable, x);\n};\n\nDrain.prototype.error = function (t, e) {\n  this.active = false;\n  disposeThen(this._error, this._error, this._disposable, e);\n};\n\nfunction disposeThen(end, error, disposable, x) {\n  Promise.resolve(disposable.dispose()).then(function () {\n    end(x);\n  }, error);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockTimer;\n\nvar _task = require('../task');\n\n/*global setTimeout, clearTimeout*/\n\nfunction ClockTimer() {} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nClockTimer.prototype.now = Date.now;\n\nClockTimer.prototype.setTimer = function (f, dt) {\n  return dt <= 0 ? runAsap(f) : setTimeout(f, dt);\n};\n\nClockTimer.prototype.clearTimer = function (t) {\n  return t instanceof Asap ? t.cancel() : clearTimeout(t);\n};\n\nfunction Asap(f) {\n  this.f = f;\n  this.active = true;\n}\n\nAsap.prototype.run = function () {\n  return this.active && this.f();\n};\n\nAsap.prototype.error = function (e) {\n  throw e;\n};\n\nAsap.prototype.cancel = function () {\n  this.active = false;\n};\n\nfunction runAsap(f) {\n  var task = new Asap(f);\n  (0, _task.defer)(task);\n  return task;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PropagateTask;\n\nvar _fatalError = require('../fatalError');\n\nvar _fatalError2 = _interopRequireDefault(_fatalError);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction PropagateTask(run, value, sink) {\n  this._run = run;\n  this.value = value;\n  this.sink = sink;\n  this.active = true;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nPropagateTask.event = function (value, sink) {\n  return new PropagateTask(emit, value, sink);\n};\n\nPropagateTask.end = function (value, sink) {\n  return new PropagateTask(end, value, sink);\n};\n\nPropagateTask.error = function (value, sink) {\n  return new PropagateTask(error, value, sink);\n};\n\nPropagateTask.prototype.dispose = function () {\n  this.active = false;\n};\n\nPropagateTask.prototype.run = function (t) {\n  if (!this.active) {\n    return;\n  }\n  this._run(t, this.value, this.sink);\n};\n\nPropagateTask.prototype.error = function (t, e) {\n  if (!this.active) {\n    return (0, _fatalError2.default)(e);\n  }\n  this.sink.error(t, e);\n};\n\nfunction error(t, e, sink) {\n  sink.error(t, e);\n}\n\nfunction emit(t, x, sink) {\n  sink.event(t, x);\n}\n\nfunction end(t, x, sink) {\n  sink.end(t, x);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ScheduledTask;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction ScheduledTask(delay, period, task, scheduler) {\n  this.time = delay;\n  this.period = period;\n  this.task = task;\n  this.scheduler = scheduler;\n  this.active = true;\n}\n\nScheduledTask.prototype.run = function () {\n  return this.task.run(this.time);\n};\n\nScheduledTask.prototype.error = function (e) {\n  return this.task.error(this.time, e);\n};\n\nScheduledTask.prototype.dispose = function () {\n  this.scheduler.cancel(this);\n  return this.task.dispose();\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Scheduler;\n\nvar _ScheduledTask = require('./ScheduledTask');\n\nvar _ScheduledTask2 = _interopRequireDefault(_ScheduledTask);\n\nvar _task = require('../task');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Scheduler(timer, timeline) {\n  this.timer = timer;\n  this.timeline = timeline;\n\n  this._timer = null;\n  this._nextArrival = Infinity;\n\n  var self = this;\n  this._runReadyTasksBound = function () {\n    self._runReadyTasks(self.now());\n  };\n}\n\nScheduler.prototype.now = function () {\n  return this.timer.now();\n};\n\nScheduler.prototype.asap = function (task) {\n  return this.schedule(0, -1, task);\n};\n\nScheduler.prototype.delay = function (delay, task) {\n  return this.schedule(delay, -1, task);\n};\n\nScheduler.prototype.periodic = function (period, task) {\n  return this.schedule(0, period, task);\n};\n\nScheduler.prototype.schedule = function (delay, period, task) {\n  var now = this.now();\n  var st = new _ScheduledTask2.default(now + Math.max(0, delay), period, task, this);\n\n  this.timeline.add(st);\n  this._scheduleNextRun(now);\n  return st;\n};\n\nScheduler.prototype.cancel = function (task) {\n  task.active = false;\n  if (this.timeline.remove(task)) {\n    this._reschedule();\n  }\n};\n\nScheduler.prototype.cancelAll = function (f) {\n  this.timeline.removeAll(f);\n  this._reschedule();\n};\n\nScheduler.prototype._reschedule = function () {\n  if (this.timeline.isEmpty()) {\n    this._unschedule();\n  } else {\n    this._scheduleNextRun(this.now());\n  }\n};\n\nScheduler.prototype._unschedule = function () {\n  this.timer.clearTimer(this._timer);\n  this._timer = null;\n};\n\nScheduler.prototype._scheduleNextRun = function (now) {\n  // eslint-disable-line complexity\n  if (this.timeline.isEmpty()) {\n    return;\n  }\n\n  var nextArrival = this.timeline.nextArrival();\n\n  if (this._timer === null) {\n    this._scheduleNextArrival(nextArrival, now);\n  } else if (nextArrival < this._nextArrival) {\n    this._unschedule();\n    this._scheduleNextArrival(nextArrival, now);\n  }\n};\n\nScheduler.prototype._scheduleNextArrival = function (nextArrival, now) {\n  this._nextArrival = nextArrival;\n  var delay = Math.max(0, nextArrival - now);\n  this._timer = this.timer.setTimer(this._runReadyTasksBound, delay);\n};\n\nScheduler.prototype._runReadyTasks = function (now) {\n  this._timer = null;\n  this.timeline.runTasks(now, _task.runTask);\n  this._scheduleNextRun(this.now());\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Timeline;\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction Timeline() {\n  this.tasks = [];\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nTimeline.prototype.nextArrival = function () {\n  return this.isEmpty() ? Infinity : this.tasks[0].time;\n};\n\nTimeline.prototype.isEmpty = function () {\n  return this.tasks.length === 0;\n};\n\nTimeline.prototype.add = function (st) {\n  insertByTime(st, this.tasks);\n};\n\nTimeline.prototype.remove = function (st) {\n  var i = binarySearch(st.time, this.tasks);\n\n  if (i >= 0 && i < this.tasks.length) {\n    var at = base.findIndex(st, this.tasks[i].events);\n    if (at >= 0) {\n      this.tasks[i].events.splice(at, 1);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nTimeline.prototype.removeAll = function (f) {\n  var this$1 = this;\n\n  for (var i = 0, l = this.tasks.length; i < l; ++i) {\n    removeAllFrom(f, this$1.tasks[i]);\n  }\n};\n\nTimeline.prototype.runTasks = function (t, runTask) {\n  var this$1 = this;\n\n  var tasks = this.tasks;\n  var l = tasks.length;\n  var i = 0;\n\n  while (i < l && tasks[i].time <= t) {\n    ++i;\n  }\n\n  this.tasks = tasks.slice(i);\n\n  // Run all ready tasks\n  for (var j = 0; j < i; ++j) {\n    this$1.tasks = runTasks(runTask, tasks[j], this$1.tasks);\n  }\n};\n\nfunction runTasks(runTask, timeslot, tasks) {\n  // eslint-disable-line complexity\n  var events = timeslot.events;\n  for (var i = 0; i < events.length; ++i) {\n    var task = events[i];\n\n    if (task.active) {\n      runTask(task);\n\n      // Reschedule periodic repeating tasks\n      // Check active again, since a task may have canceled itself\n      if (task.period >= 0 && task.active) {\n        task.time = task.time + task.period;\n        insertByTime(task, tasks);\n      }\n    }\n  }\n\n  return tasks;\n}\n\nfunction insertByTime(task, timeslots) {\n  // eslint-disable-line complexity\n  var l = timeslots.length;\n\n  if (l === 0) {\n    timeslots.push(newTimeslot(task.time, [task]));\n    return;\n  }\n\n  var i = binarySearch(task.time, timeslots);\n\n  if (i >= l) {\n    timeslots.push(newTimeslot(task.time, [task]));\n  } else if (task.time === timeslots[i].time) {\n    timeslots[i].events.push(task);\n  } else {\n    timeslots.splice(i, 0, newTimeslot(task.time, [task]));\n  }\n}\n\nfunction removeAllFrom(f, timeslot) {\n  timeslot.events = base.removeAll(f, timeslot.events);\n}\n\nfunction binarySearch(t, sortedArray) {\n  // eslint-disable-line complexity\n  var lo = 0;\n  var hi = sortedArray.length;\n  var mid, y;\n\n  while (lo < hi) {\n    mid = Math.floor((lo + hi) / 2);\n    y = sortedArray[mid];\n\n    if (t === y.time) {\n      return mid;\n    } else if (t < y.time) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return hi;\n}\n\nfunction newTimeslot(t, events) {\n  return { time: t, events: events };\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Scheduler = require('./Scheduler');\n\nvar _Scheduler2 = _interopRequireDefault(_Scheduler);\n\nvar _ClockTimer = require('./ClockTimer');\n\nvar _ClockTimer2 = _interopRequireDefault(_ClockTimer);\n\nvar _Timeline = require('./Timeline');\n\nvar _Timeline2 = _interopRequireDefault(_Timeline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultScheduler = new _Scheduler2.default(new _ClockTimer2.default(), new _Timeline2.default()); /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nexports.default = defaultScheduler;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DeferredSink;\n\nvar _task = require('../task');\n\nfunction DeferredSink(sink) {\n  this.sink = sink;\n  this.events = [];\n  this.active = true;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nDeferredSink.prototype.event = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n\n  if (this.events.length === 0) {\n    (0, _task.defer)(new PropagateAllTask(this.sink, t, this.events));\n  }\n\n  this.events.push({ time: t, value: x });\n};\n\nDeferredSink.prototype.end = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n\n  this._end(new EndTask(t, x, this.sink));\n};\n\nDeferredSink.prototype.error = function (t, e) {\n  this._end(new ErrorTask(t, e, this.sink));\n};\n\nDeferredSink.prototype._end = function (task) {\n  this.active = false;\n  (0, _task.defer)(task);\n};\n\nfunction PropagateAllTask(sink, time, events) {\n  this.sink = sink;\n  this.events = events;\n  this.time = time;\n}\n\nPropagateAllTask.prototype.run = function () {\n  var this$1 = this;\n\n  var events = this.events;\n  var sink = this.sink;\n  var event;\n\n  for (var i = 0, l = events.length; i < l; ++i) {\n    event = events[i];\n    this$1.time = event.time;\n    sink.event(event.time, event.value);\n  }\n\n  events.length = 0;\n};\n\nPropagateAllTask.prototype.error = function (e) {\n  this.sink.error(this.time, e);\n};\n\nfunction EndTask(t, x, sink) {\n  this.time = t;\n  this.value = x;\n  this.sink = sink;\n}\n\nEndTask.prototype.run = function () {\n  this.sink.end(this.time, this.value);\n};\n\nEndTask.prototype.error = function (e) {\n  this.sink.error(this.time, e);\n};\n\nfunction ErrorTask(t, e, sink) {\n  this.time = t;\n  this.value = e;\n  this.sink = sink;\n}\n\nErrorTask.prototype.run = function () {\n  this.sink.error(this.time, this.value);\n};\n\nErrorTask.prototype.error = function (e) {\n  throw e;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = IndexSink;\n\nvar _Pipe = require('./Pipe');\n\nvar _Pipe2 = _interopRequireDefault(_Pipe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction IndexSink(i, sink) {\n  this.sink = sink;\n  this.index = i;\n  this.active = true;\n  this.value = void 0;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nIndexSink.prototype.event = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.value = x;\n  this.sink.event(t, this);\n};\n\nIndexSink.prototype.end = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.active = false;\n  this.sink.end(t, { index: this.index, value: x });\n};\n\nIndexSink.prototype.error = _Pipe2.default.prototype.error;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Pipe;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/**\n * A sink mixin that simply forwards event, end, and error to\n * another sink.\n * @param sink\n * @constructor\n */\nfunction Pipe(sink) {\n  this.sink = sink;\n}\n\nPipe.prototype.event = function (t, x) {\n  return this.sink.event(t, x);\n};\n\nPipe.prototype.end = function (t, x) {\n  return this.sink.end(t, x);\n};\n\nPipe.prototype.error = function (t, e) {\n  return this.sink.error(t, e);\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SafeSink;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction SafeSink(sink) {\n  this.sink = sink;\n  this.active = true;\n}\n\nSafeSink.prototype.event = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.sink.event(t, x);\n};\n\nSafeSink.prototype.end = function (t, x) {\n  if (!this.active) {\n    return;\n  }\n  this.disable();\n  this.sink.end(t, x);\n};\n\nSafeSink.prototype.error = function (t, e) {\n  this.disable();\n  this.sink.error(t, e);\n};\n\nSafeSink.prototype.disable = function () {\n  this.active = false;\n  return this.sink;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EventEmitterSource;\n\nvar _DeferredSink = require('../sink/DeferredSink');\n\nvar _DeferredSink2 = _interopRequireDefault(_DeferredSink);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _tryEvent = require('./tryEvent');\n\nvar tryEvent = _interopRequireWildcard(_tryEvent);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EventEmitterSource(event, source) {\n  this.event = event;\n  this.source = source;\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nEventEmitterSource.prototype.run = function (sink, scheduler) {\n  // NOTE: Because EventEmitter allows events in the same call stack as\n  // a listener is added, use a DeferredSink to buffer events\n  // until the stack clears, then propagate.  This maintains most.js's\n  // invariant that no event will be delivered in the same call stack\n  // as an observer begins observing.\n  var dsink = new _DeferredSink2.default(sink);\n\n  function addEventVariadic(a) {\n    var arguments$1 = arguments;\n\n    var l = arguments.length;\n    if (l > 1) {\n      var arr = new Array(l);\n      for (var i = 0; i < l; ++i) {\n        arr[i] = arguments$1[i];\n      }\n      tryEvent.tryEvent(scheduler.now(), arr, dsink);\n    } else {\n      tryEvent.tryEvent(scheduler.now(), a, dsink);\n    }\n  }\n\n  this.source.addListener(this.event, addEventVariadic);\n\n  return dispose.create(disposeEventEmitter, { target: this, addEvent: addEventVariadic });\n};\n\nfunction disposeEventEmitter(info) {\n  var target = info.target;\n  target.source.removeListener(target.event, info.addEvent);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = EventTargetSource;\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _tryEvent = require('./tryEvent');\n\nvar tryEvent = _interopRequireWildcard(_tryEvent);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction EventTargetSource(event, source, capture) {\n  this.event = event;\n  this.source = source;\n  this.capture = capture;\n}\n\nEventTargetSource.prototype.run = function (sink, scheduler) {\n  function addEvent(e) {\n    tryEvent.tryEvent(scheduler.now(), e, sink);\n  }\n\n  this.source.addEventListener(this.event, addEvent, this.capture);\n\n  return dispose.create(disposeEventTarget, { target: this, addEvent: addEvent });\n};\n\nfunction disposeEventTarget(info) {\n  var target = info.target;\n  target.source.removeEventListener(target.event, info.addEvent, target.capture);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.of = of;\nexports.empty = empty;\nexports.never = never;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _dispose = require('../disposable/dispose');\n\nvar dispose = _interopRequireWildcard(_dispose);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Stream containing only x\n * @param {*} x\n * @returns {Stream}\n */\nfunction of(x) {\n  return new _Stream2.default(new Just(x));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction Just(x) {\n  this.value = x;\n}\n\nJust.prototype.run = function (sink, scheduler) {\n  return scheduler.asap(new _PropagateTask2.default(runJust, this.value, sink));\n};\n\nfunction runJust(t, x, sink) {\n  sink.event(t, x);\n  sink.end(t, void 0);\n}\n\n/**\n * Stream containing no events and ends immediately\n * @returns {Stream}\n */\nfunction empty() {\n  return EMPTY;\n}\n\nfunction EmptySource() {}\n\nEmptySource.prototype.run = function (sink, scheduler) {\n  var task = _PropagateTask2.default.end(void 0, sink);\n  scheduler.asap(task);\n\n  return dispose.create(disposeEmpty, task);\n};\n\nfunction disposeEmpty(task) {\n  return task.dispose();\n}\n\nvar EMPTY = new _Stream2.default(new EmptySource());\n\n/**\n * Stream containing no events and never ends\n * @returns {Stream}\n */\nfunction never() {\n  return NEVER;\n}\n\nfunction NeverSource() {}\n\nNeverSource.prototype.run = function () {\n  return dispose.empty();\n};\n\nvar NEVER = new _Stream2.default(new NeverSource());","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.from = from;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _fromArray = require('./fromArray');\n\nvar _iterable = require('../iterable');\n\nvar _fromIterable = require('./fromIterable');\n\nvar _getObservable = require('../observable/getObservable');\n\nvar _getObservable2 = _interopRequireDefault(_getObservable);\n\nvar _fromObservable = require('../observable/fromObservable');\n\nvar _prelude = require('@most/prelude');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction from(a) {\n  // eslint-disable-line complexity\n  if (a instanceof _Stream2.default) {\n    return a;\n  }\n\n  var observable = (0, _getObservable2.default)(a);\n  if (observable != null) {\n    return (0, _fromObservable.fromObservable)(observable);\n  }\n\n  if (Array.isArray(a) || (0, _prelude.isArrayLike)(a)) {\n    return (0, _fromArray.fromArray)(a);\n  }\n\n  if ((0, _iterable.isIterable)(a)) {\n    return (0, _fromIterable.fromIterable)(a);\n  }\n\n  throw new TypeError('from(x) must be observable, iterable, or array-like: ' + a);\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromArray = fromArray;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction fromArray(a) {\n  return new _Stream2.default(new ArraySource(a));\n}\n\nfunction ArraySource(a) {\n  this.array = a;\n}\n\nArraySource.prototype.run = function (sink, scheduler) {\n  return scheduler.asap(new _PropagateTask2.default(runProducer, this.array, sink));\n};\n\nfunction runProducer(t, array, sink) {\n  for (var i = 0, l = array.length; i < l && this.active; ++i) {\n    sink.event(t, array[i]);\n  }\n\n  this.active && end(t);\n\n  function end(t) {\n    sink.end(t);\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromEvent = fromEvent;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _EventTargetSource = require('./EventTargetSource');\n\nvar _EventTargetSource2 = _interopRequireDefault(_EventTargetSource);\n\nvar _EventEmitterSource = require('./EventEmitterSource');\n\nvar _EventEmitterSource2 = _interopRequireDefault(_EventEmitterSource);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a stream from an EventTarget, such as a DOM Node, or EventEmitter.\n * @param {String} event event type name, e.g. 'click'\n * @param {EventTarget|EventEmitter} source EventTarget or EventEmitter\n * @param {*?} capture for DOM events, whether to use\n *  capturing--passed as 3rd parameter to addEventListener.\n * @returns {Stream} stream containing all events of the specified type\n * from the source.\n */\nfunction fromEvent(event, source, capture) {\n  // eslint-disable-line complexity\n  var s;\n\n  if (typeof source.addEventListener === 'function' && typeof source.removeEventListener === 'function') {\n    if (arguments.length < 3) {\n      capture = false;\n    }\n\n    s = new _EventTargetSource2.default(event, source, capture);\n  } else if (typeof source.addListener === 'function' && typeof source.removeListener === 'function') {\n    s = new _EventEmitterSource2.default(event, source);\n  } else {\n    throw new Error('source must support addEventListener/removeEventListener or addListener/removeListener');\n  }\n\n  return new _Stream2.default(s);\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromIterable = fromIterable;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _iterable = require('../iterable');\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction fromIterable(iterable) {\n  return new _Stream2.default(new IterableSource(iterable));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction IterableSource(iterable) {\n  this.iterable = iterable;\n}\n\nIterableSource.prototype.run = function (sink, scheduler) {\n  return scheduler.asap(new _PropagateTask2.default(runProducer, (0, _iterable.getIterator)(this.iterable), sink));\n};\n\nfunction runProducer(t, iterator, sink) {\n  var r = iterator.next();\n\n  while (!r.done && this.active) {\n    sink.event(t, r.value);\n    r = iterator.next();\n  }\n\n  sink.end(t, r.value);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generate = generate;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _prelude = require('@most/prelude');\n\nvar base = _interopRequireWildcard(_prelude);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Compute a stream using an *async* generator, which yields promises\n * to control event times.\n * @param f\n * @returns {Stream}\n */\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction generate(f /*, ...args */) {\n  return new _Stream2.default(new GenerateSource(f, base.tail(arguments)));\n}\n\nfunction GenerateSource(f, args) {\n  this.f = f;\n  this.args = args;\n}\n\nGenerateSource.prototype.run = function (sink, scheduler) {\n  return new Generate(this.f.apply(void 0, this.args), sink, scheduler);\n};\n\nfunction Generate(iterator, sink, scheduler) {\n  this.iterator = iterator;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.active = true;\n\n  var self = this;\n  function err(e) {\n    self.sink.error(self.scheduler.now(), e);\n  }\n\n  Promise.resolve(this).then(next).catch(err);\n}\n\nfunction next(generate, x) {\n  return generate.active ? handle(generate, generate.iterator.next(x)) : x;\n}\n\nfunction handle(generate, result) {\n  if (result.done) {\n    return generate.sink.end(generate.scheduler.now(), result.value);\n  }\n\n  return Promise.resolve(result.value).then(function (x) {\n    return emit(generate, x);\n  }, function (e) {\n    return error(generate, e);\n  });\n}\n\nfunction emit(generate, x) {\n  generate.sink.event(generate.scheduler.now(), x);\n  return next(generate, x);\n}\n\nfunction error(generate, e) {\n  return handle(generate, generate.iterator.throw(e));\n}\n\nGenerate.prototype.dispose = function () {\n  this.active = false;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iterate = iterate;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Compute a stream by iteratively calling f to produce values\n * Event times may be controlled by returning a Promise from f\n * @param {function(x:*):*|Promise<*>} f\n * @param {*} x initial value\n * @returns {Stream}\n */\nfunction iterate(f, x) {\n  return new _Stream2.default(new IterateSource(f, x));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction IterateSource(f, x) {\n  this.f = f;\n  this.value = x;\n}\n\nIterateSource.prototype.run = function (sink, scheduler) {\n  return new Iterate(this.f, this.value, sink, scheduler);\n};\n\nfunction Iterate(f, initial, sink, scheduler) {\n  this.f = f;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.active = true;\n\n  var x = initial;\n\n  var self = this;\n  function err(e) {\n    self.sink.error(self.scheduler.now(), e);\n  }\n\n  function start(iterate) {\n    return stepIterate(iterate, x);\n  }\n\n  Promise.resolve(this).then(start).catch(err);\n}\n\nIterate.prototype.dispose = function () {\n  this.active = false;\n};\n\nfunction stepIterate(iterate, x) {\n  iterate.sink.event(iterate.scheduler.now(), x);\n\n  if (!iterate.active) {\n    return x;\n  }\n\n  var f = iterate.f;\n  return Promise.resolve(f(x)).then(function (y) {\n    return continueIterate(iterate, y);\n  });\n}\n\nfunction continueIterate(iterate, x) {\n  return !iterate.active ? iterate.value : stepIterate(iterate, x);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.periodic = periodic;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nvar _PropagateTask = require('../scheduler/PropagateTask');\n\nvar _PropagateTask2 = _interopRequireDefault(_PropagateTask);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a stream that emits the current time periodically\n * @param {Number} period periodicity of events in millis\n * @param {*} deprecatedValue @deprecated value to emit each period\n * @returns {Stream} new stream that emits the current time every period\n */\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction periodic(period, deprecatedValue) {\n  return new _Stream2.default(new Periodic(period, deprecatedValue));\n}\n\nfunction Periodic(period, value) {\n  this.period = period;\n  this.value = value;\n}\n\nPeriodic.prototype.run = function (sink, scheduler) {\n  return scheduler.periodic(this.period, _PropagateTask2.default.event(this.value, sink));\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryEvent = tryEvent;\nexports.tryEnd = tryEnd;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction tryEvent(t, x, sink) {\n  try {\n    sink.event(t, x);\n  } catch (e) {\n    sink.error(t, e);\n  }\n}\n\nfunction tryEnd(t, x, sink) {\n  try {\n    sink.end(t, x);\n  } catch (e) {\n    sink.error(t, e);\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unfold = unfold;\n\nvar _Stream = require('../Stream');\n\nvar _Stream2 = _interopRequireDefault(_Stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Compute a stream by unfolding tuples of future values from a seed value\n * Event times may be controlled by returning a Promise from f\n * @param {function(seed:*):{value:*, seed:*, done:boolean}|Promise<{value:*, seed:*, done:boolean}>} f unfolding function accepts\n *  a seed and returns a new tuple with a value, new seed, and boolean done flag.\n *  If tuple.done is true, the stream will end.\n * @param {*} seed seed value\n * @returns {Stream} stream containing all value of all tuples produced by the\n *  unfolding function.\n */\nfunction unfold(f, seed) {\n  return new _Stream2.default(new UnfoldSource(f, seed));\n} /** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction UnfoldSource(f, seed) {\n  this.f = f;\n  this.value = seed;\n}\n\nUnfoldSource.prototype.run = function (sink, scheduler) {\n  return new Unfold(this.f, this.value, sink, scheduler);\n};\n\nfunction Unfold(f, x, sink, scheduler) {\n  this.f = f;\n  this.sink = sink;\n  this.scheduler = scheduler;\n  this.active = true;\n\n  var self = this;\n  function err(e) {\n    self.sink.error(self.scheduler.now(), e);\n  }\n\n  function start(unfold) {\n    return stepUnfold(unfold, x);\n  }\n\n  Promise.resolve(this).then(start).catch(err);\n}\n\nUnfold.prototype.dispose = function () {\n  this.active = false;\n};\n\nfunction stepUnfold(unfold, x) {\n  var f = unfold.f;\n  return Promise.resolve(f(x)).then(function (tuple) {\n    return continueUnfold(unfold, tuple);\n  });\n}\n\nfunction continueUnfold(unfold, tuple) {\n  if (tuple.done) {\n    unfold.sink.end(unfold.scheduler.now(), tuple.value);\n    return tuple.value;\n  }\n\n  unfold.sink.event(unfold.scheduler.now(), tuple.value);\n\n  if (!unfold.active) {\n    return tuple.value;\n  }\n  return stepUnfold(unfold, tuple.seed);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defer = defer;\nexports.runTask = runTask;\n/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nfunction defer(task) {\n  return Promise.resolve(task).then(runTask);\n}\n\nfunction runTask(task) {\n  try {\n    return task.run();\n  } catch (e) {\n    return task.error(e);\n  }\n}","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n","const EventEmitter = require('events');\n\nglobal.bus = global.bus || new EventEmitter();\n\nmodule.exports = {\n  bus: global.bus,\n  makeEmitter: function() {\n    return new EventEmitter();\n  }\n};\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","module.exports = {\n  F: require('./src/F'),\n  T: require('./src/T'),\n  __: require('./src/__'),\n  add: require('./src/add'),\n  addIndex: require('./src/addIndex'),\n  adjust: require('./src/adjust'),\n  all: require('./src/all'),\n  allPass: require('./src/allPass'),\n  always: require('./src/always'),\n  and: require('./src/and'),\n  any: require('./src/any'),\n  anyPass: require('./src/anyPass'),\n  ap: require('./src/ap'),\n  aperture: require('./src/aperture'),\n  append: require('./src/append'),\n  apply: require('./src/apply'),\n  applySpec: require('./src/applySpec'),\n  ascend: require('./src/ascend'),\n  assoc: require('./src/assoc'),\n  assocPath: require('./src/assocPath'),\n  binary: require('./src/binary'),\n  bind: require('./src/bind'),\n  both: require('./src/both'),\n  call: require('./src/call'),\n  chain: require('./src/chain'),\n  clamp: require('./src/clamp'),\n  clone: require('./src/clone'),\n  comparator: require('./src/comparator'),\n  complement: require('./src/complement'),\n  compose: require('./src/compose'),\n  composeK: require('./src/composeK'),\n  composeP: require('./src/composeP'),\n  concat: require('./src/concat'),\n  cond: require('./src/cond'),\n  construct: require('./src/construct'),\n  constructN: require('./src/constructN'),\n  contains: require('./src/contains'),\n  converge: require('./src/converge'),\n  countBy: require('./src/countBy'),\n  curry: require('./src/curry'),\n  curryN: require('./src/curryN'),\n  dec: require('./src/dec'),\n  descend: require('./src/descend'),\n  defaultTo: require('./src/defaultTo'),\n  difference: require('./src/difference'),\n  differenceWith: require('./src/differenceWith'),\n  dissoc: require('./src/dissoc'),\n  dissocPath: require('./src/dissocPath'),\n  divide: require('./src/divide'),\n  drop: require('./src/drop'),\n  dropLast: require('./src/dropLast'),\n  dropLastWhile: require('./src/dropLastWhile'),\n  dropRepeats: require('./src/dropRepeats'),\n  dropRepeatsWith: require('./src/dropRepeatsWith'),\n  dropWhile: require('./src/dropWhile'),\n  either: require('./src/either'),\n  empty: require('./src/empty'),\n  eqBy: require('./src/eqBy'),\n  eqProps: require('./src/eqProps'),\n  equals: require('./src/equals'),\n  evolve: require('./src/evolve'),\n  filter: require('./src/filter'),\n  find: require('./src/find'),\n  findIndex: require('./src/findIndex'),\n  findLast: require('./src/findLast'),\n  findLastIndex: require('./src/findLastIndex'),\n  flatten: require('./src/flatten'),\n  flip: require('./src/flip'),\n  forEach: require('./src/forEach'),\n  forEachObjIndexed: require('./src/forEachObjIndexed'),\n  fromPairs: require('./src/fromPairs'),\n  groupBy: require('./src/groupBy'),\n  groupWith: require('./src/groupWith'),\n  gt: require('./src/gt'),\n  gte: require('./src/gte'),\n  has: require('./src/has'),\n  hasIn: require('./src/hasIn'),\n  head: require('./src/head'),\n  identical: require('./src/identical'),\n  identity: require('./src/identity'),\n  ifElse: require('./src/ifElse'),\n  inc: require('./src/inc'),\n  indexBy: require('./src/indexBy'),\n  indexOf: require('./src/indexOf'),\n  init: require('./src/init'),\n  insert: require('./src/insert'),\n  insertAll: require('./src/insertAll'),\n  intersection: require('./src/intersection'),\n  intersectionWith: require('./src/intersectionWith'),\n  intersperse: require('./src/intersperse'),\n  into: require('./src/into'),\n  invert: require('./src/invert'),\n  invertObj: require('./src/invertObj'),\n  invoker: require('./src/invoker'),\n  is: require('./src/is'),\n  isArrayLike: require('./src/isArrayLike'),\n  isEmpty: require('./src/isEmpty'),\n  isNil: require('./src/isNil'),\n  join: require('./src/join'),\n  juxt: require('./src/juxt'),\n  keys: require('./src/keys'),\n  keysIn: require('./src/keysIn'),\n  last: require('./src/last'),\n  lastIndexOf: require('./src/lastIndexOf'),\n  length: require('./src/length'),\n  lens: require('./src/lens'),\n  lensIndex: require('./src/lensIndex'),\n  lensPath: require('./src/lensPath'),\n  lensProp: require('./src/lensProp'),\n  lift: require('./src/lift'),\n  liftN: require('./src/liftN'),\n  lt: require('./src/lt'),\n  lte: require('./src/lte'),\n  map: require('./src/map'),\n  mapAccum: require('./src/mapAccum'),\n  mapAccumRight: require('./src/mapAccumRight'),\n  mapObjIndexed: require('./src/mapObjIndexed'),\n  match: require('./src/match'),\n  mathMod: require('./src/mathMod'),\n  max: require('./src/max'),\n  maxBy: require('./src/maxBy'),\n  mean: require('./src/mean'),\n  median: require('./src/median'),\n  memoize: require('./src/memoize'),\n  merge: require('./src/merge'),\n  mergeAll: require('./src/mergeAll'),\n  mergeWith: require('./src/mergeWith'),\n  mergeWithKey: require('./src/mergeWithKey'),\n  min: require('./src/min'),\n  minBy: require('./src/minBy'),\n  modulo: require('./src/modulo'),\n  multiply: require('./src/multiply'),\n  nAry: require('./src/nAry'),\n  negate: require('./src/negate'),\n  none: require('./src/none'),\n  not: require('./src/not'),\n  nth: require('./src/nth'),\n  nthArg: require('./src/nthArg'),\n  objOf: require('./src/objOf'),\n  of: require('./src/of'),\n  omit: require('./src/omit'),\n  once: require('./src/once'),\n  or: require('./src/or'),\n  over: require('./src/over'),\n  pair: require('./src/pair'),\n  partial: require('./src/partial'),\n  partialRight: require('./src/partialRight'),\n  partition: require('./src/partition'),\n  path: require('./src/path'),\n  pathEq: require('./src/pathEq'),\n  pathOr: require('./src/pathOr'),\n  pathSatisfies: require('./src/pathSatisfies'),\n  pick: require('./src/pick'),\n  pickAll: require('./src/pickAll'),\n  pickBy: require('./src/pickBy'),\n  pipe: require('./src/pipe'),\n  pipeK: require('./src/pipeK'),\n  pipeP: require('./src/pipeP'),\n  pluck: require('./src/pluck'),\n  prepend: require('./src/prepend'),\n  product: require('./src/product'),\n  project: require('./src/project'),\n  prop: require('./src/prop'),\n  propEq: require('./src/propEq'),\n  propIs: require('./src/propIs'),\n  propOr: require('./src/propOr'),\n  propSatisfies: require('./src/propSatisfies'),\n  props: require('./src/props'),\n  range: require('./src/range'),\n  reduce: require('./src/reduce'),\n  reduceBy: require('./src/reduceBy'),\n  reduceRight: require('./src/reduceRight'),\n  reduceWhile: require('./src/reduceWhile'),\n  reduced: require('./src/reduced'),\n  reject: require('./src/reject'),\n  remove: require('./src/remove'),\n  repeat: require('./src/repeat'),\n  replace: require('./src/replace'),\n  reverse: require('./src/reverse'),\n  scan: require('./src/scan'),\n  sequence: require('./src/sequence'),\n  set: require('./src/set'),\n  slice: require('./src/slice'),\n  sort: require('./src/sort'),\n  sortBy: require('./src/sortBy'),\n  sortWith: require('./src/sortWith'),\n  split: require('./src/split'),\n  splitAt: require('./src/splitAt'),\n  splitEvery: require('./src/splitEvery'),\n  splitWhen: require('./src/splitWhen'),\n  subtract: require('./src/subtract'),\n  sum: require('./src/sum'),\n  symmetricDifference: require('./src/symmetricDifference'),\n  symmetricDifferenceWith: require('./src/symmetricDifferenceWith'),\n  tail: require('./src/tail'),\n  take: require('./src/take'),\n  takeLast: require('./src/takeLast'),\n  takeLastWhile: require('./src/takeLastWhile'),\n  takeWhile: require('./src/takeWhile'),\n  tap: require('./src/tap'),\n  test: require('./src/test'),\n  times: require('./src/times'),\n  toLower: require('./src/toLower'),\n  toPairs: require('./src/toPairs'),\n  toPairsIn: require('./src/toPairsIn'),\n  toString: require('./src/toString'),\n  toUpper: require('./src/toUpper'),\n  transduce: require('./src/transduce'),\n  transpose: require('./src/transpose'),\n  traverse: require('./src/traverse'),\n  trim: require('./src/trim'),\n  tryCatch: require('./src/tryCatch'),\n  type: require('./src/type'),\n  unapply: require('./src/unapply'),\n  unary: require('./src/unary'),\n  uncurryN: require('./src/uncurryN'),\n  unfold: require('./src/unfold'),\n  union: require('./src/union'),\n  unionWith: require('./src/unionWith'),\n  uniq: require('./src/uniq'),\n  uniqBy: require('./src/uniqBy'),\n  uniqWith: require('./src/uniqWith'),\n  unless: require('./src/unless'),\n  unnest: require('./src/unnest'),\n  until: require('./src/until'),\n  update: require('./src/update'),\n  useWith: require('./src/useWith'),\n  values: require('./src/values'),\n  valuesIn: require('./src/valuesIn'),\n  view: require('./src/view'),\n  when: require('./src/when'),\n  where: require('./src/where'),\n  whereEq: require('./src/whereEq'),\n  without: require('./src/without'),\n  xprod: require('./src/xprod'),\n  zip: require('./src/zip'),\n  zipObj: require('./src/zipObj'),\n  zipWith: require('./src/zipWith')\n};\n","var always = require('./always');\n\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.T\n * @example\n *\n *      R.F(); //=> false\n */\nmodule.exports = always(false);\n","var always = require('./always');\n\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.F\n * @example\n *\n *      R.T(); //=> true\n */\nmodule.exports = always(true);\n","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nmodule.exports = {'@@functional/placeholder': true};\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nmodule.exports = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n","var _concat = require('./internal/_concat');\nvar _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, Ramda's simple `map` function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      var mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nmodule.exports = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\n","var _concat = require('./internal/_concat');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nmodule.exports = _curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xall = require('./internal/_xall');\n\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      var equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nmodule.exports = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      var isQueen = R.propEq('rank', 'Q');\n *      var isSpade = R.propEq('suit', '♠︎');\n *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nmodule.exports = _curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nmodule.exports = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nmodule.exports = _curry2(function and(a, b) {\n  return a && b;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xany = require('./internal/_xany');\n\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nmodule.exports = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      var isClub = R.propEq('suit', '♣');\n *      var isSpade = R.propEq('suit', '♠');\n *      var isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nmodule.exports = _curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar map = require('./map');\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return (\n    typeof applicative.ap === 'function' ?\n      applicative.ap(fn) :\n    typeof applicative === 'function' ?\n      function(x) { return applicative(x)(fn(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)\n  );\n});\n","var _aperture = require('./internal/_aperture');\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xaperture = require('./internal/_xaperture');\n\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nmodule.exports = _curry2(_dispatchable([], _xaperture, _aperture));\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nmodule.exports = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nmodule.exports = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n","var _curry1 = require('./internal/_curry1');\nvar apply = require('./apply');\nvar curryN = require('./curryN');\nvar map = require('./map');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\nvar values = require('./values');\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\n","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\nvar _isArray = require('./internal/_isArray');\nvar _isInteger = require('./internal/_isInteger');\nvar assoc = require('./assoc');\n\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nmodule.exports = _curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n","var _curry1 = require('./internal/_curry1');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nmodule.exports = _curry1(function binary(fn) {\n  return nAry(2, fn);\n});\n","var _arity = require('./internal/_arity');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar and = require('./and');\nvar lift = require('./lift');\n\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nmodule.exports = _curry2(function both(f, g) {\n  return _isFunction(f) ?\n    function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } :\n    lift(and)(f, g);\n});\n","var curry = require('./curry');\n\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * `R.converge`: the left branch can produce a function while the right branch\n * produces a value to be passed to that function as an argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      var indentN = R.pipe(R.times(R.always(' ')),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      var format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nmodule.exports = curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _makeFlat = require('./internal/_makeFlat');\nvar _xchain = require('./internal/_xchain');\nvar map = require('./map');\n\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nmodule.exports = _curry2(_dispatchable(['chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\n","var _curry3 = require('./internal/_curry3');\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nmodule.exports = _curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min :\n         value > max ? max :\n         value;\n});\n","var _clone = require('./internal/_clone');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n * assigned by reference rather than copied\n *\n * Dispatches to a `clone` method if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nmodule.exports = _curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ?\n    value.clone() :\n    _clone(value, [], [], true);\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a, b -> Boolean) -> (a, b -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = R.comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = R.sort(byAge, people);\n */\nmodule.exports = _curry1(function comparator(pred) {\n  return function(a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\n","var lift = require('./lift');\nvar not = require('./not');\n\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      var isNotNil = R.complement(R.isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nmodule.exports = lift(not);\n","var pipe = require('./pipe');\nvar reverse = require('./reverse');\n\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nmodule.exports = function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n};\n","var chain = require('./chain');\nvar compose = require('./compose');\nvar map = require('./map');\n\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nmodule.exports = function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n};\n","var pipeP = require('./pipeP');\nvar reverse = require('./reverse');\n\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nmodule.exports = function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n};\n","var _curry2 = require('./internal/_curry2');\nvar _isArray = require('./internal/_isArray');\nvar _isFunction = require('./internal/_isFunction');\nvar toString = require('./toString');\n\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nmodule.exports = _curry2(function concat(a, b) {\n  if (a == null || !_isFunction(a.concat)) {\n    throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n  }\n  if (_isArray(a) && !_isArray(b)) {\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  return a.concat(b);\n});\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar map = require('./map');\nvar max = require('./max');\nvar reduce = require('./reduce');\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nmodule.exports = _curry1(function cond(pairs) {\n  var arity = reduce(max,\n                     0,\n                     map(function(pair) { return pair[0].length; }, pairs));\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\n","var _curry1 = require('./internal/_curry1');\nvar constructN = require('./constructN');\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      var AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      var animalSighting = R.invoker(0, 'sighting');\n *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nmodule.exports = _curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n","var _curry2 = require('./internal/_curry2');\nvar curry = require('./curry');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      };\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map((ingredient) => (\n *          'Add a whollop of ' + ingredient, this.ingredients)\n *        )\n *        return R.join('\\n', instructions)\n *      }\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad)\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')\n *      console.log(salad.recipe());\n *      // Add a whollop of Mayonnaise\n *      // Add a whollop of Potato Chips\n *      // Add a whollop of Potato Ketchup\n */\nmodule.exports = _curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function() { return new Fn(); };\n  }\n  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case  1: return new Fn($0);\n      case  2: return new Fn($0, $1);\n      case  3: return new Fn($0, $1, $2);\n      case  4: return new Fn($0, $1, $2, $3);\n      case  5: return new Fn($0, $1, $2, $3, $4);\n      case  6: return new Fn($0, $1, $2, $3, $4, $5);\n      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n * least one element of the given list; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.contains(3, [1, 2, 3]); //=> true\n *      R.contains(4, [1, 2, 3]); //=> false\n *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.contains([42], [[42]]); //=> true\n */\nmodule.exports = _curry2(_contains);\n","var _curry2 = require('./internal/_curry2');\nvar _map = require('./internal/_map');\nvar curryN = require('./curryN');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\n\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nmodule.exports = _curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function() {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function(fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n","var reduceBy = require('./reduceBy');\n\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nmodule.exports = reduceBy(function(acc, elem) { return acc + 1; }, 0);\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _curry2 = require('./internal/_curry2');\nvar _curryN = require('./internal/_curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n","var add = require('./add');\n\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nmodule.exports = add(-1);\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nmodule.exports = _curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\n","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared are compared\n * in terms of value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nmodule.exports = _curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\n","var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nmodule.exports = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) &&\n        !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nmodule.exports = _curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\nvar assoc = require('./assoc');\nvar dissoc = require('./dissoc');\n\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @sig [String] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nmodule.exports = _curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n  }\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      var half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      var reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nmodule.exports = _curry2(function divide(a, b) { return a / b; });\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdrop = require('./internal/_xdrop');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {[a]} list\n * @return {[a]} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nmodule.exports = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _dropLast = require('./internal/_dropLast');\nvar _xdropLast = require('./internal/_xdropLast');\n\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLast, _dropLast));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _dropLastWhile = require('./internal/_dropLastWhile');\nvar _xdropLastWhile = require('./internal/_xdropLastWhile');\n\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} predicate The function to be called on each element\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      var lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));\n","var _curry1 = require('./internal/_curry1');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\nvar dropRepeatsWith = require('./dropRepeatsWith');\nvar equals = require('./equals');\n\n\n/**\n * Returns a new list without any consecutively repeating elements. `R.equals`\n * is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nmodule.exports = _curry1(_dispatchable([], _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\nvar last = require('./last');\n\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\n\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropWhile = require('./internal/_xdropWhile');\n\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n */\nmodule.exports = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && pred(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, idx);\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar lift = require('./lift');\nvar or = require('./or');\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nmodule.exports = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\n","var _curry1 = require('./internal/_curry1');\nvar _isArguments = require('./internal/_isArguments');\nvar _isArray = require('./internal/_isArray');\nvar _isObject = require('./internal/_isObject');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty` and/or\n * `<Type>.prototype.empty`.\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nmodule.exports = _curry1(function empty(x) {\n  return (\n    (x != null && typeof x.empty === 'function') ?\n      x.empty() :\n    (x != null && x.constructor != null && typeof x.constructor.empty === 'function') ?\n      x.constructor.empty() :\n    _isArray(x) ?\n      [] :\n    _isString(x) ?\n      '' :\n    _isObject(x) ?\n      {} :\n    _isArguments(x) ?\n      (function() { return arguments; }()) :\n    // else\n      void 0\n  );\n});\n","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nmodule.exports = _curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\n","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Reports whether two objects have the same value, in `R.equals` terms, for\n * the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nmodule.exports = _curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\n","var _curry2 = require('./internal/_curry2');\nvar _equals = require('./internal/_equals');\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      var transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nmodule.exports = _curry2(function evolve(transformations, object) {\n  var result = {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function'                 ? transformation(object[key])\n                : transformation && type === 'object' ? evolve(transformation, object[key])\n                                                      : object[key];\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _filter = require('./internal/_filter');\nvar _isObject = require('./internal/_isObject');\nvar _reduce = require('./internal/_reduce');\nvar _xfilter = require('./internal/_xfilter');\nvar keys = require('./keys');\n\n\n/**\n * Takes a predicate and a \"filterable\", and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfind = require('./internal/_xfind');\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindIndex = require('./internal/_xfindIndex');\n\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindLast = require('./internal/_xfindLast');\n\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfindLastIndex = require('./internal/_xfindLastIndex');\n\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n */\nmodule.exports = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\n","var _curry1 = require('./internal/_curry1');\nvar _makeFlat = require('./internal/_makeFlat');\n\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nmodule.exports = _curry1(_makeFlat(true));\n","var _curry1 = require('./internal/_curry1');\nvar curry = require('./curry');\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nmodule.exports = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nmodule.exports = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\n","var _curry2 = require('./internal/_curry2');\nvar keys = require('./keys');\n\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nmodule.exports = _curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\nvar reduceBy = require('./reduceBy');\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a String-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> String) -> [a] -> {String: [a]}\n * @param {Function} fn Function :: a -> String\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.transduce\n * @example\n *\n *      var byGrade = R.groupBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nmodule.exports = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n  acc.push(item);\n  return acc;\n}, null)));\n","var _curry2 = require('./internal/_curry2');\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all \"equal\" according to the provided equality function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of equal elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nmodule.exports = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[idx], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gt(a, b) { return a > b; });\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nmodule.exports = _curry2(function gte(a, b) { return a >= b; });\n","var _curry2 = require('./internal/_curry2');\nvar _has = require('./internal/_has');\n\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      var point = {x: 0, y: 0};\n *      var pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nmodule.exports = _curry2(_has);\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      var square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nmodule.exports = _curry2(function hasIn(prop, obj) {\n  return prop in obj;\n});\n","var nth = require('./nth');\n\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nmodule.exports = nth(0);\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n","var _curry1 = require('./internal/_curry1');\nvar _identity = require('./internal/_identity');\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nmodule.exports = _curry1(_identity);\n","var _curry3 = require('./internal/_curry3');\nvar curryN = require('./curryN');\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nmodule.exports = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\n","var add = require('./add');\n\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nmodule.exports = add(1);\n","var reduceBy = require('./reduceBy');\n\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n * @param {Function} fn Function :: a -> String\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nmodule.exports = reduceBy(function(acc, elem) { return elem; }, null);\n","var _curry2 = require('./internal/_curry2');\nvar _indexOf = require('./internal/_indexOf');\nvar _isArray = require('./internal/_isArray');\n\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. `R.equals` is used to determine\n * equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ?\n    xs.indexOf(target) :\n    _indexOf(xs, target, 0);\n});\n","var slice = require('./slice');\n\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nmodule.exports = slice(0, -1);\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Inserts the supplied element into the list, at index `index`. _Note that\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nmodule.exports = _curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Inserts the sub-list into the list, at index `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nmodule.exports = _curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx),\n                   elts,\n                   Array.prototype.slice.call(list, idx));\n});\n","var _contains = require('./_contains');\n\n\n// A simple Set type that honours R.equals semantics\nmodule.exports = (function() {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function(item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function(item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  function hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n    switch (type) {\n      case 'string':\n      case 'number':\n        // distinguish between +0 and -0\n        if (item === 0 && 1 / item === -Infinity) {\n          if (set._items['-0']) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items['-0'] = true;\n            }\n            return false;\n          }\n        }\n        // these types can all utilise the native Set\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = {};\n              set._items[type][item] = true;\n            }\n            return false;\n          } else if (item in set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][item] = true;\n            }\n            return false;\n          }\n        }\n\n      case 'boolean':\n        // set._items['boolean'] holds a two element array\n        // representing [ falseExists, trueExists ]\n        if (type in set._items) {\n          var bIdx = item ? 1 : 0;\n          if (set._items[type][bIdx]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][bIdx] = true;\n            }\n            return false;\n          }\n        } else {\n          if (shouldAdd) {\n            set._items[type] = item ? [false, true] : [true, false];\n          }\n          return false;\n        }\n\n      case 'function':\n        // compare functions for reference equality\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n            return false;\n          }\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n            return false;\n          }\n          return true;\n        }\n\n      case 'undefined':\n        if (set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type] = true;\n          }\n          return false;\n        }\n\n      case 'object':\n        if (item === null) {\n          if (!set._items['null']) {\n            if (shouldAdd) {\n              set._items['null'] = true;\n            }\n            return false;\n          }\n          return true;\n        }\n      /* falls through */\n      default:\n        // reduce the search size of heterogeneous sets by creating buckets\n        // for each type.\n        type = Object.prototype.toString.call(item);\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        // scan through all previously applied items\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n    }\n  }\n  return _Set;\n}());\n","module.exports = function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n};\n","module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n","module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n","var _objectAssign = require('./_objectAssign');\n\nmodule.exports =\n  typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n","var _isArray = require('./_isArray');\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n};\n","var _cloneRegExp = require('./_cloneRegExp');\nvar type = require('../type');\n\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nmodule.exports = function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ?\n        _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':  return copy({});\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp':  return _cloneRegExp(value);\n    default:        return value;\n  }\n};\n","module.exports = function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, (pattern.global     ? 'g' : '') +\n                                    (pattern.ignoreCase ? 'i' : '') +\n                                    (pattern.multiline  ? 'm' : '') +\n                                    (pattern.sticky     ? 'y' : '') +\n                                    (pattern.unicode    ? 'u' : ''));\n};\n","module.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n","var _indexOf = require('./_indexOf');\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n","module.exports = function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n","var _arity = require('./_arity');\nvar _curry2 = require('./_curry2');\n\n\nmodule.exports = function _createPartialApplicator(concat) {\n  return _curry2(function(fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function() {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n};\n","var _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n","var _curry1 = require('./_curry1');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n","var _curry1 = require('./_curry1');\nvar _curry2 = require('./_curry2');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n","var _arity = require('./_arity');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n","var _isArray = require('./_isArray');\nvar _isTransformer = require('./_isTransformer');\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodNames, xf, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n","var take = require('../take');\n\nmodule.exports = function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n};\n","module.exports = function dropLastWhile(pred, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && pred(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx + 1);\n};\n","var _arrayFromIterator = require('./_arrayFromIterator');\nvar _functionName = require('./_functionName');\nvar _has = require('./_has');\nvar identical = require('../identical');\nvar keys = require('../keys');\nvar type = require('../type');\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n","module.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n","var _forceReduced = require('./_forceReduced');\nvar _reduce = require('./_reduce');\nvar _xfBase = require('./_xfBase');\nvar isArrayLike = require('../isArrayLike');\n\nmodule.exports = (function() {\n  var preservingReduced = function(xf) {\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return xf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        var ret = xf['@@transducer/step'](result, input);\n        return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n      }\n    };\n  };\n\n  return function _xcat(xf) {\n    var rxf = preservingReduced(xf);\n    return {\n      '@@transducer/init': _xfBase.init,\n      '@@transducer/result': function(result) {\n        return rxf['@@transducer/result'](result);\n      },\n      '@@transducer/step': function(result, input) {\n        return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n      }\n    };\n  };\n}());\n","module.exports = function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n};\n","module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n","module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","module.exports = function _identity(x) { return x; };\n","var equals = require('../equals');\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n","var _has = require('./_has');\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n","module.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nmodule.exports = Number.isInteger || function _isInteger(n) {\n  return (n << 0) === n;\n};\n","module.exports = function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n};\n","module.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n","module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n","module.exports = function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n};\n","module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n","module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n","var isArrayLike = require('../isArrayLike');\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nmodule.exports = function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n};\n","module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n","var _has = require('./_has');\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nmodule.exports = function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n};\n","module.exports = function _of(x) { return [x]; };\n","module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n","module.exports = function _pipeP(f, g) {\n  return function() {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function(x) {\n      return g.call(ctx, x);\n    });\n  };\n};\n","module.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n","var _xwrap = require('./_xwrap');\nvar bind = require('../bind');\nvar isArrayLike = require('../isArrayLike');\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n","module.exports = function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n};\n","var _assign = require('./_assign');\nvar _identity = require('./_identity');\nvar _isTransformer = require('./_isTransformer');\nvar isArrayLike = require('../isArrayLike');\nvar objOf = require('../objOf');\n\n\nmodule.exports = (function() {\n  var _stepCatArray = {\n    '@@transducer/init': Array,\n    '@@transducer/step': function(xs, x) {\n      xs.push(x);\n      return xs;\n    },\n    '@@transducer/result': _identity\n  };\n  var _stepCatString = {\n    '@@transducer/init': String,\n    '@@transducer/step': function(a, b) { return a + b; },\n    '@@transducer/result': _identity\n  };\n  var _stepCatObject = {\n    '@@transducer/init': Object,\n    '@@transducer/step': function(result, input) {\n      return _assign(\n        result,\n        isArrayLike(input) ? objOf(input[0], input[1]) : input\n      );\n    },\n    '@@transducer/result': _identity\n  };\n\n  return function _stepCat(obj) {\n    if (_isTransformer(obj)) {\n      return obj;\n    }\n    if (isArrayLike(obj)) {\n      return _stepCatArray;\n    }\n    if (typeof obj === 'string') {\n      return _stepCatString;\n    }\n    if (typeof obj === 'object') {\n      return _stepCatObject;\n    }\n    throw new Error('Cannot create transformer for ' + obj);\n  };\n}());\n","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n","var _contains = require('./_contains');\nvar _map = require('./_map');\nvar _quote = require('./_quote');\nvar _toISOString = require('./_toISOString');\nvar keys = require('../keys');\nvar reject = require('../reject');\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n  XAll.prototype['@@transducer/result'] = function(result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAll.prototype['@@transducer/step'] = function(result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n    return result;\n  };\n\n  return _curry2(function _xall(f, xf) { return new XAll(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function(result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n\n  return _curry2(function _xany(f, xf) { return new XAny(f, xf); });\n}());\n","var _concat = require('./_concat');\nvar _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XAperture(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XAperture.prototype['@@transducer/init'] = _xfBase.init;\n  XAperture.prototype['@@transducer/result'] = function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XAperture.prototype['@@transducer/step'] = function(result, input) {\n    this.store(input);\n    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n  };\n  XAperture.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  XAperture.prototype.getCopy = function() {\n    return _concat(Array.prototype.slice.call(this.acc, this.pos),\n                   Array.prototype.slice.call(this.acc, 0, this.pos));\n  };\n\n  return _curry2(function _xaperture(n, xf) { return new XAperture(n, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _flatCat = require('./_flatCat');\nvar map = require('../map');\n\n\nmodule.exports = _curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function(result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdrop(n, xf) { return new XDrop(n, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropLast(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] =  function(result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function(input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n\n  return _curry2(function _xdropLast(n, xf) { return new XDropLast(n, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduce = require('./_reduce');\nvar _xfBase = require('./_xfBase');\n\nmodule.exports = (function() {\n  function XDropLastWhile(fn, xf) {\n    this.f = fn;\n    this.retained = [];\n    this.xf = xf;\n  }\n  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLastWhile.prototype['@@transducer/result'] = function(result) {\n    this.retained = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLastWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.retain(result, input)\n                         : this.flush(result, input);\n  };\n  XDropLastWhile.prototype.flush = function(result, input) {\n    result = _reduce(\n      this.xf['@@transducer/step'],\n      result,\n      this.retained\n    );\n    this.retained = [];\n    return this.xf['@@transducer/step'](result, input);\n  };\n  XDropLastWhile.prototype.retain = function(result, input) {\n    this.retained.push(input);\n    return result;\n  };\n\n  return _curry2(function _xdropLastWhile(fn, xf) { return new XDropLastWhile(fn, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropRepeatsWith(pred, xf) { return new XDropRepeatsWith(pred, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XDropWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XDropWhile.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f) {\n      if (this.f(input)) {\n        return result;\n      }\n      this.f = null;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return _curry2(function _xdropWhile(f, xf) { return new XDropWhile(f, xf); });\n}());\n","module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.found = false;\n  }\n  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindIndex.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, -1);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFindIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindLast(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLast.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n  };\n  XFindLast.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.last = input;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLast(f, xf) { return new XFindLast(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFindLastIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.lastIdx = -1;\n  }\n  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLastIndex.prototype['@@transducer/result'] = function(result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n  };\n  XFindLastIndex.prototype['@@transducer/step'] = function(result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.lastIdx = this.idx;\n    }\n    return result;\n  };\n\n  return _curry2(function _xfindLastIndex(f, xf) { return new XFindLastIndex(f, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n","var _curryN = require('./_curryN');\nvar _has = require('./_has');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function(result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function(result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n\n  return _curryN(4, [],\n                 function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n                   return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n                 });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\nmodule.exports = (function() {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function(result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return _curry2(function _xtake(n, xf) { return new XTake(n, xf); });\n}());\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XTakeWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XTakeWhile.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n  };\n\n  return _curry2(function _xtakeWhile(f, xf) { return new XTakeWhile(f, xf); });\n}());\n","module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\nvar _filter = require('./internal/_filter');\nvar flip = require('./flip');\nvar uniq = require('./uniq');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.intersectionWith\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nmodule.exports = _curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\n","var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\nvar uniqWith = require('./uniqWith');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate function that determines whether\n *        the two supplied elements are equal.\n * @param {Array} list1 One list of items to compare\n * @param {Array} list2 A second list of items to compare\n * @return {Array} A new list containing those elements common to both lists.\n * @see R.intersection\n * @example\n *\n *      var buffaloSpringfield = [\n *        {id: 824, name: 'Richie Furay'},\n *        {id: 956, name: 'Dewey Martin'},\n *        {id: 313, name: 'Bruce Palmer'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *      var csny = [\n *        {id: 204, name: 'David Crosby'},\n *        {id: 456, name: 'Stephen Stills'},\n *        {id: 539, name: 'Graham Nash'},\n *        {id: 177, name: 'Neil Young'}\n *      ];\n *\n *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nmodule.exports = _curry3(function intersectionWith(pred, list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  var results = [];\n  var idx = 0;\n  while (idx < filteredList.length) {\n    if (_containsWith(pred, filteredList[idx], lookupList)) {\n      results[results.length] = filteredList[idx];\n    }\n    idx += 1;\n  }\n  return uniqWith(pred, results);\n});\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nmodule.exports = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\n","var _clone = require('./internal/_clone');\nvar _curry3 = require('./internal/_curry3');\nvar _isTransformer = require('./internal/_isTransformer');\nvar _reduce = require('./internal/_reduce');\nvar _stepCat = require('./internal/_stepCat');\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with R.reduce after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nmodule.exports = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar keys = require('./keys');\n\n\n/**\n * Same as R.invertObj, however this accounts for objects with duplicate values\n * by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys\n * in an array.\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nmodule.exports = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\n","var _curry1 = require('./internal/_curry1');\nvar keys = require('./keys');\n\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @example\n *\n *      var raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      var raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nmodule.exports = _curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _isFunction = require('./internal/_isFunction');\nvar curryN = require('./curryN');\nvar toString = require('./toString');\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nmodule.exports = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nmodule.exports = _curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\n","var _curry1 = require('./internal/_curry1');\nvar _isArray = require('./internal/_isArray');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @deprecated since v0.23.0\n * @example\n *\n *      R.isArrayLike([]); //=> true\n *      R.isArrayLike(true); //=> false\n *      R.isArrayLike({}); //=> false\n *      R.isArrayLike({length: 10}); //=> false\n *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n","var _curry1 = require('./internal/_curry1');\nvar empty = require('./empty');\nvar equals = require('./equals');\n\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nmodule.exports = _curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n","var invoker = require('./invoker');\n\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nmodule.exports = invoker(1, 'join');\n","var _curry1 = require('./internal/_curry1');\nvar converge = require('./converge');\n\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nmodule.exports = _curry1(function juxt(fns) {\n  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);\n});\n","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar _isArguments = require('./internal/_isArguments');\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nmodule.exports = _curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\n","var nth = require('./nth');\n\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nmodule.exports = nth(-1);\n","var _curry2 = require('./internal/_curry2');\nvar _isArray = require('./internal/_isArray');\nvar equals = require('./equals');\n\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. `R.equals` is used to determine\n * equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nmodule.exports = _curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\n","var _curry1 = require('./internal/_curry1');\nvar _isNumber = require('./internal/_isNumber');\n\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nmodule.exports = _curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\n","var _curry2 = require('./internal/_curry2');\nvar map = require('./map');\n\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\n","var _curry1 = require('./internal/_curry1');\nvar lens = require('./lens');\nvar nth = require('./nth');\nvar update = require('./update');\n\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nmodule.exports = _curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\n","var _curry1 = require('./internal/_curry1');\nvar assocPath = require('./assocPath');\nvar lens = require('./lens');\nvar path = require('./path');\n\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nmodule.exports = _curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\n","var _curry1 = require('./internal/_curry1');\nvar assoc = require('./assoc');\nvar lens = require('./lens');\nvar prop = require('./prop');\n\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\n","var _curry1 = require('./internal/_curry1');\nvar liftN = require('./liftN');\n\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nmodule.exports = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\n","var _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar ap = require('./ap');\nvar curryN = require('./curryN');\nvar map = require('./map');\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nmodule.exports = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lt(a, b) { return a < b; });\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lte(a, b) { return a <= b; });\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _map = require('./internal/_map');\nvar _reduce = require('./internal/_reduce');\nvar _xmap = require('./internal/_xmap');\nvar curryN = require('./curryN');\nvar keys = require('./keys');\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nmodule.exports = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The mapAccum function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nmodule.exports = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The mapAccumRight function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to `mapAccum`, except moves through the input list from the right to\n * the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nmodule.exports = _curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\n","var _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar keys = require('./keys');\n\n\n/**\n * An Object-specific version of `map`. The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * `map` instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      var values = { x: 1, y: 2, z: 3 };\n *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nmodule.exports = _curry2(function mapObjIndexed(fn, obj) {\n  return _reduce(function(acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nmodule.exports = _curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\n","var _curry2 = require('./internal/_curry2');\nvar _isInteger = require('./internal/_isInteger');\n\n\n/**\n * mathMod behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n * when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nmodule.exports = _curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) { return NaN; }\n  if (!_isInteger(p) || p < 1) { return NaN; }\n  return ((m % p) + p) % p;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nmodule.exports = _curry2(function max(a, b) { return b > a ? b : a; });\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nmodule.exports = _curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\n","var _curry1 = require('./internal/_curry1');\nvar sum = require('./sum');\n\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nmodule.exports = _curry1(function mean(list) {\n  return sum(list) / list.length;\n});\n","var _curry1 = require('./internal/_curry1');\nvar mean = require('./mean');\n\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nmodule.exports = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar toString = require('./toString');\n\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @example\n *\n *      var count = 0;\n *      var factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nmodule.exports = _curry1(function memoize(fn) {\n  var cache = {};\n  return _arity(fn.length, function() {\n    var key = toString(arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\n","var _assign = require('./internal/_assign');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nmodule.exports = _curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\n","var _assign = require('./internal/_assign');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nmodule.exports = _curry1(function mergeAll(list) {\n  return _assign.apply(null, [{}].concat(list));\n});\n","var _curry3 = require('./internal/_curry3');\nvar mergeWithKey = require('./mergeWithKey');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object. The key will be\n * excluded from the returned object if the resulting value is `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nmodule.exports = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object. The key\n * will be excluded from the returned object if the resulting value is\n * `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nmodule.exports = _curry2(function min(a, b) { return b < a ? b : a; });\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nmodule.exports = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see `mathMod`.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nmodule.exports = _curry2(function modulo(a, b) { return a % b; });\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nmodule.exports = _curry2(function multiply(a, b) { return a * b; });\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nmodule.exports = _curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0: return function() {return fn.call(this);};\n    case 1: return function(a0) {return fn.call(this, a0);};\n    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};\n    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};\n    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};\n    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};\n    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};\n    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nmodule.exports = _curry1(function negate(n) { return -n; });\n","var _complement = require('./internal/_complement');\nvar _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xany = require('./internal/_xany');\nvar any = require('./any');\n\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n */\nmodule.exports = _curry2(_complement(_dispatchable(['any'], _xany, any)));\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nmodule.exports = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\nvar nth = require('./nth');\n\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nmodule.exports = _curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function() {\n    return nth(n, arguments);\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nmodule.exports = _curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\n","var _curry1 = require('./internal/_curry1');\nvar _of = require('./internal/_of');\n\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nmodule.exports = _curry1(_of);\n","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nmodule.exports = _curry2(function omit(names, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (!_contains(prop, names)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nmodule.exports = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nmodule.exports = _curry2(function or(a, b) {\n  return a || b;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nmodule.exports = (function() {\n  // `Identity` is a functor that holds a single value, where `map` simply\n  // transforms the held value with the provided function.\n  var Identity = function(x) {\n    return {value: x, map: function(f) { return Identity(f(x)); }};\n  };\n\n  return _curry3(function over(lens, f, x) {\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    return lens(function(y) { return Identity(f(y)); })(x).value;\n  });\n}());\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nmodule.exports = _curry2(function pair(fst, snd) { return [fst, snd]; });\n","var _concat = require('./internal/_concat');\nvar _createPartialApplicator = require('./internal/_createPartialApplicator');\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nmodule.exports = _createPartialApplicator(_concat);\n","var _concat = require('./internal/_concat');\nvar _createPartialApplicator = require('./internal/_createPartialApplicator');\nvar flip = require('./flip');\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nmodule.exports = _createPartialApplicator(flip(_concat));\n","var filter = require('./filter');\nvar juxt = require('./juxt');\nvar reject = require('./reject');\n\n\n/**\n * Takes a predicate and a list or other \"filterable\" object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nmodule.exports = juxt([filter, reject]);\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nmodule.exports = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\nvar path = require('./path');\n\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * `R.equals` terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nmodule.exports = _curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n","var _curry3 = require('./internal/_curry3');\nvar defaultTo = require('./defaultTo');\nvar path = require('./path');\n\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nmodule.exports = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n","var _curry3 = require('./internal/_curry3');\nvar path = require('./path');\n\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n */\nmodule.exports = _curry3(function pathSatisfies(pred, propPath, obj) {\n  return propPath.length > 0 && pred(path(propPath, obj));\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nmodule.exports = _curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nmodule.exports = _curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nmodule.exports = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\n","var _arity = require('./internal/_arity');\nvar _pipe = require('./internal/_pipe');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n","var composeK = require('./composeK');\nvar reverse = require('./reverse');\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nmodule.exports = function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n};\n","var _arity = require('./internal/_arity');\nvar _pipeP = require('./internal/_pipeP');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nmodule.exports = function pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipeP, arguments[0], tail(arguments)));\n};\n","var _curry2 = require('./internal/_curry2');\nvar map = require('./map');\nvar prop = require('./prop');\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig k -> [{k: v}] -> [v]\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} list The array to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nmodule.exports = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nmodule.exports = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n","var multiply = require('./multiply');\nvar reduce = require('./reduce');\n\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nmodule.exports = reduce(multiply, 1);\n","var _map = require('./internal/_map');\nvar identity = require('./identity');\nvar pickAll = require('./pickAll');\nvar useWith = require('./useWith');\n\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      var kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nmodule.exports = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Returns `true` if the specified object property is equal, in `R.equals`\n * terms, to the given value; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.equals, R.propSatisfies\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nmodule.exports = _curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\n","var _curry3 = require('./internal/_curry3');\nvar is = require('./is');\n\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nmodule.exports = _curry3(function propIs(type, name, obj) {\n  return is(type, obj[name]);\n});\n","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nmodule.exports = _curry3(function propOr(val, p, obj) {\n  return (obj != null && _has(p, obj)) ? obj[p] : val;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nmodule.exports = _curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nmodule.exports = _curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _isNumber = require('./internal/_isNumber');\n\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nmodule.exports = _curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\n","var _curry3 = require('./internal/_curry3');\nvar _reduce = require('./internal/_reduce');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * `R.reduced` to shortcut the iteration.\n *\n * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *                -               -10\n *               / \\              / \\\n *              -   4           -6   4\n *             / \\              / \\\n *            -   3   ==>     -3   3\n *           / \\              / \\\n *          -   2           -1   2\n *         / \\              / \\\n *        0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nmodule.exports = _curry3(_reduce);\n","var _curryN = require('./internal/_curryN');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _has = require('./internal/_has');\nvar _reduce = require('./internal/_reduce');\nvar _xreduceBy = require('./internal/_xreduceBy');\n\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general `groupBy` function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nmodule.exports = _curryN(4, [], _dispatchable([], _xreduceBy,\n  function reduceBy(valueFn, valueAcc, keyFn, list) {\n    return _reduce(function(acc, elt) {\n      var key = keyFn(elt);\n      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n      return acc;\n    }, {}, list);\n  }));\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to `reduce`, except moves through the input list from the right to\n * the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a, b -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *          -               -2\n *         / \\              / \\\n *        1   -            1   3\n *           / \\              / \\\n *          2   -     ==>    2  -1\n *             / \\              / \\\n *            3   -            3   4\n *               / \\              / \\\n *              4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nmodule.exports = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\n","var _curryN = require('./internal/_curryN');\nvar _reduce = require('./internal/_reduce');\nvar _reduced = require('./internal/_reduced');\n\n\n/**\n * Like `reduce`, `reduceWhile` returns a single item by iterating through\n * the list, successively calling the iterator function. `reduceWhile` also\n * takes a predicate that is evaluated before each step. If the predicate returns\n * `false`, it \"short-circuits\" the iteration and returns the current value\n * of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nmodule.exports = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function(acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n","var _curry1 = require('./internal/_curry1');\nvar _reduced = require('./internal/_reduced');\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * Note: this optimization is unavailable to functions not explicitly listed\n * above. For instance, it is not currently supported by reduceRight.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.transduce\n * @example\n *\n *      R.reduce(\n *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n *        0,\n *        [1, 2, 3, 4, 5]) // 10\n */\n\nmodule.exports = _curry1(_reduced);\n","var _complement = require('./internal/_complement');\nvar _curry2 = require('./internal/_curry2');\nvar filter = require('./filter');\n\n\n/**\n * The complement of `filter`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nmodule.exports = _curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\nvar always = require('./always');\nvar times = require('./times');\n\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nmodule.exports = _curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nmodule.exports = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n","var _curry1 = require('./internal/_curry1');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nmodule.exports = _curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') :\n                           Array.prototype.slice.call(list, 0).reverse();\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Scan is similar to reduce, but returns a list of successively reduced values\n * from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a,b -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nmodule.exports = _curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\nvar ap = require('./ap');\nvar map = require('./map');\nvar prepend = require('./prepend');\nvar reduceRight = require('./reduceRight');\n\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nmodule.exports = _curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ?\n    traversable.sequence(of) :\n    reduceRight(function(x, acc) { return ap(map(prepend, x), acc); },\n                of([]),\n                traversable);\n});\n","var _curry3 = require('./internal/_curry3');\nvar always = require('./always');\nvar over = require('./over');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nmodule.exports = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,a -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nmodule.exports = _curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nmodule.exports = _curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [a -> a -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nmodule.exports = _curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\n","var invoker = require('./invoker');\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nmodule.exports = invoker(1, 'split');\n","var _curry2 = require('./internal/_curry2');\nvar length = require('./length');\nvar slice = require('./slice');\n\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nmodule.exports = _curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\n","var _curry2 = require('./internal/_curry2');\nvar slice = require('./slice');\n\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nmodule.exports = _curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nmodule.exports = _curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      var minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      var complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nmodule.exports = _curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\n","var add = require('./add');\nvar reduce = require('./reduce');\n\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nmodule.exports = reduce(add, 0);\n","var _curry2 = require('./internal/_curry2');\nvar concat = require('./concat');\nvar difference = require('./difference');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nmodule.exports = _curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n","var _curry3 = require('./internal/_curry3');\nvar concat = require('./concat');\nvar differenceWith = require('./differenceWith');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nmodule.exports = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry1 = require('./internal/_curry1');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xtake = require('./internal/_xtake');\nvar slice = require('./slice');\n\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nmodule.exports = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n","var _curry2 = require('./internal/_curry2');\nvar drop = require('./drop');\n\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nmodule.exports = _curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n */\nmodule.exports = _curry2(function takeLastWhile(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0 && fn(list[idx])) {\n    idx -= 1;\n  }\n  return Array.prototype.slice.call(list, idx + 1);\n});\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xtakeWhile = require('./internal/_xtakeWhile');\n\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      var isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n */\nmodule.exports = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len && fn(list[idx])) {\n    idx += 1;\n  }\n  return Array.prototype.slice.call(list, 0, idx);\n}));\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nmodule.exports = _curry2(function tap(fn, x) {\n  fn(x);\n  return x;\n});\n","var _cloneRegExp = require('./internal/_cloneRegExp');\nvar _curry2 = require('./internal/_curry2');\nvar _isRegExp = require('./internal/_isRegExp');\nvar toString = require('./toString');\n\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nmodule.exports = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nmodule.exports = _curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\n","var invoker = require('./invoker');\n\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nmodule.exports = invoker(0, 'toLowerCase');\n","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\n\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nmodule.exports = _curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nmodule.exports = _curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\n","var _curry1 = require('./internal/_curry1');\nvar _toString = require('./internal/_toString');\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n","var invoker = require('./invoker');\n\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nmodule.exports = invoker(0, 'toUpperCase');\n","var _reduce = require('./internal/_reduce');\nvar _xwrap = require('./internal/_xwrap');\nvar curryN = require('./curryN');\n\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the `R.reduced` function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is R.identity. The init\n * function can be used to provide an initial accumulator, but is ignored by\n * transduce.\n *\n * The iteration is performed with R.reduce after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n */\nmodule.exports = curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n * If some of the rows are shorter than the following rows, their elements are skipped:\n *\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nmodule.exports = _curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\n","var _curry3 = require('./internal/_curry3');\nvar map = require('./map');\nvar sequence = require('./sequence');\n\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nmodule.exports = _curry3(function traverse(of, f, traversable) {\n  return sequence(of, map(f, traversable));\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nmodule.exports = (function() {\n  var ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n           '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n           '\\u2029\\uFEFF';\n  var zeroWidth = '\\u200b';\n  var hasProtoTrim = (typeof String.prototype.trim === 'function');\n  if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n    return _curry1(function trim(str) {\n      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n      return str.replace(beginRx, '').replace(endRx, '');\n    });\n  } else {\n    return _curry1(function trim(str) {\n      return str.trim();\n    });\n  }\n}());\n","var _arity = require('./internal/_arity');\nvar _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nmodule.exports = _curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function() {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, R.unapply derives a variadic function from a function which\n * takes an array. R.unapply is the inverse of R.apply.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nmodule.exports = _curry1(function unapply(fn) {\n  return function() {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\n","var _curry1 = require('./internal/_curry1');\nvar nAry = require('./nAry');\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nmodule.exports = _curry1(function unary(fn) {\n  return nAry(1, fn);\n});\n","var _curry2 = require('./internal/_curry2');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      var addFour = a => b => c => d => a + b + c + d;\n *\n *      var uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nmodule.exports = _curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function() {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nmodule.exports = _curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar compose = require('./compose');\nvar uniq = require('./uniq');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nmodule.exports = _curry2(compose(uniq, _concat));\n","var _concat = require('./internal/_concat');\nvar _curry3 = require('./internal/_curry3');\nvar uniqWith = require('./uniqWith');\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nmodule.exports = _curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n","var identity = require('./identity');\nvar uniqBy = require('./uniqBy');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. `R.equals` is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nmodule.exports = uniqBy(identity);\n","var _Set = require('./internal/_Set');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. `R.equals` is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nmodule.exports = _curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\n","var _containsWith = require('./internal/_containsWith');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nmodule.exports = _curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      // coerceArray :: (a|[a]) -> [a]\n *      var coerceArray = R.unless(R.isArrayLike, R.of);\n *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n *      coerceArray(1);         //=> [1]\n */\nmodule.exports = _curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\n","var _identity = require('./internal/_identity');\nvar chain = require('./chain');\n\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nmodule.exports = chain(_identity);\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nmodule.exports = _curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\n","var _curry3 = require('./internal/_curry3');\nvar adjust = require('./adjust');\nvar always = require('./always');\n\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nmodule.exports = _curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\n","var _curry2 = require('./internal/_curry2');\nvar curryN = require('./curryN');\n\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nmodule.exports = _curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function() {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\n","var _curry1 = require('./internal/_curry1');\nvar keys = require('./keys');\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nmodule.exports = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nmodule.exports = _curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nmodule.exports = (function() {\n  // `Const` is a functor that effectively ignores the function given to `map`.\n  var Const = function(x) {\n    return {value: x, map: function() { return this; }};\n  };\n\n  return _curry2(function view(lens, x) {\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    return lens(Const)(x).value;\n  });\n}());\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nmodule.exports = _curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\n","var _curry2 = require('./internal/_curry2');\nvar _has = require('./internal/_has');\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as `filter` and `find`.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(__, 10),\n *        y: R.lt(__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nmodule.exports = _curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\n","var _curry2 = require('./internal/_curry2');\nvar equals = require('./equals');\nvar map = require('./map');\nvar where = require('./where');\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in `R.equals` terms) as accessing that property of the spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nmodule.exports = _curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n","var _contains = require('./internal/_contains');\nvar _curry2 = require('./internal/_curry2');\nvar flip = require('./flip');\nvar reject = require('./reject');\n\n\n/**\n * Returns a new list without values in the first argument.\n * `R.equals` is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nmodule.exports = _curry2(function(xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nmodule.exports = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nmodule.exports = _curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,b -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nmodule.exports = _curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\n","// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}","// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = bufferShim.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = bufferShim.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er, data) {\n      done(stream, er, data);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  this.next = null;\n  this.entry = null;\n  this.finish = onCorkedFinish.bind(undefined, this, state);\n}\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = Buffer.isBuffer(chunk);\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = bufferShim.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    chunk = decodeChunk(state, chunk, encoding);\n    if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}","'use strict';\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nmodule.exports = BufferList;\n\nfunction BufferList() {\n  this.head = null;\n  this.tail = null;\n  this.length = 0;\n}\n\nBufferList.prototype.push = function (v) {\n  var entry = { data: v, next: null };\n  if (this.length > 0) this.tail.next = entry;else this.head = entry;\n  this.tail = entry;\n  ++this.length;\n};\n\nBufferList.prototype.unshift = function (v) {\n  var entry = { data: v, next: this.head };\n  if (this.length === 0) this.tail = entry;\n  this.head = entry;\n  ++this.length;\n};\n\nBufferList.prototype.shift = function () {\n  if (this.length === 0) return;\n  var ret = this.head.data;\n  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n  --this.length;\n  return ret;\n};\n\nBufferList.prototype.clear = function () {\n  this.head = this.tail = null;\n  this.length = 0;\n};\n\nBufferList.prototype.join = function (s) {\n  if (this.length === 0) return '';\n  var p = this.head;\n  var ret = '' + p.data;\n  while (p = p.next) {\n    ret += s + p.data;\n  }return ret;\n};\n\nBufferList.prototype.concat = function (n) {\n  if (this.length === 0) return bufferShim.alloc(0);\n  if (this.length === 1) return this.head.data;\n  var ret = bufferShim.allocUnsafe(n >>> 0);\n  var p = this.head;\n  var i = 0;\n  while (p) {\n    p.data.copy(ret, i);\n    i += p.data.length;\n    p = p.next;\n  }\n  return ret;\n};","var Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// List from https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers.\nexports.default = ['onabort', 'onautocomplete', 'onautocompleteerror', 'onblur', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 'oncuechange', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onwheel', 'onpause', 'onplay', 'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange', 'onwaiting'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.virtualizeString = exports.virtualizeNode = undefined;\n\nexports.default = function (el, options) {\n    if (typeof el === 'string') {\n        return (0, _strings2.default)(el, options);\n    } else {\n        return (0, _nodes2.default)(el, options);\n    }\n};\n\nvar _nodes = require('./nodes');\n\nvar _nodes2 = _interopRequireDefault(_nodes);\n\nvar _strings = require('./strings');\n\nvar _strings2 = _interopRequireDefault(_strings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.virtualizeNode = _nodes2.default;\nexports.virtualizeString = _strings2.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = virtualizeNodes;\n\nvar _h = require('snabbdom/h');\n\nvar _h2 = _interopRequireDefault(_h);\n\nvar _utils = require('./utils');\n\nvar _eventListeners = require('./event-listeners');\n\nvar _eventListeners2 = _interopRequireDefault(_eventListeners);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction virtualizeNodes(element) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\n    var context = options.context || document;\n\n    if (!element) {\n        return null;\n    }\n\n    var createdVNodes = [];\n    var vnode = convertNode(element, createdVNodes, context);\n    options.hooks && options.hooks.create && createdVNodes.forEach(function (node) {\n        options.hooks.create(node);\n    });\n    return vnode;\n}\n\nfunction convertNode(element, createdVNodes, context) {\n    // If our node is a text node, then we only want to set the `text` part of\n    // the VNode.\n    if (element.nodeType === context.defaultView.Node.TEXT_NODE) {\n        var _newNode = (0, _utils.createTextVNode)(element.textContent, context);\n        _newNode.elm = element;\n        createdVNodes.push(_newNode);\n        return _newNode;\n    }\n\n    // If not a text node, then build up a VNode based on the element's tag\n    // name, class and style attributes, and remaining attributes.\n\n    // Special values: style, class. We don't include these in the attrs hash\n    // of the VNode.\n    var data = {};\n    var classes = getClasses(element);\n    if (Object.keys(classes).length !== 0) {\n        data.class = classes;\n    }\n    var style = getStyle(element);\n    if (Object.keys(style).length !== 0) {\n        data.style = style;\n    }\n\n    // Build up set of attributes on the element.\n    var attributes = element.attributes;\n    for (var _i = 0; _i < attributes.length; _i++) {\n        var attr = attributes.item(_i);\n        var name = attr.name;\n        if (name !== 'style' && name !== 'class') {\n            if (!data.attrs) {\n                data.attrs = {};\n            }\n            data.attrs[name] = attr.value;\n        }\n    }\n\n    // Check for event listeners.\n    var on = {};\n    _eventListeners2.default.forEach(function (key) {\n        if (element[key]) {\n            on[key.substring(2)] = element[key];\n        }\n    });\n    if (Object.keys(on).length > 0) {\n        data.on = on;\n    }\n\n    // Build up set of children.\n    var childNodes = null;\n    var children = element.childNodes;\n    if (children.length > 0) {\n        childNodes = [];\n        for (var i = 0; i < children.length; i++) {\n            childNodes.push(convertNode(children.item(i), createdVNodes, context));\n        }\n    }\n    var newNode = (0, _h2.default)(element.tagName.toLowerCase(), data, childNodes);\n    newNode.elm = element;\n    createdVNodes.push(newNode);\n    return newNode;\n}\n\n// Builds the class object for the VNode.\nfunction getClasses(element) {\n    var className = element.className;\n    var classes = {};\n    if (className !== null && className.length > 0) {\n        className.split(' ').forEach(function (className) {\n            classes[className] = true;\n        });\n    }\n    return classes;\n}\n\n// Builds the style object for the VNode.\nfunction getStyle(element) {\n    var style = element.style;\n    var styles = {};\n    for (var i = 0; i < style.length; i++) {\n        var name = style.item(i);\n        var transformedName = (0, _utils.transformName)(name);\n        styles[transformedName] = style.getPropertyValue(name);\n    }\n    return styles;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (html) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\n    var context = options.context || document;\n\n    // If there's nothing here, return null;\n    if (!html) {\n        return null;\n    }\n\n    // Maintain a list of created vnodes so we can call the create hook.\n    var createdVNodes = [];\n\n    // Parse the string into the AST and convert to VNodes.\n    var vnodes = convertNodes((0, _parse2.default)(html), createdVNodes, context);\n\n    var res = void 0;\n    if (!vnodes) {\n        // If there are no vnodes but there is string content, then the string\n        // must be just text or at least invalid HTML that we should treat as\n        // text (since the AST parser didn't find any well-formed HTML).\n        res = toVNode({ type: 'text', content: html }, createdVNodes, context);\n    } else if (vnodes.length === 1) {\n        // If there's only one root node, just return it as opposed to an array.\n        res = vnodes[0];\n    } else {\n        // Otherwise we have an array of VNodes, which we should return.\n        res = vnodes;\n    }\n\n    // Call the 'create' hook for each created node.\n    options.hooks && options.hooks.create && createdVNodes.forEach(function (node) {\n        options.hooks.create(node);\n    });\n    return res;\n};\n\nvar _parse = require('html-parse-stringify2/lib/parse');\n\nvar _parse2 = _interopRequireDefault(_parse);\n\nvar _h = require('snabbdom/h');\n\nvar _h2 = _interopRequireDefault(_h);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction convertNodes(nodes, createdVNodes, context) {\n    if (nodes instanceof Array && nodes.length > 0) {\n        return nodes.map(function (node) {\n            return toVNode(node, createdVNodes, context);\n        });\n    } else {\n        return undefined;\n    }\n}\n\nfunction toVNode(node, createdVNodes, context) {\n    var newNode = void 0;\n    if (node.type === 'text') {\n        newNode = (0, _utils.createTextVNode)(node.content, context);\n    } else {\n        newNode = (0, _h2.default)(node.name, buildVNodeData(node, context), convertNodes(node.children, createdVNodes, context));\n    }\n    createdVNodes.push(newNode);\n    return newNode;\n}\n\nfunction buildVNodeData(node, context) {\n    var data = {};\n    if (!node.attrs) {\n        return data;\n    }\n\n    var attrs = Object.keys(node.attrs).reduce(function (memo, name) {\n        if (name !== 'style' && name !== 'class') {\n            var val = (0, _utils.unescapeEntities)(node.attrs[name], context);\n            memo ? memo[name] = val : memo = _defineProperty({}, name, val);\n        }\n        return memo;\n    }, null);\n    if (attrs) {\n        data.attrs = attrs;\n    }\n\n    var style = parseStyle(node);\n    if (style) {\n        data.style = style;\n    }\n\n    var classes = parseClass(node);\n    if (classes) {\n        data.class = classes;\n    }\n\n    return data;\n}\n\nfunction parseStyle(node) {\n    try {\n        return node.attrs.style.split(';').reduce(function (memo, styleProp) {\n            var res = styleProp.split(':');\n            var name = (0, _utils.transformName)(res[0].trim());\n            if (name) {\n                var val = res[1].replace('!important', '').trim();\n                memo ? memo[name] = val : memo = _defineProperty({}, name, val);\n            }\n            return memo;\n        }, null);\n    } catch (e) {\n        return null;\n    }\n}\n\nfunction parseClass(node) {\n    try {\n        return node.attrs.class.split(' ').reduce(function (memo, className) {\n            className = className.trim();\n            if (className) {\n                memo ? memo[className] = true : memo = _defineProperty({}, className, true);\n            }\n            return memo;\n        }, null);\n    } catch (e) {\n        return null;\n    }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createTextVNode = createTextVNode;\nexports.transformName = transformName;\nexports.unescapeEntities = unescapeEntities;\n\nvar _vnode = require('snabbdom/vnode');\n\nvar _vnode2 = _interopRequireDefault(_vnode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createTextVNode(text, context) {\n    return (0, _vnode2.default)(undefined, undefined, undefined, unescapeEntities(text, context));\n}\n\nfunction transformName(name) {\n    // Replace -a with A to help camel case style property names.\n    name = name.replace(/-(\\w)/g, function _replace($1, $2) {\n        return $2.toUpperCase();\n    });\n    // Handle properties that start with a -.\n    var firstChar = name.charAt(0).toLowerCase();\n    return '' + firstChar + name.substring(1);\n}\n\n// Regex for matching HTML entities.\nvar entityRegex = new RegExp('&[a-z0-9]+;', 'gi');\n// Element for setting innerHTML for transforming entities.\nvar el = null;\n\nfunction unescapeEntities(text, context) {\n    // Create the element using the context if it doesn't exist.\n    if (!el) {\n        el = context.createElement('div');\n    }\n    return text.replace(entityRegex, function (entity) {\n        el.innerHTML = entity;\n        return el.textContent;\n    });\n}","\"use strict\";\nvar vnode_1 = require(\"./vnode\");\nvar is = require(\"./is\");\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (is.array(c)) {\n            children = c;\n        }\n        else if (is.primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (is.array(b)) {\n            children = b;\n        }\n        else if (is.primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (is.array(children)) {\n        for (i = 0; i < children.length; ++i) {\n            if (is.primitive(children[i]))\n                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i]);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_1.vnode(sel, data, children, text, undefined);\n}\nexports.h = h;\n;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = h;\n//# sourceMappingURL=h.js.map","\"use strict\";\nfunction createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.textContent = text;\n}\nfunction getTextContent(node) {\n    return node.textContent;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nexports.htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.htmlDomApi;\n//# sourceMappingURL=htmldomapi.js.map","\"use strict\";\nexports.array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\nexports.primitive = primitive;\n//# sourceMappingURL=is.js.map","\"use strict\";\nvar NamespaceURIs = {\n    \"xlink\": \"http://www.w3.org/1999/xlink\"\n};\nvar booleanAttrs = [\"allowfullscreen\", \"async\", \"autofocus\", \"autoplay\", \"checked\", \"compact\", \"controls\", \"declare\",\n    \"default\", \"defaultchecked\", \"defaultmuted\", \"defaultselected\", \"defer\", \"disabled\", \"draggable\",\n    \"enabled\", \"formnovalidate\", \"hidden\", \"indeterminate\", \"inert\", \"ismap\", \"itemscope\", \"loop\", \"multiple\",\n    \"muted\", \"nohref\", \"noresize\", \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"pauseonexit\", \"readonly\",\n    \"required\", \"reversed\", \"scoped\", \"seamless\", \"selected\", \"sortable\", \"spellcheck\", \"translate\",\n    \"truespeed\", \"typemustmatch\", \"visible\"];\nvar booleanAttrsDict = Object.create(null);\nfor (var i = 0, len = booleanAttrs.length; i < len; i++) {\n    booleanAttrsDict[booleanAttrs[i]] = true;\n}\nfunction updateAttrs(oldVnode, vnode) {\n    var key, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs, namespaceSplit;\n    if (!oldAttrs && !attrs)\n        return;\n    if (oldAttrs === attrs)\n        return;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        var cur = attrs[key];\n        var old = oldAttrs[key];\n        if (old !== cur) {\n            if (booleanAttrsDict[key]) {\n                if (cur) {\n                    elm.setAttribute(key, \"\");\n                }\n                else {\n                    elm.removeAttribute(key);\n                }\n            }\n            else {\n                namespaceSplit = key.split(\":\");\n                if (namespaceSplit.length > 1 && NamespaceURIs.hasOwnProperty(namespaceSplit[0])) {\n                    elm.setAttributeNS(NamespaceURIs[namespaceSplit[0]], key, cur);\n                }\n                else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n    // the other option is to remove all attributes with value == undefined\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\nexports.attributesModule = { create: updateAttrs, update: updateAttrs };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.attributesModule;\n//# sourceMappingURL=attributes.js.map","\"use strict\";\nfunction updateClass(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;\n    if (!oldClass && !klass)\n        return;\n    if (oldClass === klass)\n        return;\n    oldClass = oldClass || {};\n    klass = klass || {};\n    for (name in oldClass) {\n        if (!klass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        cur = klass[name];\n        if (cur !== oldClass[name]) {\n            elm.classList[cur ? 'add' : 'remove'](name);\n        }\n    }\n}\nexports.classModule = { create: updateClass, update: updateClass };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.classModule;\n//# sourceMappingURL=class.js.map","\"use strict\";\nfunction invokeHandler(handler, vnode, event) {\n    if (typeof handler === \"function\") {\n        // call function handler\n        handler.call(vnode, event, vnode);\n    }\n    else if (typeof handler === \"object\") {\n        // call handler with arguments\n        if (typeof handler[0] === \"function\") {\n            // special case for single argument for performance\n            if (handler.length === 2) {\n                handler[0].call(vnode, handler[1], event, vnode);\n            }\n            else {\n                var args = handler.slice(1);\n                args.push(event);\n                args.push(vnode);\n                handler[0].apply(vnode, args);\n            }\n        }\n        else {\n            // call multiple handlers\n            for (var i = 0; i < handler.length; i++) {\n                invokeHandler(handler[i]);\n            }\n        }\n    }\n}\nfunction handleEvent(event, vnode) {\n    var name = event.type, on = vnode.data.on;\n    // call event handler(s) if exists\n    if (on && on[name]) {\n        invokeHandler(on[name], vnode, event);\n    }\n}\nfunction createListener() {\n    return function handler(event) {\n        handleEvent(event, handler.vnode);\n    };\n}\nfunction updateEventListeners(oldVnode, vnode) {\n    var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = (vnode && vnode.elm), name;\n    // optimization for reused immutable handlers\n    if (oldOn === on) {\n        return;\n    }\n    // remove existing listeners which no longer used\n    if (oldOn && oldListener) {\n        // if element changed or deleted we remove all existing listeners unconditionally\n        if (!on) {\n            for (name in oldOn) {\n                // remove listener if element was changed or existing listeners removed\n                oldElm.removeEventListener(name, oldListener, false);\n            }\n        }\n        else {\n            for (name in oldOn) {\n                // remove listener if existing listener removed\n                if (!on[name]) {\n                    oldElm.removeEventListener(name, oldListener, false);\n                }\n            }\n        }\n    }\n    // add new listeners which has not already attached\n    if (on) {\n        // reuse existing listener or create new\n        var listener = vnode.listener = oldVnode.listener || createListener();\n        // update vnode for listener\n        listener.vnode = vnode;\n        // if element changed or added we add all needed listeners unconditionally\n        if (!oldOn) {\n            for (name in on) {\n                // add listener if element was changed or new listeners added\n                elm.addEventListener(name, listener, false);\n            }\n        }\n        else {\n            for (name in on) {\n                // add listener if new listener added\n                if (!oldOn[name]) {\n                    elm.addEventListener(name, listener, false);\n                }\n            }\n        }\n    }\n}\nexports.eventListenersModule = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: updateEventListeners\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.eventListenersModule;\n//# sourceMappingURL=eventlisteners.js.map","\"use strict\";\nfunction updateProps(oldVnode, vnode) {\n    var key, cur, old, elm = vnode.elm, oldProps = oldVnode.data.props, props = vnode.data.props;\n    if (!oldProps && !props)\n        return;\n    if (oldProps === props)\n        return;\n    oldProps = oldProps || {};\n    props = props || {};\n    for (key in oldProps) {\n        if (!props[key]) {\n            delete elm[key];\n        }\n    }\n    for (key in props) {\n        cur = props[key];\n        old = oldProps[key];\n        if (old !== cur && (key !== 'value' || elm[key] !== cur)) {\n            elm[key] = cur;\n        }\n    }\n}\nexports.propsModule = { create: updateProps, update: updateProps };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.propsModule;\n//# sourceMappingURL=props.js.map","\"use strict\";\nvar raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;\nvar nextFrame = function (fn) { raf(function () { raf(fn); }); };\nfunction setNextFrame(obj, prop, val) {\n    nextFrame(function () { obj[prop] = val; });\n}\nfunction updateStyle(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;\n    if (!oldStyle && !style)\n        return;\n    if (oldStyle === style)\n        return;\n    oldStyle = oldStyle || {};\n    style = style || {};\n    var oldHasDel = 'delayed' in oldStyle;\n    for (name in oldStyle) {\n        if (!style[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.removeProperty(name);\n            }\n            else {\n                elm.style[name] = '';\n            }\n        }\n    }\n    for (name in style) {\n        cur = style[name];\n        if (name === 'delayed') {\n            for (name in style.delayed) {\n                cur = style.delayed[name];\n                if (!oldHasDel || cur !== oldStyle.delayed[name]) {\n                    setNextFrame(elm.style, name, cur);\n                }\n            }\n        }\n        else if (name !== 'remove' && cur !== oldStyle[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.setProperty(name, cur);\n            }\n            else {\n                elm.style[name] = cur;\n            }\n        }\n    }\n}\nfunction applyDestroyStyle(vnode) {\n    var style, name, elm = vnode.elm, s = vnode.data.style;\n    if (!s || !(style = s.destroy))\n        return;\n    for (name in style) {\n        elm.style[name] = style[name];\n    }\n}\nfunction applyRemoveStyle(vnode, rm) {\n    var s = vnode.data.style;\n    if (!s || !s.remove) {\n        rm();\n        return;\n    }\n    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];\n    for (name in style) {\n        applied.push(name);\n        elm.style[name] = style[name];\n    }\n    compStyle = getComputedStyle(elm);\n    var props = compStyle['transition-property'].split(', ');\n    for (; i < props.length; ++i) {\n        if (applied.indexOf(props[i]) !== -1)\n            amount++;\n    }\n    elm.addEventListener('transitionend', function (ev) {\n        if (ev.target === elm)\n            --amount;\n        if (amount === 0)\n            rm();\n    });\n}\nexports.styleModule = {\n    create: updateStyle,\n    update: updateStyle,\n    destroy: applyDestroyStyle,\n    remove: applyRemoveStyle\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.styleModule;\n//# sourceMappingURL=style.js.map","\"use strict\";\nvar vnode_1 = require(\"./vnode\");\nvar is = require(\"./is\");\nvar htmldomapi_1 = require(\"./htmldomapi\");\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = vnode_1.default('', {}, [], undefined, undefined);\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\nvar h_1 = require(\"./h\");\nexports.h = h_1.h;\nvar thunk_1 = require(\"./thunk\");\nexports.thunk = thunk_1.thunk;\nfunction init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : htmldomapi_1.default;\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return vnode_1.default(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.id = sel.slice(hash + 1, dot);\n            if (dotIdx > 0)\n                elm.className = sel.slice(dot + 1).replace(/\\./g, ' ');\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (is.array(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (is.primitive(vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else {\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) {\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n        }\n        else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\nexports.init = init;\n//# sourceMappingURL=snabbdom.js.map","\"use strict\";\nvar h_1 = require(\"./h\");\nfunction copyToThunk(vnode, thunk) {\n    thunk.elm = vnode.elm;\n    vnode.data.fn = thunk.data.fn;\n    vnode.data.args = thunk.data.args;\n    thunk.data = vnode.data;\n    thunk.children = vnode.children;\n    thunk.text = vnode.text;\n    thunk.elm = vnode.elm;\n}\nfunction init(thunk) {\n    var cur = thunk.data;\n    var vnode = cur.fn.apply(undefined, cur.args);\n    copyToThunk(vnode, thunk);\n}\nfunction prepatch(oldVnode, thunk) {\n    var i, old = oldVnode.data, cur = thunk.data;\n    var oldArgs = old.args, args = cur.args;\n    if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n        copyToThunk(cur.fn.apply(undefined, args), thunk);\n    }\n    for (i = 0; i < args.length; ++i) {\n        if (oldArgs[i] !== args[i]) {\n            copyToThunk(cur.fn.apply(undefined, args), thunk);\n            return;\n        }\n    }\n    copyToThunk(oldVnode, thunk);\n}\nexports.thunk = function thunk(sel, key, fn, args) {\n    if (args === undefined) {\n        args = fn;\n        fn = key;\n        key = undefined;\n    }\n    return h_1.h(sel, {\n        key: key,\n        hook: { init: init, prepatch: prepatch },\n        fn: fn,\n        args: args\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.thunk;\n//# sourceMappingURL=thunk.js.map","\"use strict\";\nfunction vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children,\n        text: text, elm: elm, key: key };\n}\nexports.vnode = vnode;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = vnode;\n//# sourceMappingURL=vnode.js.map","var ClientRequest = require('./lib/request')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]","exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\nvar toArrayBuffer = require('to-arraybuffer')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else if (capability.vbArray && preferBinary) {\n\t\treturn 'text:vbarray'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || 'timeout' in opts) {\n\t\t// If the use of XHR should be preferred and includes preserving the 'content-type' header.\n\t\t// Force XHR to be used since the Fetch API does not yet support timeouts.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar self = this\n\treturn self._headers[name.toLowerCase()].value\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {\n\t\tif (capability.blobConstructor) {\n\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t}), {\n\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t})\n\t\t} else {\n\t\t\t// get utf8 string\n\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t}\n\t}\n\n\tif (self._mode === 'fetch') {\n\t\tvar headers = Object.keys(headersObj).map(function (name) {\n\t\t\treturn [headersObj[name].name, headersObj[name].value]\n\t\t})\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headers,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin'\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode.split(':')[0]\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('timeout' in opts) {\n\t\t\txhr.timeout = opts.timeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('timeout')\n\t\t\t}\n\t\t}\n\n\t\tObject.keys(headersObj).forEach(function (name) {\n\t\t\txhr.setRequestHeader(headersObj[name].name, headersObj[name].value)\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress()\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\tvar self = this\n\tself._destroyed = true\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\t// Currently, there isn't a way to truly abort a fetch.\n\t// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setTimeout = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'user-agent',\n\t'via'\n]\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function(header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\n\t\t// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tif (result.done) {\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function(err) {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {}\n\nIncomingMessage.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text:vbarray': // For IE9\n\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\tbreak\n\t\t\ttry {\n\t\t\t\t// This fails in IE8\n\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t} catch (e) {}\n\t\t\tif (response !== null) {\n\t\t\t\tself.push(new Buffer(response))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Falls through in IE8\t\n\t\tcase 'text':\n\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\tresponse = xhr.responseText\n\t\t\t} catch (e) {\n\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tself.push(null)\n\t}\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","module.exports = require('./lib/index');\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar root; /* global window */\n\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = (0, _ponyfill2['default'])(root);\nexports['default'] = result;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};","var unique = function(array){\n  for(var i = 0; i < array.length; i++){\n    if( array.indexOf(array[i], i+1) != -1 ){\n      array.splice(i,1);\n      i--;\n    }\n  }\n\n  return array;\n};\n\nvar slugify = function(text){\n  return text.toString().toLowerCase()\n      .replace(/\\s+/g, '-')           // Replace spaces with -\n      .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n      .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n      .replace(/^-+/, '')             // Trim - from start of text\n      .replace(/-+$/, '');            // Trim - from end of text\n};\n\nvar timer = (function(){\n  var timers = {};\n\n  var _timer = (function(){\n    return {\n      create: function(){\n        var start = null;\n        var end = null;\n        return {\n          start: function(){\n            start = new Date();\n            return start.toISOString();\n          },\n          stop: function(){\n            end = new Date();\n            return {\n              start: start.toISOString(),\n              end: end.toISOString(),\n              elapsed: (end - start) //ms\n            };\n          }\n        }\n      }\n    }\n  }());\n\n  return {\n    start: function(namespace){\n      var existingTimer = timers[namespace];\n      if(existingTimer){\n        // noop\n      } else {\n        timers[namespace] = _timer.create();\n        return timers[namespace].start();\n      }\n    },\n    stop: function(namespace){\n      var existingTimer = timers[namespace];\n      if(existingTimer){\n        var time = existingTimer.stop();\n        delete timers[namespace];\n        return time;\n      } else {\n        // noop\n      }\n    }\n  }\n\n}());\n\nexport {\n  unique,\n  slugify,\n  timer\n};","import $ from 'jquery'; // TODO: need to get rid of this after fixing resume progress\nimport { timer, slugify } from './helpers';\nimport { bus } from 'partybus';\nimport R from 'ramda';\nimport * as most from 'most';\nimport { async } from 'most-subject';\nimport TinCan from 'tincanjs';\n\nexport default function(CONFIG, isLocal, authUrl){\n\n  // ActivityID that is sent for the statement's object\n  const TC_COURSE_ID = CONFIG.full_url;\n\n  // CourseName for the activity\n  const TC_COURSE_NAME = { \"en-US\": CONFIG.activity_name };\n\n  // CourseDesc for the activity\n  const TC_COURSE_DESC = { \"en-US\": CONFIG.activity_name };\n\n  // Pre-configured LRSes that should receive data, added to what is included\n  // in the URL and/or passed to the constructor function.\n  //\n  // An array of objects where each object may have the following properties:\n  //\n  //    endpoint: (including trailing slash '/')\n  //    auth:\n  //    allowFail: (boolean, default true)\n  //\n  // TC_RECORD_STORES = [\n  //   {\n  //     endpoint: \"https://cloud.scorm.com/ScormEngineInterface/TCAPI/public/\",\n  //     auth:     \"Basic VGVzdFVzZXI6cGFzc3dvcmQ=\"\n  //   }\n  // ];\n\n  const Tincan = {};\n\n  Tincan.CourseActivity = {\n    id: TC_COURSE_ID,\n    definition: {\n      type: \"http://adlnet.gov/expapi/activities/course\",\n      name: TC_COURSE_NAME,\n      description: TC_COURSE_DESC\n    }\n  };\n\n  Tincan.getContext = function (parentActivityId, isAssessment) {\n    //isAssessment = typeof isAssessment !== 'undefined' ? isAssessment : false;\n    //var ctx = {\n    //  contextActivities: {\n    //    grouping: [\n    //      {\n    //        id: Tincan.CourseActivity.id\n    //      },\n    //      {\n    //        id: \"http://id.tincanapi.com/activity/tincan-prototypes\"\n    //      }\n    //    ],\n    //    category: [\n    //      {\n    //        id: \"http://id.tincanapi.com/recipe/tincan-prototypes/golf/1\",\n    //        definition: {\n    //          type: \"http://id.tincanapi.com/activitytype/recipe\"\n    //        }\n    //      },\n    //      {\n    //        id: \"http://id.tincanapi.com/activity/tincan-prototypes/elearning\",\n    //        definition: {\n    //          type: \"http://id.tincanapi.com/activitytype/source\",\n    //          name: {\n    //            \"en-US\": \"E-learning course\"\n    //          },\n    //          description: {\n    //            \"en-US\": \"An e-learning course built using the golf prototype framework.\"\n    //          }\n    //        }\n    //      }\n    //    ]\n    //  }\n    //};\n    //if (parentActivityId !== undefined && parentActivityId !== null) {\n    //  ctx.contextActivities.parent = {\n    //    id: parentActivityId\n    //  };\n    //}\n    //if (isAssessment) {\n    //  ctx.contextActivities.grouping.push({\n    //    id: Tincan.CourseActivity.id + \"/GolfAssessment\"\n    //  });\n    //}\n    var ctx = {};\n    return ctx;\n  };\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //// https://github.com/RusticiSoftware/TinCanJS                                                             ////\n  //// http://rusticisoftware.github.io/TinCanJS                                                               ////\n  //// http://rusticisoftware.github.io/TinCanJS/doc/api/latest/classes/TinCan.LRS.html#method_queryStatements ////\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var tincan = new TinCan({\n    url: authUrl || window.location.href,\n    activity: Tincan.CourseActivity\n  });\n\n  var BookmarkingTracking = function () {\n    this.questionsAnswered = {};\n    this.completionState = [];\n    this.currentPage = 0;\n    this.startTimeStamp = new Date();\n    this.startAttemptDuration = 0;\n    this.attemptComplete = false;\n  };\n\n  BookmarkingTracking.prototype = {\n    initFromBookmark: function (bookmark) {\n      // this.setPage(parseInt(bookmark.location, 10));\n      // this.setStartDuration(bookmark.attemptDuration);\n      // this.getCompletion(bookmark.attemptComplete);\n      if (bookmark && bookmark.completionState) {\n        this.completionState = bookmark.completionState;\n        $(document).trigger('resumeProgress', [this.completionState])\n      }\n    },\n    reset: function () {\n      this.setPage(0);\n      this.setStartDuration(0);\n      this.setCompletion(false);\n    },\n    save: function (callback) {\n      var bookmarking = {\n        location: this.currentPage,\n        attemptDuration: this.getAttemptDuration(),\n        attemptComplete: this.attemptComplete,\n        questionsAnswered: this.questionsAnswered,\n        completionState: this.completionState\n      };\n      tincan.setState(\"bookmarking-data\", bookmarking, {\n        contentType: \"application/json\",\n        overwriteJSON: false,\n        callback: callback\n      });\n    },\n    get: function (callback) {\n      var stateResult = tincan.getState(\"bookmarking-data\", {\n        callback: function(stateResult){\n          var stateResult = stateResult || {};\n          if (stateResult.err === null && stateResult.state !== null && stateResult.state.contents !== \"\") {\n            callback(stateResult.state.contents);\n          } else {\n            callback(null);\n          }\n        }\n      });\n    },\n    setStartDuration: function (duration) {\n      this.startAttemptDuration = duration;\n    },\n    setPage: function (page) {\n      this.currentPage = page;\n      return true;\n    },\n    getPage: function () {\n      return this.currentPage;\n    },\n    incrementPage: function () {\n      this.currentPage++;\n    },\n    decrementPage: function () {\n      this.currentPage--;\n    },\n    setCompletion: function (completion) {\n      this.attemptComplete = completion;\n      return true;\n    },\n    getCompletion: function (completion) {\n      return this.attemptComplete;\n    },\n    getAttemptDuration: function () {\n      return this.startAttemptDuration + this.getSessionDuration();\n    },\n    getSessionDuration: function () {\n      return Math.abs((new Date()) - this.startTimeStamp);\n    },\n    setAttemptState: function (state) {\n      this.completionState = state;\n    },\n    getAttemptState: function () {\n      return completionState;\n    },\n    setQuestionsAnswered: function (questionTitle, questionState) {\n      this.questionsAnswered[questionTitle] = questionState;\n    },\n    getQuestionsAnswered: function () {\n      return this.questionsAnswered;\n    }\n  };\n\n  var bookmarkingData = new BookmarkingTracking();\n\n  ////////////////////////////////////\n  //////////////////////// ACTIONS //\n  //////////////////////////////////\n\n  const doStart = function(){\n    const subject = async();\n\n    var statements = [];\n\n    var initializedStatement = {\n      verb: {\n        id: \"http://adlnet.gov/expapi/verbs/initialized\",\n        display: {\n          \"en-US\": \"initialized\"\n        }\n      },\n      context: Tincan.getContext(),\n      result: {\n        duration: \"PT0S\"\n      }\n    };\n\n    var attemptedStatement = {\n      verb: {\n        id: \"http://adlnet.gov/expapi/verbs/attempted\",\n        display: {\n          \"en-US\": \"attempted\"\n        }\n      },\n      context: Tincan.getContext(),\n      result: {\n        duration: \"PT0S\"\n      }\n    };\n\n    statements.push(initializedStatement);\n\n    //get activity_id bookmark if it exists\n    bookmarkingData.get(function(bookmark){\n\n      if (bookmark !== null) {\n\n        $.confirm({\n          content: 'Do you want to resume where you left off?',\n          confirmButton: 'YES',\n          cancelButton: 'NO',\n          confirm: function () {\n            bookmarkingData.initFromBookmark(bookmark);\n\n            if (!bookmarkingData.getCompletion()) {\n              var resumedStatement = {\n                verb: {\n                  id: \"http://adlnet.gov/expapi/verbs/resumed\",\n                  display: {\n                    \"en-US\": \"resumed\"\n                  }\n                },\n                context: Tincan.getContext(),\n                result: {\n                  duration: TinCan.Utils.convertMillisecondsToISO8601Duration(bookmark.attemptDuration)\n                }\n              };\n              statements.push(resumedStatement);\n            }\n          },\n          cancel: function () {\n            bookmarkingData.reset();\n\n            //start new attempt\n            statements.push(attemptedStatement);\n            bookmarkingData.save(function(err, xhr){});\n          }\n        });\n\n      } else {\n        // if there isn't a stored bookmark, start the user at the first page\n        bookmarkingData.setPage(0);\n        statements.push(attemptedStatement);\n      }\n\n      tincan.sendStatements(statements, function(response, data){\n        var err = response.err;\n        if(err){ subject.error(err).complete(); } else { subject.next(data).complete(); }\n      });\n\n    });\n\n    return subject;\n  };\n\n  const storeAttemptState = function({ completionState }){\n    const subject = async();\n\n    bookmarkingData.setAttemptState(completionState);\n    bookmarkingData.save(function(err, xhr){\n      if(err){ subject.error(err).complete(); } else { subject.next(xhr.response).complete(); }\n    });\n\n    return subject;\n  };\n\n  const doComplete = function(){\n    const subject = async();\n\n    var statements = [];\n\n    var completedStatement = {\n      verb: {\n        id: \"http://adlnet.gov/expapi/verbs/completed\",\n        display: {\n          \"en-US\": \"completed\"\n        }\n      },\n      context: Tincan.getContext(),\n      result: {\n        completion: true,\n        success: true,\n//            \"score\": {\n//              \"scaled\": 0.9,\n//              \"raw\": 90,\n//              \"min\": 0,\n//              \"max\": 100\n//            },\n        duration: \"PT0S\"\n      }\n    };\n\n    statements.push(completedStatement);\n\n    tincan.sendStatements(statements, function(response, data){\n      var err = response.err;\n      if(err){ subject.error(err).complete(); } else { subject.next(data).complete(); }\n    });\n\n    return subject;\n  };\n\n  //////////////\n  // TRACKING //\n  //////////////\n\n  const doTracking = function(type, info){\n    const subject = async();\n\n    var statements = [];\n\n    var createObject = function (info) {\n      if (type === 'access_course') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": info.name},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": 'http://adlnet.gov/expapi/activities/course'\n          },\n          \"name\": info.name,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\n              \"name\": {\"en-US\": \"action\"},\n              \"description\": {\"en-US\": \"access_course\"}\n            },\n            \"http://scitent.com/xapi/name\": {\"name\": {\"en-US\": \"name\"}, \"description\": {\"en-US\": info.name}},\n            \"http://scitent.com/xapi/start\": {\"name\": {\"en-US\": \"start\"}, \"description\": {\"en-US\": info.start}}\n          }\n        }\n      }\n\n      if (type === 'leave_course') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": info.name},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": 'http://adlnet.gov/expapi/activities/course'\n          },\n          \"name\": info.name,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\"name\": {\"en-US\": \"action\"}, \"description\": {\"en-US\": \"leave_course\"}},\n            \"http://scitent.com/xapi/name\": {\"name\": {\"en-US\": \"name\"}, \"description\": {\"en-US\": info.name}},\n            \"http://scitent.com/xapi/end\": {\"name\": {\"en-US\": \"end\"}, \"description\": {\"en-US\": info.end.end}},\n            \"http://scitent.com/xapi/elapsed\": {\n              \"name\": {\"en-US\": \"elapsed\"},\n              \"description\": {\"en-US\": info.end.elapsed}\n            }\n          }\n        }\n      }\n\n      if (type === 'access_section') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": info.name},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": (info.type === 'exercise' ? 'http://adlnet.gov/expapi/activities/assessment' : 'http://adlnet.gov/expapi/activities/lesson')\n          },\n          \"name\": info.name,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\n              \"name\": {\"en-US\": \"action\"},\n              \"description\": {\"en-US\": \"access_section\"}\n            },\n            \"http://scitent.com/xapi/name\": {\"name\": {\"en-US\": \"name\"}, \"description\": {\"en-US\": info.name}},\n            \"http://scitent.com/xapi/start\": {\"name\": {\"en-US\": \"start\"}, \"description\": {\"en-US\": info.start}}\n          }\n        }\n      }\n\n      if (type === 'leave_section') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": info.name},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": (info.type === 'exercise' ? 'http://adlnet.gov/expapi/activities/assessment' : 'http://adlnet.gov/expapi/activities/lesson')\n          },\n          \"name\": info.name,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\n              \"name\": {\"en-US\": \"action\"},\n              \"description\": {\"en-US\": \"leave_section\"}\n            },\n            \"http://scitent.com/xapi/name\": {\"name\": {\"en-US\": \"name\"}, \"description\": {\"en-US\": info.name}},\n            \"http://scitent.com/xapi/end\": {\"name\": {\"en-US\": \"end\"}, \"description\": {\"en-US\": info.end.end}},\n            \"http://scitent.com/xapi/elapsed\": {\n              \"name\": {\"en-US\": \"elapsed\"},\n              \"description\": {\"en-US\": info.end.elapsed}\n            }\n          }\n        }\n      }\n\n      if (type === 'start_video') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": (info.section + ' - ' + info.src)},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": 'http://adlnet.gov/expapi/activities/media'\n          },\n          \"name\": info.src,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\"name\": {\"en-US\": \"action\"}, \"description\": {\"en-US\": \"start_video\"}},\n            \"http://scitent.com/xapi/src\": {\"name\": {\"en-US\": \"src\"}, \"description\": {\"en-US\": info.src}},\n            \"http://scitent.com/xapi/currentTime\": {\n              \"name\": {\"en-US\": \"currentTime\"},\n              \"description\": {\"en-US\": info.currentTime}\n            },\n            \"http://scitent.com/xapi/start\": {\"name\": {\"en-US\": \"start\"}, \"description\": {\"en-US\": info.start}}\n          }\n        }\n      }\n\n      if (type === 'end_video') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": {\"en-US\": (info.section + ' - ' + info.src)},\n            \"description\": {\"en-US\": info.courseName},\n            \"type\": 'http://adlnet.gov/expapi/activities/media'\n          },\n          \"name\": info.src,\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\"name\": {\"en-US\": \"action\"}, \"description\": {\"en-US\": \"end_video\"}},\n            \"http://scitent.com/xapi/src\": {\"name\": {\"en-US\": \"src\"}, \"description\": {\"en-US\": info.src}},\n            \"http://scitent.com/xapi/currentTime\": {\n              \"name\": {\"en-US\": \"currentTime\"},\n              \"description\": {\"en-US\": info.currentTime}\n            },\n            \"http://scitent.com/xapi/end\": {\"name\": {\"en-US\": \"end\"}, \"description\": {\"en-US\": info.end.end}},\n            \"http://scitent.com/xapi/elapsed\": {\n              \"name\": {\"en-US\": \"elapsed\"},\n              \"description\": {\"en-US\": info.end.elapsed}\n            }\n          }\n        }\n      }\n\n      if (type === 'access_help') {\n        return {\n          \"id\": TC_COURSE_ID,\n          \"objectType\": \"Activity\",\n          \"definition\": {\n            \"name\": \"help button\",\n            \"description\": {\"en-US\": info.courseName}\n          },\n          \"extensions\": {\n            \"http://scitent.com/xapi/action\": {\"name\": {\"en-US\": \"action\"}, \"description\": {\"en-US\": \"access_help\"}}\n          }\n        }\n      }\n\n    };\n\n    var createResult = function (info) {\n      if (type === 'access_course') {\n        return {};\n      }\n\n      if (type === 'leave_course') {\n        return {\n          \"duration\": TinCan.Utils.convertMillisecondsToISO8601Duration(info.end.elapsed)\n        }\n      }\n\n      if (type === 'access_section') {\n        return {};\n      }\n\n      if (type === 'leave_section') {\n        return {\n          \"duration\": TinCan.Utils.convertMillisecondsToISO8601Duration(info.end.elapsed)\n        }\n      }\n\n      if (type === 'start_video') {\n        return {};\n      }\n\n      if (type === 'end_video') {\n        return {\n          \"duration\": TinCan.Utils.convertMillisecondsToISO8601Duration(info.end.elapsed)\n        }\n      }\n\n      if (type === 'access_help') {\n        return {};\n      }\n\n    };\n\n    var interactionStatement = {\n      verb: {\n        id: \"http://adlnet.gov/expapi/activities/interaction\",\n        display: {\n          \"en-US\": \"interacted with\"\n        }\n      },\n      result: createResult(info),\n      object: createObject(info),\n      context: Tincan.getContext()\n    };\n\n    statements.push(interactionStatement);\n\n    tincan.sendStatements(statements, function(response, data){\n      var err = response.err;\n      if(err){ subject.error(err).complete(); } else { subject.next(data).complete(); }\n    });\n\n    return subject;\n  };\n\n  const accessCourse = function({ courseName, name }){\n    // courseName :: [String] activity being accessed\n    // name :: [String] identifier for timer start/stop\n\n    var start = timer.start(slugify(name));\n    return doTracking('access_course', {courseName: courseName, name: name, start: start});\n  };\n\n  const leaveCourse = function({ courseName, name }){\n    // courseName :: [String] activity being accessed\n    // name :: [String] identifier for timer start/stop\n\n    var end = timer.stop(slugify(name));\n    return doTracking('leave_course', {courseName: courseName, name: name, end: end});\n  };\n\n  const accessSection = function({ courseName, name, type }){\n    // courseName :: [String] activity being accessed\n    // name :: [String] identifier for timer start/stop\n    // type :: [String] type of section (ex. exercise, page, ...)\n\n    var start = timer.start(slugify(name));\n    return doTracking('access_section', {courseName: courseName, name: name, type: type, start: start});\n  };\n\n  const leaveSection = function({ courseName, name, type }){\n    // courseName :: [String] activity being accessed\n    // name :: [String] identifier for timer start/stop\n    // type :: [String] type of section (ex. exercise, page, ...)\n\n    var end = timer.stop(slugify(name));\n    return doTracking('leave_section', {courseName: courseName, name: name, type: type, end: end});\n  };\n\n  const startVideo = function({ courseName, src, currentTime, section }){\n    // courseName :: [String] activity being accessed\n    // src :: [Uri] video src\n    // currentTime :: [String] current time video is at\n    // section :: [String] section identifier\n\n    var start = timer.start(slugify(src));\n    return doTracking('start_video', {\n      courseName: courseName,\n      src: src,\n      currentTime: currentTime,\n      section: section,\n      start: start\n    });\n  };\n\n  const stopVideo = function({ courseName, src, currentTime, section }){\n    // courseName :: [String] activity being accessed\n    // src :: [Uri] video src\n    // currentTime :: [String] current time video is at\n    // section :: [String] section identifier\n\n    var end = timer.stop(slugify(src));\n    return doTracking('end_video', {\n      courseName: courseName,\n      src: src,\n      currentTime: currentTime,\n      section: section,\n      end: end\n    });\n  };\n\n  const accessHelp = function({ courseName }){\n    // courseName :: [String] activity being accessed\n\n    return doTracking('access_help', {courseName: courseName});\n  };\n\n  //////////\n  // POLL //\n  //////////\n\n  // poll type action\n  var pollVerb = 'http://adlnet.gov/expapi/verbs/polled';\n  var pollDisplay = 'polled';\n\n  // poll identifier\n  var pollIdExtension = 'http://adlnet.gov/expapi/activities/poll';\n\n  const setPollResponse = function({ identifier, type, question, response }){\n    // identifier :: [String] unique poll ref\n    // type :: [String] type of poll (ex. radio, text, etc...)\n    // question :: [String] question text\n    // response :: [String] response text\n\n    const subject = async();\n\n    var statements = [];\n\n    var createObject = function () {\n      return {\n        \"id\": TC_COURSE_ID,\n        \"objectType\": \"Activity\",\n        \"definition\": {\n          \"name\": {\"en-US\": question},\n          \"description\": {\"en-US\": TC_COURSE_NAME[\"en-US\"]},\n          \"type\": pollIdExtension + '/' + type\n        },\n        \"name\": identifier\n      }\n    };\n\n    var createResult = function () {\n      return {\n        \"response\": response\n      }\n    };\n\n    var context = {};\n\n    var extensions = {};\n\n    extensions[pollIdExtension] = identifier;\n\n    context['extensions'] = extensions;\n\n    var interactionStatement = {\n      verb: {\n        id: pollVerb,\n        display: {\n          \"en-US\": pollDisplay\n        }\n      },\n      result: createResult(),\n      object: createObject(),\n      context: context\n    };\n\n    statements.push(interactionStatement);\n\n    tincan.sendStatements(statements, function(response, data){\n      var err = response.err;\n      if(err){ subject.error(err).complete(); } else { subject.next(data).complete(); }\n    });\n\n    return subject;\n  };\n\n  // TODO: DRY these two into single function with choice for one or all algorithm\n\n  const getPollResponseData = function({ identifier }){\n    const subject = async();\n\n    //TODO: extract AJAX into function that takes params and builds query string like `tincan.getStatements`...\n\n    var query = '?activity=' + tincan.activity.id + '&verb=' + pollVerb;\n\n    var handlePollData = function (result) {\n      var pollId = identifier;\n      var thisActor = function (statement) {\n        return statement['actor']['account'] ? (statement['actor']['account']['name'] === tincan.actor.account.name) : (statement['actor']['mbox'] === tincan.actor.mbox)\n      };\n      var statements = result['statements'].filter(function (statement) {\n        return statement['context']['extensions'] && statement['context']['extensions'][pollIdExtension] === pollId\n      });\n      var statement = statements.filter(thisActor);\n      subject.next(statement.length === 0 ? null : statement[0]['result']['response']).complete();\n    };\n\n    $.ajax({\n      url: tincan.recordStores[0]['endpoint'] + \"statements\" + query,\n      type: \"GET\",\n      beforeSend: function (xhr) {\n        xhr.setRequestHeader('Authorization', tincan.recordStores[0]['auth']);\n      },\n      success: handlePollData\n    });\n\n    return subject;\n  };\n\n  const getPollResponsesData = function({ identifier }){\n    const subject = async();\n\n    //TODO: extract AJAX into function that takes params and builds query string like `tincan.getStatements`...\n\n    var query = '?activity=' + tincan.activity.id + '&verb=' + pollVerb;\n\n    var handlePollData = function (result) {\n      var pollId = identifier;\n      var thisActor = function (statement) {\n        return statement['actor']['account'] ? (statement['actor']['account']['name'] === tincan.actor.account.name) : (statement['actor']['mbox'] === tincan.actor.mbox)\n      };\n      var statements = result['statements'].filter(function (statement) {\n        return statement['context']['extensions'] && statement['context']['extensions'][pollIdExtension] === pollId\n      });\n      var statement = statements.filter(thisActor);\n      subject.next(statements.map(function (statement) { return {value: statement['result']['response']} })).complete();\n    };\n\n    $.ajax({\n      url: tincan.recordStores[0]['endpoint'] + \"statements\" + query,\n      type: \"GET\",\n      beforeSend: function (xhr) {\n        xhr.setRequestHeader('Authorization', tincan.recordStores[0]['auth']);\n      },\n      success: handlePollData\n    });\n\n    return subject;\n  };\n\n  ////////////////\n  // ACTIONPLAN //\n  ////////////////\n\n  // action plan type action\n  var actionPlanVerb = 'http://adlnet.gov/expapi/verbs/actionPlanUpdated';\n  var actionPlanDisplay = 'updated action plan';\n\n  // action plan identifier\n  var actionPlanIdExtension = 'http://adlnet.gov/expapi/activities/actionPlan';\n  var actionPlanResponsesExtension = 'http://adlnet.gov/expapi/activities/actionPlanResponses';\n\n  const setActionplanData = function({ takeaway }){\n    // takeaway :: { identifier: { 'qId': { text: '', context: [], value: '' }, 'qId2': { ... }, ... } }\n\n    var identifier = R.compose(R.head, R.keys)(takeaway);\n    var responses = R.compose(R.head, R.values)(takeaway);\n\n    const subject = async();\n\n    var statements = [];\n\n    var createObject = function () {\n      return {\n        \"id\": TC_COURSE_ID,\n        \"objectType\": \"Activity\",\n        \"definition\": {\n          \"name\": {\"en-US\": identifier },\n          \"description\": {\"en-US\": TC_COURSE_NAME[\"en-US\"]},\n          \"type\": actionPlanIdExtension\n        },\n        \"name\": identifier\n      }\n    };\n\n    var createResult = function () {\n      return {}\n    };\n\n    var context = {};\n\n    var extensions = {};\n\n    extensions[actionPlanIdExtension] = identifier;\n\n    extensions[actionPlanResponsesExtension] = responses;\n\n    context['extensions'] = extensions;\n\n    var interactionStatement = {\n      verb: {\n        id: actionPlanVerb,\n        display: {\n          \"en-US\": actionPlanDisplay\n        }\n      },\n      result: createResult(),\n      object: createObject(),\n      context: context\n    };\n\n    statements.push(interactionStatement);\n\n    tincan.sendStatements(statements, function(response, data){\n      var err = response.err;\n      if(err){ subject.error(err).complete(); } else { subject.next(data).complete(); }\n    });\n\n    return subject;\n  };\n\n  const getActionplanData = function({ identifier }){\n    const subject = async();\n\n    //TODO: extract AJAX into function that takes params and builds query string like `tincan.getStatements`...\n\n    var query = '?activity=' + tincan.activity.id + '&verb=' + actionPlanVerb;\n\n    var handleActionplanData = function(result){\n      var actionplanId = identifier;\n      var thisActor = function(statement) {\n        return statement['actor']['account'] ? (statement['actor']['account']['name'] === tincan.actor.account.name) : (statement['actor']['mbox'] === tincan.actor.mbox)\n      };\n      var statements = result['statements'].filter(thisActor).filter(function(statement) {\n        return statement['context']['extensions'] && statement['context']['extensions'][actionPlanIdExtension] === actionplanId\n      }).sort(function(a,b){\n        // Turn your strings into dates, and then subtract them\n        // to get a value that is either negative, positive, or zero.\n        return new Date(b.timestamp) - new Date(a.timestamp);\n      });\n\n      var recentStatement = R.head(statements);\n\n      //var id = R.pathOr(null, ['context', 'extensions', actionPlanIdExtension], recentStatement);\n      var body = R.pathOr({}, ['context', 'extensions', actionPlanResponsesExtension], recentStatement);\n\n      subject.next(body).complete();\n\n    };\n\n    $.ajax({\n      url: tincan.recordStores[0]['endpoint'] + \"statements\" + query,\n      type: \"GET\",\n      beforeSend: function (xhr) {\n        xhr.setRequestHeader('Authorization', tincan.recordStores[0]['auth']);\n      },\n      success: handleActionplanData\n    });\n\n    return subject;\n  };\n\n  /////////\n  // API //\n  /////////\n\n  const local = function(methodString){\n    return (params) => most.just({ [methodString]: params }).tap((result) => { console.log('local', result) });\n  };\n\n  const api = {\n    start: isLocal ? local('☂ doStart') : doStart,\n    storeAttemptState: isLocal ? local('☂ storeAttemptState') : storeAttemptState,\n    complete: isLocal ? local('☂ doComplete:') : doComplete,\n    accessCourse: isLocal ? local('☂ accessCourse:') : accessCourse,\n    leaveCourse: isLocal ? local('☂ leaveCourse:') : leaveCourse,\n    accessSection: isLocal ? local('☂ accessSection:') : accessSection,\n    leaveSection: isLocal ? local('☂ leaveSection:') : leaveSection,\n    startVideo: isLocal ? local('☂ startVideo:') : startVideo,\n    stopVideo: isLocal ? local('☂ stopVideo:') : stopVideo,\n    accessHelp: isLocal ? local('☂ accessHelp:') : accessHelp,\n    setPollResponse: isLocal ? local('☂ setPollResponse') : setPollResponse,\n    getPollResponseData: isLocal ? local('☂ getPollResponseData') : getPollResponseData,\n    getPollResponsesData: isLocal ? local('☂ getPollResponsesData') : getPollResponsesData,\n    setActionplanData: isLocal ? local('☂ setActionplanData') : setActionplanData,\n    getActionplanData: isLocal ? local('☂ getActionplanData') : getActionplanData\n  };\n\n  bus.on('tincan::start', () => { api.start().drain(); });\n  bus.on('tincan::storeAttemptState', (params) => { api.storeAttemptState(params).drain() });\n  bus.on('tincan::complete', () => { api.complete().drain() });\n\n  bus.emit('tincan::ready');\n\n  return api;\n\n};","\"0.50.0\";\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(e,m){var p={},j=p.lib={},l=function(){},f=j.Base={extend:function(a){l.prototype=this;var c=new l;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nn=j.WordArray=f.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=m?c:4*a.length},toString:function(a){return(a||h).stringify(this)},concat:function(a){var c=this.words,q=a.words,d=this.sigBytes;a=a.sigBytes;this.clamp();if(d%4)for(var b=0;b<a;b++)c[d+b>>>2]|=(q[b>>>2]>>>24-8*(b%4)&255)<<24-8*((d+b)%4);else if(65535<q.length)for(b=0;b<a;b+=4)c[d+b>>>2]=q[b>>>2];else c.push.apply(c,q);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=e.ceil(c/4)},clone:function(){var a=f.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*e.random()|0);return new n.init(c,a)}}),b=p.enc={},h=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++){var f=c[d>>>2]>>>24-8*(d%4)&255;b.push((f>>>4).toString(16));b.push((f&15).toString(16))}return b.join(\"\")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d+=2)b[d>>>3]|=parseInt(a.substr(d,\n2),16)<<24-4*(d%8);return new n.init(b,c/2)}},g=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++)b.push(String.fromCharCode(c[d>>>2]>>>24-8*(d%4)&255));return b.join(\"\")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d++)b[d>>>2]|=(a.charCodeAt(d)&255)<<24-8*(d%4);return new n.init(b,c)}},r=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(g.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return g.parse(unescape(encodeURIComponent(a)))}},\nk=j.BufferedBlockAlgorithm=f.extend({reset:function(){this._data=new n.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=r.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,b=c.words,d=c.sigBytes,f=this.blockSize,h=d/(4*f),h=a?e.ceil(h):e.max((h|0)-this._minBufferSize,0);a=h*f;d=e.min(4*a,d);if(a){for(var g=0;g<a;g+=f)this._doProcessBlock(b,g);g=b.splice(0,a);c.sigBytes-=d}return new n.init(g,d)},clone:function(){var a=f.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});j.Hasher=k.extend({cfg:f.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){k.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,b){return(new a.init(b)).finalize(c)}},_createHmacHelper:function(a){return function(b,f){return(new s.HMAC.init(a,\nf)).finalize(b)}}});var s=p.algo={};return p}(Math);\n(function(){var e=CryptoJS,m=e.lib,p=m.WordArray,j=m.Hasher,l=[],m=e.algo.SHA1=j.extend({_doReset:function(){this._hash=new p.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(f,n){for(var b=this._hash.words,h=b[0],g=b[1],e=b[2],k=b[3],j=b[4],a=0;80>a;a++){if(16>a)l[a]=f[n+a]|0;else{var c=l[a-3]^l[a-8]^l[a-14]^l[a-16];l[a]=c<<1|c>>>31}c=(h<<5|h>>>27)+j+l[a];c=20>a?c+((g&e|~g&k)+1518500249):40>a?c+((g^e^k)+1859775393):60>a?c+((g&e|g&k|e&k)-1894007588):c+((g^e^\nk)-899497514);j=k;k=e;e=g<<30|g>>>2;g=h;h=c}b[0]=b[0]+h|0;b[1]=b[1]+g|0;b[2]=b[2]+e|0;b[3]=b[3]+k|0;b[4]=b[4]+j|0},_doFinalize:function(){var f=this._data,e=f.words,b=8*this._nDataBytes,h=8*f.sigBytes;e[h>>>5]|=128<<24-h%32;e[(h+64>>>9<<4)+14]=Math.floor(b/4294967296);e[(h+64>>>9<<4)+15]=b;f.sigBytes=4*e.length;this._process();return this._hash},clone:function(){var e=j.clone.call(this);e._hash=this._hash.clone();return e}});e.SHA1=j._createHelper(m);e.HmacSHA1=j._createHmacHelper(m)})();\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(h,s){var f={},t=f.lib={},g=function(){},j=t.Base={extend:function(a){g.prototype=this;var c=new g;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nq=t.WordArray=j.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||u).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=j.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new q.init(c,a)}}),v=f.enc={},u=v.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,\n2),16)<<24-4*(b%8);return new q.init(d,c/2)}},k=v.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new q.init(d,c)}},l=v.Utf8={stringify:function(a){try{return decodeURIComponent(escape(k.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return k.parse(unescape(encodeURIComponent(a)))}},\nx=t.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=l.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var m=0;m<a;m+=e)this._doProcessBlock(d,m);m=d.splice(0,a);c.sigBytes-=b}return new q.init(m,b)},clone:function(){var a=j.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});t.Hasher=x.extend({cfg:j.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){x.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new w.HMAC.init(a,\nd)).finalize(c)}}});var w=f.algo={};return f}(Math);\n(function(h){for(var s=CryptoJS,f=s.lib,t=f.WordArray,g=f.Hasher,f=s.algo,j=[],q=[],v=function(a){return 4294967296*(a-(a|0))|0},u=2,k=0;64>k;){var l;a:{l=u;for(var x=h.sqrt(l),w=2;w<=x;w++)if(!(l%w)){l=!1;break a}l=!0}l&&(8>k&&(j[k]=v(h.pow(u,0.5))),q[k]=v(h.pow(u,1/3)),k++);u++}var a=[],f=f.SHA256=g.extend({_doReset:function(){this._hash=new t.init(j.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],m=b[2],h=b[3],p=b[4],j=b[5],k=b[6],l=b[7],n=0;64>n;n++){if(16>n)a[n]=\nc[d+n]|0;else{var r=a[n-15],g=a[n-2];a[n]=((r<<25|r>>>7)^(r<<14|r>>>18)^r>>>3)+a[n-7]+((g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10)+a[n-16]}r=l+((p<<26|p>>>6)^(p<<21|p>>>11)^(p<<7|p>>>25))+(p&j^~p&k)+q[n]+a[n];g=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&m^f&m);l=k;k=j;j=p;p=h+r|0;h=m;m=f;f=e;e=r+g|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+m|0;b[3]=b[3]+h|0;b[4]=b[4]+p|0;b[5]=b[5]+j|0;b[6]=b[6]+k|0;b[7]=b[7]+l|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;\nd[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=g.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=g._createHelper(f);s.HmacSHA256=g._createHmacHelper(f)})(Math);\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n\n/*!\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\nTODO:\n\n* Add statement queueing\n\n@module TinCan\n**/\nvar TinCan;\n\n(function () {\n    \"use strict\";\n    var _reservedQSParams = {\n        //\n        // these are TC spec reserved words that may end up in queries to the endpoint\n        //\n        statementId:       true,\n        voidedStatementId: true,\n        verb:              true,\n        object:            true,\n        registration:      true,\n        context:           true,\n        actor:             true,\n        since:             true,\n        until:             true,\n        limit:             true,\n        authoritative:     true,\n        sparse:            true,\n        instructor:        true,\n        ascending:         true,\n        continueToken:     true,\n        agent:             true,\n        activityId:        true,\n        stateId:           true,\n        profileId:         true,\n\n        //\n        // these are suggested by the LMS launch spec addition that TinCanJS consumes\n        //\n        activity_platform: true,\n        grouping:          true,\n        \"Accept-Language\": true\n    };\n\n    /**\n    @class TinCan\n    @constructor\n    @param {Object} [options] Configuration used to initialize.\n        @param {String} [options.url] URL for determining launch provided\n            configuration options\n        @param {Array} [options.recordStores] list of pre-configured LRSes\n        @param {Object|TinCan.Agent} [options.actor] default actor\n        @param {Object|TinCan.Activity} [options.activity] default activity\n        @param {String} [options.registration] default registration\n        @param {Object|TinCan.Context} [options.context] default context\n    **/\n    TinCan = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property recordStores\n        @type Array\n        */\n        this.recordStores = [];\n\n        /**\n        Default actor used when preparing statements that\n        don't yet have an actor set, and for saving state, etc.\n\n        @property actor\n        @type Object\n        */\n        this.actor = null;\n\n        /**\n        Default activity, may be used as a statement 'target'\n        or incorporated into 'context'\n\n        @property activity\n        @type Object\n        */\n        this.activity = null;\n\n        /**\n        Default registration, included in default context when\n        provided, otherwise used in statement queries\n\n        @property registration\n        @type String\n        */\n        this.registration = null;\n\n        /**\n        Default context used when preparing statements that\n        don't yet have a context set, or mixed in when one\n        has been provided, properties do NOT override on mixing\n\n        @property context\n        @type Object\n        */\n        this.context = null;\n\n        this.init(cfg);\n    };\n\n    TinCan.prototype = {\n        LOG_SRC: \"TinCan\",\n\n        /**\n        Safe version of logging, only displays when .DEBUG is true, and console.log\n        is available\n\n        @method log\n        @param {String} msg Message to output\n        */\n        log: function (msg, src) {\n            /* globals console */\n            if (TinCan.DEBUG && typeof console !== \"undefined\" && console.log) {\n                src = src || this.LOG_SRC || \"TinCan\";\n\n                console.log(\"TinCan.\" + src + \": \" + msg);\n            }\n        },\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize (see TinCan constructor).\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i;\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"url\") && cfg.url !== \"\") {\n                this._initFromQueryString(cfg.url);\n            }\n\n            if (cfg.hasOwnProperty(\"recordStores\") && cfg.recordStores !== undefined) {\n                for (i = 0; i < cfg.recordStores.length; i += 1) {\n                    this.addRecordStore(cfg.recordStores[i]);\n                }\n            }\n            if (cfg.hasOwnProperty(\"activity\")) {\n                if (cfg.activity instanceof TinCan.Activity) {\n                    this.activity = cfg.activity;\n                }\n                else {\n                    this.activity = new TinCan.Activity (cfg.activity);\n                }\n            }\n            if (cfg.hasOwnProperty(\"actor\")) {\n                if (cfg.actor instanceof TinCan.Agent) {\n                    this.actor = cfg.actor;\n                }\n                else {\n                    this.actor = new TinCan.Agent (cfg.actor);\n                }\n            }\n            if (cfg.hasOwnProperty(\"context\")) {\n                if (cfg.context instanceof TinCan.Context) {\n                    this.context = cfg.context;\n                }\n                else {\n                    this.context = new TinCan.Context (cfg.context);\n                }\n            }\n            if (cfg.hasOwnProperty(\"registration\")) {\n                this.registration = cfg.registration;\n            }\n        },\n\n        /**\n        @method _initFromQueryString\n        @param {String} url\n        @private\n        */\n        _initFromQueryString: function (url) {\n            this.log(\"_initFromQueryString\");\n\n            var i,\n                prop,\n                qsParams = TinCan.Utils.parseURL(url).params,\n                lrsProps = [\"endpoint\", \"auth\"],\n                lrsCfg = {},\n                contextCfg,\n                extended = null\n            ;\n\n            if (qsParams.hasOwnProperty(\"actor\")) {\n                this.log(\"_initFromQueryString - found actor: \" + qsParams.actor);\n                try {\n                    this.actor = TinCan.Agent.fromJSON(qsParams.actor);\n                    delete qsParams.actor;\n                }\n                catch (ex) {\n                    this.log(\"_initFromQueryString - failed to set actor: \" + ex);\n                }\n            }\n\n            if (qsParams.hasOwnProperty(\"activity_id\")) {\n                this.activity = new TinCan.Activity (\n                    {\n                        id: qsParams.activity_id\n                    }\n                );\n                delete qsParams.activity_id;\n            }\n\n            if (\n                qsParams.hasOwnProperty(\"activity_platform\") ||\n                qsParams.hasOwnProperty(\"registration\") ||\n                qsParams.hasOwnProperty(\"grouping\")\n            ) {\n                contextCfg = {};\n\n                if (qsParams.hasOwnProperty(\"activity_platform\")) {\n                    contextCfg.platform = qsParams.activity_platform;\n                    delete qsParams.activity_platform;\n                }\n                if (qsParams.hasOwnProperty(\"registration\")) {\n                    //\n                    // stored in two locations cause we always want it in the default\n                    // context, but we also want to be able to get to it for Statement\n                    // queries\n                    //\n                    contextCfg.registration = this.registration = qsParams.registration;\n                    delete qsParams.registration;\n                }\n                if (qsParams.hasOwnProperty(\"grouping\")) {\n                    contextCfg.contextActivities = {};\n                    contextCfg.contextActivities.grouping = qsParams.grouping;\n                    delete qsParams.grouping;\n                }\n\n                this.context = new TinCan.Context (contextCfg);\n            }\n\n            //\n            // order matters here, process the URL provided LRS last because it gets\n            // all the remaining parameters so that they get passed through\n            //\n            if (qsParams.hasOwnProperty(\"endpoint\")) {\n                for (i = 0; i < lrsProps.length; i += 1) {\n                    prop = lrsProps[i];\n                    if (qsParams.hasOwnProperty(prop)) {\n                        lrsCfg[prop] = qsParams[prop];\n                        delete qsParams[prop];\n                    }\n                }\n\n                // remove our reserved params so they don't end up  in the extended object\n                for (i in qsParams) {\n                    if (qsParams.hasOwnProperty(i)) {\n                        if (_reservedQSParams.hasOwnProperty(i)) {\n                            delete qsParams[i];\n                        } else {\n                            extended = extended || {};\n                            extended[i] = qsParams[i];\n                        }\n                    }\n                }\n                if (extended !== null) {\n                    lrsCfg.extended = extended;\n                }\n\n                lrsCfg.allowFail = false;\n\n                this.addRecordStore(lrsCfg);\n            }\n        },\n\n        /**\n        @method addRecordStore\n        @param {Object} Configuration data\n\n         * TODO:\n         * check endpoint for trailing '/'\n         * check for unique endpoints\n        */\n        addRecordStore: function (cfg) {\n            this.log(\"addRecordStore\");\n            var lrs;\n            if (cfg instanceof TinCan.LRS) {\n                lrs = cfg;\n            }\n            else {\n                lrs = new TinCan.LRS (cfg);\n            }\n            this.recordStores.push(lrs);\n        },\n\n        /**\n        @method prepareStatement\n        @param {Object|TinCan.Statement} Base statement properties or\n            pre-created TinCan.Statement instance\n        @return {TinCan.Statement}\n        */\n        prepareStatement: function (stmt) {\n            this.log(\"prepareStatement\");\n            if (! (stmt instanceof TinCan.Statement)) {\n                stmt = new TinCan.Statement (stmt);\n            }\n\n            if (stmt.actor === null && this.actor !== null) {\n                stmt.actor = this.actor;\n            }\n            if (stmt.target === null && this.activity !== null) {\n                stmt.target = this.activity;\n            }\n\n            if (this.context !== null) {\n                if (stmt.context === null) {\n                    stmt.context = this.context;\n                }\n                else {\n                    if (stmt.context.registration === null) {\n                        stmt.context.registration = this.context.registration;\n                    }\n                    if (stmt.context.platform === null) {\n                        stmt.context.platform = this.context.platform;\n                    }\n\n                    if (this.context.contextActivities !== null) {\n                        if (stmt.context.contextActivities === null) {\n                            stmt.context.contextActivities = this.context.contextActivities;\n                        }\n                        else {\n                            if (this.context.contextActivities.grouping !== null && stmt.context.contextActivities.grouping === null) {\n                                stmt.context.contextActivities.grouping = this.context.contextActivities.grouping;\n                            }\n                            if (this.context.contextActivities.parent !== null && stmt.context.contextActivities.parent === null) {\n                                stmt.context.contextActivities.parent = this.context.contextActivities.parent;\n                            }\n                            if (this.context.contextActivities.other !== null && stmt.context.contextActivities.other === null) {\n                                stmt.context.contextActivities.other = this.context.contextActivities.other;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return stmt;\n        },\n\n        /**\n        Calls saveStatement on each configured LRS, provide callback to make it asynchronous\n\n        @method sendStatement\n        @param {TinCan.Statement|Object} statement Send statement to LRS\n        @param {Function} [callback] Callback function to execute on completion\n        */\n        sendStatement: function (stmt, callback) {\n            this.log(\"sendStatement\");\n\n            // would prefer to use .bind instead of 'self'\n            var self = this,\n                lrs,\n                statement = this.prepareStatement(stmt),\n                rsCount = this.recordStores.length,\n                i,\n                results = [],\n                callbackWrapper,\n                callbackResults = []\n            ;\n\n            if (rsCount > 0) {\n                /*\n                   if there is a callback that is a function then we need\n                   to wrap that function with a function that becomes\n                   the new callback that reduces a closure count of the\n                   requests that don't have allowFail set to true and\n                   when that number hits zero then the original callback\n                   is executed\n                */\n                if (typeof callback === \"function\") {\n                    callbackWrapper = function (err, xhr) {\n                        var args;\n\n                        self.log(\"sendStatement - callbackWrapper: \" + rsCount);\n                        if (rsCount > 1) {\n                            rsCount -= 1;\n                            callbackResults.push(\n                                {\n                                    err: err,\n                                    xhr: xhr\n                                }\n                            );\n                        }\n                        else if (rsCount === 1) {\n                            callbackResults.push(\n                                {\n                                    err: err,\n                                    xhr: xhr\n                                }\n                            );\n                            args = [\n                                callbackResults,\n                                statement\n                            ];\n                            callback.apply(this, args);\n                        }\n                        else {\n                            self.log(\"sendStatement - unexpected record store count: \" + rsCount);\n                        }\n                    };\n                }\n\n                for (i = 0; i < rsCount; i += 1) {\n                    lrs = this.recordStores[i];\n\n                    results.push(\n                        lrs.saveStatement(statement, { callback: callbackWrapper })\n                    );\n                }\n            }\n            else {\n                this.log(\"[warning] sendStatement: No LRSs added yet (statement not sent)\");\n                if (typeof callback === \"function\") {\n                    callback.apply(this, [ null, statement ]);\n                }\n            }\n\n            return {\n                statement: statement,\n                results: results\n            };\n        },\n\n        /**\n        Calls retrieveStatement on the first LRS, provide callback to make it asynchronous\n\n        @method getStatement\n        @param {String} [stmtId] Statement ID to get\n        @param {Function} [callback] Callback function to execute on completion\n        @param {Object} [cfg] Configuration data\n            @param {Object} [params] Query parameters\n                @param {Boolean} [attachments] Include attachments in multipart response or don't (defualt: false)\n        @return {Array|Result} Array of results, or single result\n\n        TODO: make TinCan track statements it has seen in a local cache to be returned easily\n        */\n        getStatement: function (stmtId, callback, cfg) {\n            this.log(\"getStatement\");\n\n            var lrs;\n\n            cfg = cfg || {};\n            cfg.params = cfg.params || {};\n\n            if (this.recordStores.length > 0) {\n                //\n                // for statements (for now) we only need to read from the first LRS\n                // in the future it may make sense to get all from all LRSes and\n                // compare to remove duplicates or allow inspection of them for differences?\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                return lrs.retrieveStatement(stmtId, { callback: callback, params: cfg.params });\n            }\n\n            this.log(\"[warning] getStatement: No LRSs added yet (statement not retrieved)\");\n        },\n\n        /**\n        Creates a statement used for voiding the passed statement/statement ID and calls\n        send statement with the voiding statement.\n\n        @method voidStatement\n        @param {TinCan.Statement|String} statement Statement or statement ID to void\n        @param {Function} [callback] Callback function to execute on completion\n        @param {Object} [options] Options used to build voiding statement\n            @param {TinCan.Agent} [options.actor] Agent to be used as 'actor' in voiding statement\n        */\n        voidStatement: function (stmt, callback, options) {\n            this.log(\"voidStatement\");\n\n            // would prefer to use .bind instead of 'self'\n            var self = this,\n                lrs,\n                actor,\n                voidingStatement,\n                rsCount = this.recordStores.length,\n                i,\n                results = [],\n                callbackWrapper,\n                callbackResults = []\n            ;\n\n            if (stmt instanceof TinCan.Statement) {\n                stmt = stmt.id;\n            }\n\n            if (typeof options.actor !== \"undefined\") {\n                actor = options.actor;\n            }\n            else if (this.actor !== null) {\n                actor = this.actor;\n            }\n\n            voidingStatement = new TinCan.Statement(\n                {\n                    actor: actor,\n                    verb: {\n                        id: \"http://adlnet.gov/expapi/verbs/voided\"\n                    },\n                    target: {\n                        objectType: \"StatementRef\",\n                        id: stmt\n                    }\n                }\n            );\n\n            if (rsCount > 0) {\n                /*\n                   if there is a callback that is a function then we need\n                   to wrap that function with a function that becomes\n                   the new callback that reduces a closure count of the\n                   requests that don't have allowFail set to true and\n                   when that number hits zero then the original callback\n                   is executed\n                */\n                if (typeof callback === \"function\") {\n                    callbackWrapper = function (err, xhr) {\n                        var args;\n\n                        self.log(\"voidStatement - callbackWrapper: \" + rsCount);\n                        if (rsCount > 1) {\n                            rsCount -= 1;\n                            callbackResults.push(\n                                {\n                                    err: err,\n                                    xhr: xhr\n                                }\n                            );\n                        }\n                        else if (rsCount === 1) {\n                            callbackResults.push(\n                                {\n                                    err: err,\n                                    xhr: xhr\n                                }\n                            );\n                            args = [\n                                callbackResults,\n                                voidingStatement\n                            ];\n                            callback.apply(this, args);\n                        }\n                        else {\n                            self.log(\"voidStatement - unexpected record store count: \" + rsCount);\n                        }\n                    };\n                }\n\n                for (i = 0; i < rsCount; i += 1) {\n                    lrs = this.recordStores[i];\n\n                    results.push(\n                        lrs.saveStatement(voidingStatement, { callback: callbackWrapper })\n                    );\n                }\n            }\n            else {\n                this.log(\"[warning] voidStatement: No LRSs added yet (statement not sent)\");\n                if (typeof callback === \"function\") {\n                    callback.apply(this, [ null, voidingStatement ]);\n                }\n            }\n\n            return {\n                statement: voidingStatement,\n                results: results\n            };\n        },\n\n        /**\n        Calls retrieveVoidedStatement on the first LRS, provide callback to make it asynchronous\n\n        @method getVoidedStatement\n        @param {String} statement Statement ID to get\n        @param {Function} [callback] Callback function to execute on completion\n        @return {Array|Result} Array of results, or single result\n\n        TODO: make TinCan track voided statements it has seen in a local cache to be returned easily\n        */\n        getVoidedStatement: function (stmtId, callback) {\n            this.log(\"getVoidedStatement\");\n\n            var lrs;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for statements (for now) we only need to read from the first LRS\n                // in the future it may make sense to get all from all LRSes and\n                // compare to remove duplicates or allow inspection of them for differences?\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                return lrs.retrieveVoidedStatement(stmtId, { callback: callback });\n            }\n\n            this.log(\"[warning] getVoidedStatement: No LRSs added yet (statement not retrieved)\");\n        },\n\n        /**\n        Calls saveStatements with list of prepared statements\n\n        @method sendStatements\n        @param {Array} Array of statements to send\n        @param {Function} Callback function to execute on completion\n        */\n        sendStatements: function (stmts, callback) {\n            this.log(\"sendStatements\");\n            var self = this,\n                lrs,\n                statements = [],\n                rsCount = this.recordStores.length,\n                i,\n                results = [],\n                callbackWrapper,\n                callbackResults = []\n            ;\n            if (stmts.length === 0) {\n                if (typeof callback === \"function\") {\n                    callback.apply(this, [ null, statements ]);\n                }\n            }\n            else {\n                for (i = 0; i < stmts.length; i += 1) {\n                    statements.push(\n                        this.prepareStatement(stmts[i])\n                    );\n                }\n\n                if (rsCount > 0) {\n                    /*\n                       if there is a callback that is a function then we need\n                       to wrap that function with a function that becomes\n                       the new callback that reduces a closure count of the\n                       requests that don't have allowFail set to true and\n                       when that number hits zero then the original callback\n                       is executed\n                    */\n\n                    if (typeof callback === \"function\") {\n                        callbackWrapper = function (err, xhr) {\n                            var args;\n\n                            self.log(\"sendStatements - callbackWrapper: \" + rsCount);\n                            if (rsCount > 1) {\n                                rsCount -= 1;\n                                callbackResults.push(\n                                    {\n                                        err: err,\n                                        xhr: xhr\n                                    }\n                                );\n                            }\n                            else if (rsCount === 1) {\n                                callbackResults.push(\n                                    {\n                                        err: err,\n                                        xhr: xhr\n                                    }\n                                );\n                                args = [\n                                    callbackResults,\n                                    statements\n                                ];\n                                callback.apply(this, args);\n                            }\n                            else {\n                                self.log(\"sendStatements - unexpected record store count: \" + rsCount);\n                            }\n                        };\n                    }\n\n                    for (i = 0; i < rsCount; i += 1) {\n                        lrs = this.recordStores[i];\n\n                        results.push(\n                            lrs.saveStatements(statements, { callback: callbackWrapper })\n                        );\n                    }\n                }\n                else {\n                    this.log(\"[warning] sendStatements: No LRSs added yet (statements not sent)\");\n                    if (typeof callback === \"function\") {\n                        callback.apply(this, [ null, statements ]);\n                    }\n                }\n            }\n\n            return {\n                statements: statements,\n                results: results\n            };\n        },\n\n        /**\n        @method getStatements\n        @param {Object} [cfg] Configuration for request\n            @param {Boolean} [cfg.sendActor] Include default actor in query params\n            @param {Boolean} [cfg.sendActivity] Include default activity in query params\n            @param {Object} [cfg.params] Parameters used to filter.\n                            These are the same as those accepted by the\n                            <a href=\"TinCan.LRS.html#method_queryStatements\">LRS.queryStatements</a>\n                            method.\n\n            @param {Function} [cfg.callback] Function to run at completion\n\n        TODO: support multiple LRSs and flag to use single\n        */\n        getStatements: function (cfg) {\n            this.log(\"getStatements\");\n            var queryCfg = {},\n                lrs,\n                params\n            ;\n            if (this.recordStores.length > 0) {\n                //\n                // for get (for now) we only get from one (as they should be the same)\n                // but it may make sense to long term try to merge statements, perhaps\n                // by using statementId as unique\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                // TODO: need a clone function?\n                params = cfg.params || {};\n\n                if (cfg.sendActor && this.actor !== null) {\n                    if (lrs.version === \"0.9\" || lrs.version === \"0.95\") {\n                        params.actor = this.actor;\n                    }\n                    else {\n                        params.agent = this.actor;\n                    }\n                }\n                if (cfg.sendActivity && this.activity !== null) {\n                    if (lrs.version === \"0.9\" || lrs.version === \"0.95\") {\n                        params.target = this.activity;\n                    }\n                    else {\n                        params.activity = this.activity;\n                    }\n                }\n                if (typeof params.registration === \"undefined\" && this.registration !== null) {\n                    params.registration = this.registration;\n                }\n\n                queryCfg = {\n                    params: params\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.queryStatements(queryCfg);\n            }\n\n            this.log(\"[warning] getStatements: No LRSs added yet (statements not read)\");\n        },\n\n        /**\n        @method getState\n        @param {String} key Key to retrieve from the state\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {Object} [cfg.registration] Registration used in query,\n                defaults to 'registration' property if empty\n            @param {Function} [cfg.callback] Function to run with state\n        */\n        getState: function (key, cfg) {\n            this.log(\"getState\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for state (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor),\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.registration !== \"undefined\") {\n                    queryCfg.registration = cfg.registration;\n                }\n                else if (this.registration !== null) {\n                    queryCfg.registration = this.registration;\n                }\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.retrieveState(key, queryCfg);\n            }\n\n            this.log(\"[warning] getState: No LRSs added yet (state not retrieved)\");\n        },\n\n        /**\n        @method setState\n        @param {String} key Key to store into the state\n        @param {String|Object} val Value to store into the state, objects will be stringified to JSON\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {Object} [cfg.registration] Registration used in query,\n                defaults to 'registration' property if empty\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing state\n            @param {String} [cfg.contentType] Content-Type to specify in headers\n            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used? \n            @param {Function} [cfg.callback] Function to run with state\n        */\n        setState: function (key, val, cfg) {\n            this.log(\"setState\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for state (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor),\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.registration !== \"undefined\") {\n                    queryCfg.registration = cfg.registration;\n                }\n                else if (this.registration !== null) {\n                    queryCfg.registration = this.registration;\n                }\n                if (typeof cfg.lastSHA1 !== \"undefined\") {\n                    queryCfg.lastSHA1 = cfg.lastSHA1;\n                }\n                if (typeof cfg.contentType !== \"undefined\") {\n                    queryCfg.contentType = cfg.contentType;\n                    if ((typeof cfg.overwriteJSON !== \"undefined\") && (! cfg.overwriteJSON) && (TinCan.Utils.isApplicationJSON(cfg.contentType))) {\n                        queryCfg.method = \"POST\";\n                    }\n                }\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.saveState(key, val, queryCfg);\n            }\n\n            this.log(\"[warning] setState: No LRSs added yet (state not saved)\");\n        },\n\n        /**\n        @method deleteState\n        @param {String|null} key Key to remove from the state, or null to clear all\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {Object} [cfg.registration] Registration used in query,\n                defaults to 'registration' property if empty\n            @param {Function} [cfg.callback] Function to run with state\n        */\n        deleteState: function (key, cfg) {\n            this.log(\"deleteState\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for state (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor),\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.registration !== \"undefined\") {\n                    queryCfg.registration = cfg.registration;\n                }\n                else if (this.registration !== null) {\n                    queryCfg.registration = this.registration;\n                }\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.dropState(key, queryCfg);\n            }\n\n            this.log(\"[warning] deleteState: No LRSs added yet (state not deleted)\");\n        },\n\n        /**\n        @method getActivityProfile\n        @param {String} key Key to retrieve from the profile\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {Function} [cfg.callback] Function to run with activity profile\n        */\n        getActivityProfile: function (key, cfg) {\n            this.log(\"getActivityProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for activity profiles (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.retrieveActivityProfile(key, queryCfg);\n            }\n\n            this.log(\"[warning] getActivityProfile: No LRSs added yet (activity profile not retrieved)\");\n        },\n\n        /**\n        @method setActivityProfile\n        @param {String} key Key to store into the activity profile\n        @param {String|Object} val Value to store into the activity profile, objects will be stringified to JSON\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile\n            @param {String} [cfg.contentType] Content-Type to specify in headers\n            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used?\n            @param {Function} [cfg.callback] Function to run with activity profile\n        */\n        setActivityProfile: function (key, val, cfg) {\n            this.log(\"setActivityProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for activity profile (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n                if (typeof cfg.lastSHA1 !== \"undefined\") {\n                    queryCfg.lastSHA1 = cfg.lastSHA1;\n                }\n                if (typeof cfg.contentType !== \"undefined\") {\n                    queryCfg.contentType = cfg.contentType;\n                    if ((typeof cfg.overwriteJSON !== \"undefined\") && (! cfg.overwriteJSON) && (TinCan.Utils.isApplicationJSON(cfg.contentType))) {\n                        queryCfg.method = \"POST\";\n                    }\n                }\n\n                return lrs.saveActivityProfile(key, val, queryCfg);\n            }\n\n            this.log(\"[warning] setActivityProfile: No LRSs added yet (activity profile not saved)\");\n        },\n\n        /**\n        @method deleteActivityProfile\n        @param {String|null} key Key to remove from the activity profile, or null to clear all\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.activity] Activity used in query,\n                defaults to 'activity' property if empty\n            @param {Function} [cfg.callback] Function to run with activity profile\n        */\n        deleteActivityProfile: function (key, cfg) {\n            this.log(\"deleteActivityProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for activity profile (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    activity: (typeof cfg.activity !== \"undefined\" ? cfg.activity : this.activity)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.dropActivityProfile(key, queryCfg);\n            }\n\n            this.log(\"[warning] deleteActivityProfile: No LRSs added yet (activity profile not deleted)\");\n        },\n\n        /**\n        @method getAgentProfile\n        @param {String} key Key to retrieve from the profile\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {Function} [cfg.callback] Function to run with agent profile\n        */\n        getAgentProfile: function (key, cfg) {\n            this.log(\"getAgentProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for agent profiles (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.retrieveAgentProfile(key, queryCfg);\n            }\n\n            this.log(\"[warning] getAgentProfile: No LRSs added yet (agent profile not retrieved)\");\n        },\n\n        /**\n        @method setAgentProfile\n        @param {String} key Key to store into the agent profile\n        @param {String|Object} val Value to store into the agent profile, objects will be stringified to JSON\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile\n            @param {String} [cfg.contentType] Content-Type to specify in headers\n            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used?\n            @param {Function} [cfg.callback] Function to run with agent profile\n        */\n        setAgentProfile: function (key, val, cfg) {\n            this.log(\"setAgentProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for agent profile (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n                if (typeof cfg.lastSHA1 !== \"undefined\") {\n                    queryCfg.lastSHA1 = cfg.lastSHA1;\n                }\n                if (typeof cfg.contentType !== \"undefined\") {\n                    queryCfg.contentType = cfg.contentType;\n                    if ((typeof cfg.overwriteJSON !== \"undefined\") && (! cfg.overwriteJSON) && (TinCan.Utils.isApplicationJSON(cfg.contentType))) {\n                        queryCfg.method = \"POST\";\n                    }\n                }\n\n                return lrs.saveAgentProfile(key, val, queryCfg);\n            }\n\n            this.log(\"[warning] setAgentProfile: No LRSs added yet (agent profile not saved)\");\n        },\n\n        /**\n        @method deleteAgentProfile\n        @param {String|null} key Key to remove from the agent profile, or null to clear all\n        @param {Object} [cfg] Configuration for request\n            @param {Object} [cfg.agent] Agent used in query,\n                defaults to 'actor' property if empty\n            @param {Function} [cfg.callback] Function to run with agent profile\n        */\n        deleteAgentProfile: function (key, cfg) {\n            this.log(\"deleteAgentProfile\");\n            var queryCfg,\n                lrs\n            ;\n\n            if (this.recordStores.length > 0) {\n                //\n                // for agent profile (for now) we are only going to store to the first LRS\n                // so only get from there too\n                //\n                // TODO: make this the first non-allowFail LRS but for now it should\n                // be good enough to make it the first since we know the LMS provided\n                // LRS is the first\n                //\n                lrs = this.recordStores[0];\n\n                cfg = cfg || {};\n\n                queryCfg = {\n                    agent: (typeof cfg.agent !== \"undefined\" ? cfg.agent : this.actor)\n                };\n                if (typeof cfg.callback !== \"undefined\") {\n                    queryCfg.callback = cfg.callback;\n                }\n\n                return lrs.dropAgentProfile(key, queryCfg);\n            }\n\n            this.log(\"[warning] deleteAgentProfile: No LRSs added yet (agent profile not deleted)\");\n        }\n    };\n\n    /**\n    @property DEBUG\n    @static\n    @default false\n    */\n    TinCan.DEBUG = false;\n\n    /**\n    Turn on debug logging\n\n    @method enableDebug\n    @static\n    */\n    TinCan.enableDebug = function () {\n        TinCan.DEBUG = true;\n    };\n\n    /**\n    Turn off debug logging\n\n    @method disableDebug\n    @static\n    */\n    TinCan.disableDebug = function () {\n        TinCan.DEBUG = false;\n    };\n\n    /**\n    @method versions\n    @return {Array} Array of supported version numbers\n    @static\n    */\n    TinCan.versions = function () {\n        // newest first so we can use the first as the default\n        return [\n            \"1.0.2\",\n            \"1.0.1\",\n            \"1.0.0\",\n            \"0.95\",\n            \"0.9\"\n        ];\n    };\n\n    /*global module*/\n    // Support the CommonJS method for exporting our single global\n    if (typeof module === \"object\") {\n        module.exports = TinCan;\n    }\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Utils\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Utils\n    */\n    TinCan.Utils = {\n        defaultEncoding: \"utf8\",\n\n        /**\n        Generates a UUIDv4 compliant string that should be reasonably unique\n\n        @method getUUID\n        @return {String} UUID\n        @static\n\n        Excerpt from: http://www.broofa.com/Tools/Math.uuid.js (v1.4)\n        http://www.broofa.com\n        mailto:robert@broofa.com\n        Copyright (c) 2010 Robert Kieffer\n        Dual licensed under the MIT and GPL licenses.\n        */\n        getUUID: function () {\n            /*jslint bitwise: true, eqeq: true */\n            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n                /[xy]/g,\n                function (c) {\n                    var r = Math.random() * 16|0, v = c == \"x\" ? r : (r&0x3|0x8);\n                    return v.toString(16);\n                }\n            );\n        },\n\n        /**\n        @method getISODateString\n        @static\n        @param {Date} date Date to stringify\n        @return {String} ISO date String\n        */\n        getISODateString: function (d) {\n            function pad (val, n) {\n                var padder,\n                    tempVal;\n                if (typeof val === \"undefined\" || val === null) {\n                    val = 0;\n                }\n                if (typeof n === \"undefined\" || n === null) {\n                    n = 2;\n                }\n                padder = Math.pow(10, n-1);\n                tempVal = val.toString();\n\n                while (val < padder && padder > 1) {\n                    tempVal = \"0\" + tempVal;\n                    padder = padder / 10;\n                }\n\n                return tempVal;\n            }\n\n            return d.getUTCFullYear() + \"-\" +\n                pad(d.getUTCMonth() + 1) + \"-\" +\n                pad(d.getUTCDate()) + \"T\" +\n                pad(d.getUTCHours()) + \":\" +\n                pad(d.getUTCMinutes()) + \":\" +\n                pad(d.getUTCSeconds()) + \".\" +\n                pad(d.getUTCMilliseconds(), 3) + \"Z\";\n        },\n\n        /**\n        @method convertISO8601DurationToMilliseconds\n        @static\n        @param {String} ISO8601Duration Duration in ISO8601 format\n        @return {Int} Duration in milliseconds\n\n        Note: does not handle input strings with years, months and days\n        */\n        convertISO8601DurationToMilliseconds: function (ISO8601Duration) {\n            var isValueNegative = (ISO8601Duration.indexOf(\"-\") >= 0),\n                indexOfT = ISO8601Duration.indexOf(\"T\"),\n                indexOfH = ISO8601Duration.indexOf(\"H\"),\n                indexOfM = ISO8601Duration.indexOf(\"M\"),\n                indexOfS = ISO8601Duration.indexOf(\"S\"),\n                hours,\n                minutes,\n                seconds,\n                durationInMilliseconds;\n\n            if ((indexOfT === -1) || ((indexOfM !== -1) && (indexOfM < indexOfT)) || (ISO8601Duration.indexOf(\"D\") !== -1) || (ISO8601Duration.indexOf(\"Y\") !== -1)) {\n                throw new Error(\"ISO 8601 timestamps including years, months and/or days are not currently supported\");\n            }\n\n            if (indexOfH === -1) {\n                indexOfH = indexOfT;\n                hours = 0;\n            }\n            else {\n                hours = parseInt(ISO8601Duration.slice(indexOfT + 1, indexOfH), 10);\n            }\n\n            if (indexOfM === -1) {\n                indexOfM = indexOfT;\n                minutes = 0;\n            }\n            else {\n                minutes = parseInt(ISO8601Duration.slice(indexOfH + 1, indexOfM), 10);\n            }\n\n            seconds = parseFloat(ISO8601Duration.slice(indexOfM + 1, indexOfS));\n\n            durationInMilliseconds = parseInt((((((hours * 60) + minutes) * 60) + seconds) * 1000), 10);\n            if (isNaN(durationInMilliseconds)){\n                durationInMilliseconds = 0;\n            }\n            if (isValueNegative) {\n                durationInMilliseconds = durationInMilliseconds * -1;\n            }\n\n            return durationInMilliseconds;\n        },\n\n        /**\n        @method convertMillisecondsToISO8601Duration\n        @static\n        @param {Int} inputMilliseconds Duration in milliseconds\n        @return {String} Duration in ISO8601 format\n        */\n        convertMillisecondsToISO8601Duration: function (inputMilliseconds) {\n            var hours,\n                minutes,\n                seconds,\n                i_inputMilliseconds = parseInt(inputMilliseconds, 10),\n                i_inputCentiseconds,\n                inputIsNegative = \"\",\n                rtnStr = \"\";\n\n            //round to nearest 0.01 seconds\n            i_inputCentiseconds = Math.round(i_inputMilliseconds / 10);\n\n            if (i_inputCentiseconds < 0) {\n                inputIsNegative = \"-\";\n                i_inputCentiseconds = i_inputCentiseconds * -1;\n            }\n\n            hours = parseInt(((i_inputCentiseconds) / 360000), 10);\n            minutes = parseInt((((i_inputCentiseconds) % 360000) / 6000), 10);\n            seconds = (((i_inputCentiseconds) % 360000) % 6000) / 100;\n\n            rtnStr = inputIsNegative + \"PT\";\n            if (hours > 0) {\n                rtnStr += hours + \"H\";\n            }\n\n            if (minutes > 0) {\n                rtnStr += minutes + \"M\";\n            }\n\n            rtnStr += seconds + \"S\";\n\n            return rtnStr;\n        },\n\n        /**\n        @method getSHA1String\n        @static\n        @param {String} str Content to hash\n        @return {String} SHA1 for contents\n        */\n        getSHA1String: function (str) {\n            /*global CryptoJS*/\n\n            return CryptoJS.SHA1(str).toString(CryptoJS.enc.Hex);\n        },\n\n        /**\n        @method getSHA256String\n        @static\n        @param {ArrayBuffer|String} content Content to hash\n        @return {String} SHA256 for contents\n        */\n        getSHA256String: function (content) {\n            /*global CryptoJS*/\n\n            if (Object.prototype.toString.call(content) === \"[object ArrayBuffer]\") {\n                content = CryptoJS.lib.WordArray.create(content);\n            }\n            return CryptoJS.SHA256(content).toString(CryptoJS.enc.Hex);\n        },\n\n        /**\n        @method getBase64String\n        @static\n        @param {String} str Content to encode\n        @return {String} Base64 encoded contents\n        */\n        getBase64String: function (str) {\n            /*global CryptoJS*/\n\n            return CryptoJS.enc.Base64.stringify(\n                CryptoJS.enc.Latin1.parse(str)\n            );\n        },\n\n        /**\n        Intended to be inherited by objects with properties that store\n        display values in a language based \"dictionary\"\n\n        @method getLangDictionaryValue\n        @param {String} prop Property name storing the dictionary\n        @param {String} [lang] Language to return\n        @return {String}\n        */\n        getLangDictionaryValue: function (prop, lang) {\n            var langDict = this[prop],\n                key;\n\n            if (typeof lang !== \"undefined\" && typeof langDict[lang] !== \"undefined\") {\n                return langDict[lang];\n            }\n            if (typeof langDict.und !== \"undefined\") {\n                return langDict.und;\n            }\n            if (typeof langDict[\"en-US\"] !== \"undefined\") {\n                return langDict[\"en-US\"];\n            }\n            for (key in langDict) {\n                if (langDict.hasOwnProperty(key)) {\n                    return langDict[key];\n                }\n            }\n\n            return \"\";\n        },\n\n        /**\n        @method parseURL\n        @param {String} url\n        @param {Object} [options]\n            @param {Boolean} [options.allowRelative] Option to allow relative URLs\n        @return {Object} Object of values\n        @private\n        */\n        parseURL: function (url, cfg) {\n            //\n            // see http://stackoverflow.com/a/21553982\n            // and http://stackoverflow.com/a/2880929\n            //\n            var isRelative = url.charAt(0) === \"/\",\n                _reURLInformation = [\n                    \"(/[^?#]*)\", // pathname\n                    \"(\\\\?[^#]*|)\", // search\n                    \"(#.*|)$\" // hash\n                ],\n                reURLInformation,\n                match,\n                result,\n                paramMatch,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\n\n            cfg = cfg || {};\n\n            //\n            // this method in an earlier version supported relative URLs, mostly to provide\n            // support to the `LRS.moreStatements` method, that functionality was removed and\n            // subsequently restored but with the addition of the option for allowing relative\n            // URLs to be accepted which is the reason for the \"helpful\" exception message here\n            //\n            if (! isRelative) {\n                //\n                // not relative so make sure they have a scheme, host, etc.\n                //\n                _reURLInformation.unshift(\n                    \"^(https?:)//\", // scheme\n                    \"(([^:/?#]*)(?::([0-9]+))?)\" // host (hostname and port)\n                );\n\n                //\n                // our regex requires there to be a '/' for the detection of the start\n                // of the path, we can detect a '/' using indexOf beyond the part of the\n                // scheme, since we've restricted scheme to 'http' or 'https' and because\n                // a hostname is guaranteed to be there we can detect beyond the '://'\n                // based on position, then tack on a trailing '/' because it can't be\n                // part of the path\n                //\n                if (url.indexOf(\"/\", 8) === -1) {\n                    url = url + \"/\";\n                }\n            }\n            else {\n                //\n                // relative so make sure they allow that explicitly\n                //\n                if (typeof cfg.allowRelative === \"undefined\" || ! cfg.allowRelative) {\n                    throw new Error(\"Refusing to parse relative URL without 'allowRelative' option\");\n                }\n            }\n\n            reURLInformation = new RegExp(_reURLInformation.join(\"\"));\n            match = url.match(reURLInformation);\n            if (match === null) {\n                throw new Error(\"Unable to parse URL regular expression did not match: '\" + url + \"'\");\n            }\n\n            // 'path' is for backwards compatibility\n            if (isRelative) {\n                result = {\n                    protocol: null,\n                    host: null,\n                    hostname: null,\n                    port: null,\n                    path: null,\n                    pathname: match[1],\n                    search: match[2],\n                    hash: match[3],\n                    params: {}\n                };\n\n                result.path = result.pathname;\n            }\n            else {\n                result = {\n                    protocol: match[1],\n                    host: match[2],\n                    hostname: match[3],\n                    port: match[4],\n                    pathname: match[5],\n                    search: match[6],\n                    hash: match[7],\n                    params: {}\n                };\n\n                result.path = result.protocol + \"//\" + result.host + result.pathname;\n            }\n\n            if (result.search !== \"\") {\n                // extra parens to let jshint know this is an expression\n                while ((paramMatch = search.exec(result.search.substring(1)))) {\n                    result.params[decode(paramMatch[1])] = decode(paramMatch[2]);\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        @method getServerRoot\n        @param {String} absoluteUrl\n        @return {String} server root of url\n        @private\n        */\n        getServerRoot: function (absoluteUrl) {\n            var urlParts = absoluteUrl.split(\"/\");\n            return urlParts[0] + \"//\" + urlParts[2];\n        },\n\n        /**\n        @method getContentTypeFromHeader\n        @static\n        @param {String} header Content-Type header value\n        @return {String} Primary value from Content-Type\n        */\n        getContentTypeFromHeader: function (header) {\n            return (String(header).split(\";\"))[0];\n        },\n\n        /**\n        @method isApplicationJSON\n        @static\n        @param {String} header Content-Type header value\n        @return {Boolean} whether \"application/json\" was matched\n        */\n        isApplicationJSON: function (header) {\n            return TinCan.Utils.getContentTypeFromHeader(header).toLowerCase().indexOf(\"application/json\") === 0;\n        },\n\n        /**\n        @method stringToArrayBuffer\n        @static\n        @param {String} content String of content to convert to an ArrayBuffer\n        @param {String} [encoding] Encoding to use for conversion\n        @return {ArrayBuffer} Converted content\n        */\n        stringToArrayBuffer: function () {\n            TinCan.prototype.log(\"stringToArrayBuffer not overloaded - no environment loaded?\");\n        },\n\n        /**\n        @method stringFromArrayBuffer\n        @static\n        @param {ArrayBuffer} content ArrayBuffer of content to convert to a String\n        @param {String} [encoding] Encoding to use for conversion\n        @return {String} Converted content\n        */\n        stringFromArrayBuffer: function () {\n            TinCan.prototype.log(\"stringFromArrayBuffer not overloaded - no environment loaded?\");\n        }\n    };\n}());\n\n/*\n    Copyright 2012-2013 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.LRS\n**/\n(function () {\n    \"use strict\";\n    /**\n    @class TinCan.LRS\n    @constructor\n    */\n    var LRS = TinCan.LRS = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property endpoint\n        @type String\n        */\n        this.endpoint = null;\n\n        /**\n        @property version\n        @type String\n        */\n        this.version = null;\n\n        /**\n        @property auth\n        @type String\n        */\n        this.auth = null;\n\n        /**\n        @property allowFail\n        @type Boolean\n        @default true\n        */\n        this.allowFail = true;\n\n        /**\n        @property extended\n        @type Object\n        */\n        this.extended = null;\n\n        this.init(cfg);\n    };\n    LRS.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"LRS\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var versions = TinCan.versions(),\n                versionMatch = false,\n                i\n            ;\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"alertOnRequestFailure\")) {\n                this.log(\"'alertOnRequestFailure' is deprecated (alerts have been removed) no need to set it now\");\n            }\n\n            if (! cfg.hasOwnProperty(\"endpoint\") || cfg.endpoint === null || cfg.endpoint === \"\") {\n                this.log(\"[error] LRS invalid: no endpoint\");\n                throw {\n                    code: 3,\n                    mesg: \"LRS invalid: no endpoint\"\n                };\n            }\n\n            this.endpoint = String(cfg.endpoint);\n            if (this.endpoint.slice(-1) !== \"/\") {\n                this.log(\"adding trailing slash to endpoint\");\n                this.endpoint += \"/\";\n            }\n\n            if (cfg.hasOwnProperty(\"allowFail\")) {\n                this.allowFail = cfg.allowFail;\n            }\n\n            if (cfg.hasOwnProperty(\"auth\")) {\n                this.auth = cfg.auth;\n            }\n            else if (cfg.hasOwnProperty(\"username\") && cfg.hasOwnProperty(\"password\")) {\n                this.auth = \"Basic \" + TinCan.Utils.getBase64String(cfg.username + \":\" + cfg.password);\n            }\n\n            if (cfg.hasOwnProperty(\"extended\")) {\n                this.extended = cfg.extended;\n            }\n\n            //\n            // provide a hook method that environments can override\n            // to handle anything necessary in the initialization\n            // process that is customized to them, such as cross domain\n            // setup in browsers, default implementation is empty\n            //\n            // this hook must run prior to version detection so that\n            // request handling can be set up before requesting the\n            // LRS version via the /about resource\n            //\n            this._initByEnvironment(cfg);\n\n            if (typeof cfg.version !== \"undefined\") {\n                this.log(\"version: \" + cfg.version);\n                for (i = 0; i < versions.length; i += 1) {\n                    if (versions[i] === cfg.version) {\n                        versionMatch = true;\n                        break;\n                    }\n                }\n                if (! versionMatch) {\n                    this.log(\"[error] LRS invalid: version not supported (\" + cfg.version + \")\");\n                    throw {\n                        code: 5,\n                        mesg: \"LRS invalid: version not supported (\" + cfg.version + \")\"\n                    };\n                }\n                this.version = cfg.version;\n            }\n            else {\n                //\n                // assume max supported when not specified,\n                // TODO: add detection of LRS from call to endpoint\n                //\n                this.version = versions[0];\n            }\n        },\n\n        /**\n        Creates and returns a boundary for separating parts in\n        requests where the statement has an attachment\n\n        @method _getBoundary\n        @private\n        */\n        _getBoundary: function () {\n            return TinCan.Utils.getUUID().replace(/-/g, \"\");\n        },\n\n        /**\n        Method should be overloaded by an environment to do per\n        environment specifics such that the LRS can make a call\n        to set the version if not provided\n\n        @method _initByEnvironment\n        @private\n        */\n        _initByEnvironment: function () {\n            this.log(\"_initByEnvironment not overloaded - no environment loaded?\");\n        },\n\n        /**\n        Method should be overloaded by an environment to do per\n        environment specifics for sending requests to the LRS\n\n        @method _makeRequest\n        @private\n        */\n        _makeRequest: function () {\n            this.log(\"_makeRequest not overloaded - no environment loaded?\");\n        },\n\n        /**\n        Method should be overloaded by an environment to do per\n        environment specifics for building multipart request data\n\n        @method _getMultipartRequestData\n        @private\n        */\n        _getMultipartRequestData: function () {\n            this.log(\"_getMultipartRequestData not overloaded - no environment loaded?\");\n        },\n\n        /**\n        Method is overloaded by the browser environment in order to test converting an\n        HTTP request that is greater than a defined length\n\n        @method _IEModeConversion\n        @private\n        */\n        _IEModeConversion: function () {\n            this.log(\"_IEModeConversion not overloaded - browser environment not loaded.\");\n        },\n\n        _processGetStatementResult: function (xhr, params) {\n            var boundary,\n                parsedResponse,\n                statement,\n                attachmentMap = {},\n                i;\n\n            if (! params.attachments) {\n                return TinCan.Statement.fromJSON(xhr.responseText);\n            }\n\n            boundary = xhr.getResponseHeader(\"Content-Type\").split(\"boundary=\")[1];\n\n            parsedResponse = this._parseMultipart(boundary, xhr.response);\n            statement = JSON.parse(parsedResponse[0].body);\n            for (i = 1; i < parsedResponse.length; i += 1) {\n                attachmentMap[parsedResponse[i].headers[\"X-Experience-API-Hash\"]] = parsedResponse[i].body;\n            }\n\n            this._assignAttachmentContent([statement], attachmentMap);\n\n            return new TinCan.Statement(statement);\n        },\n\n        /**\n        Method used to send a request via browser objects to the LRS\n\n        @method sendRequest\n        @param {Object} cfg Configuration for request\n            @param {String} cfg.url URL portion to add to endpoint\n            @param {String} [cfg.method] GET, PUT, POST, etc.\n            @param {Object} [cfg.params] Parameters to set on the querystring\n            @param {String|ArrayBuffer} [cfg.data] Body content as a String or ArrayBuffer\n            @param {Object} [cfg.headers] Additional headers to set in the request\n            @param {Function} [cfg.callback] Function to run at completion\n                @param {String|Null} cfg.callback.err If an error occurred, this parameter will contain the HTTP status code.\n                    If the operation succeeded, err will be null.\n                @param {Object} cfg.callback.xhr XHR object\n            @param {Boolean} [cfg.ignore404] Whether 404 status codes should be considered an error\n            @param {Boolean} [cfg.expectMultipart] Whether to expect the response to be a multipart response\n        @return {Object} XHR if called in a synchronous way (in other words no callback)\n        */\n        sendRequest: function (cfg) {\n            this.log(\"sendRequest\");\n            var fullUrl = this.endpoint + cfg.url,\n                headers = {},\n                prop\n            ;\n\n            // respect absolute URLs passed in\n            if (cfg.url.indexOf(\"http\") === 0) {\n                fullUrl = cfg.url;\n            }\n\n            // add extended LMS-specified values to the params\n            if (this.extended !== null) {\n                cfg.params = cfg.params || {};\n\n                for (prop in this.extended) {\n                    if (this.extended.hasOwnProperty(prop)) {\n                        // don't overwrite cfg.params values that have already been added to the request with our extended params\n                        if (! cfg.params.hasOwnProperty(prop)) {\n                            if (this.extended[prop] !== null) {\n                                cfg.params[prop] = this.extended[prop];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // consolidate headers\n            headers.Authorization = this.auth;\n            if (this.version !== \"0.9\") {\n                headers[\"X-Experience-API-Version\"] = this.version;\n            }\n\n            for (prop in cfg.headers) {\n                if (cfg.headers.hasOwnProperty(prop)) {\n                    headers[prop] = cfg.headers[prop];\n                }\n            }\n\n            return this._makeRequest(fullUrl, headers, cfg);\n        },\n\n        /**\n        Method used to determine the LRS version\n\n        @method about\n        @param {Object} cfg Configuration object for the about request\n            @param {Function} [cfg.callback] Callback to execute upon receiving a response\n            @param {Object} [cfg.params] this is needed, but can be empty\n        @return {Object} About which holds the version, or asyncrhonously calls a specified callback\n        */\n        about: function (cfg) {\n            this.log(\"about\");\n            var requestCfg,\n                requestResult,\n                callbackWrapper;\n\n            cfg = cfg || {};\n\n            requestCfg = {\n                url: \"about\",\n                method: \"GET\",\n                params: {}\n            };\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        result = TinCan.About.fromJSON(xhr.responseText);\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n\n            if (callbackWrapper) {\n                return;\n            }\n\n            if (requestResult.err === null) {\n                requestResult.xhr = TinCan.About.fromJSON(requestResult.xhr.responseText);\n            }\n            return requestResult;\n        },\n\n        /**\n        Save a statement, when used from a browser sends to the endpoint using the RESTful interface.\n        Use a callback to make the call asynchronous.\n\n        @method saveStatement\n        @param {TinCan.Statement} statement to send\n        @param {Object} [cfg] Configuration used when saving\n            @param {Function} [cfg.callback] Callback to execute on completion\n        */\n        saveStatement: function (stmt, cfg) {\n            this.log(\"saveStatement\");\n            var requestCfg = {\n                    url: \"statements\",\n                    headers: {}\n                },\n                versionedStatement,\n                requestAttachments = [],\n                boundary,\n                i;\n\n            cfg = cfg || {};\n\n            try {\n                versionedStatement = stmt.asVersion( this.version );\n            }\n            catch (ex) {\n                if (this.allowFail) {\n                    this.log(\"[warning] statement could not be serialized in version (\" + this.version + \"): \" + ex);\n                    if (typeof cfg.callback !== \"undefined\") {\n                        cfg.callback(null, null);\n                        return;\n                    }\n                    return {\n                        err: null,\n                        xhr: null\n                    };\n                }\n\n                this.log(\"[error] statement could not be serialized in version (\" + this.version + \"): \" + ex);\n                if (typeof cfg.callback !== \"undefined\") {\n                    cfg.callback(ex, null);\n                    return;\n                }\n                return {\n                    err: ex,\n                    xhr: null\n                };\n            }\n\n            if (versionedStatement.hasOwnProperty(\"attachments\") && stmt.hasAttachmentWithContent()) {\n                boundary = this._getBoundary();\n\n                requestCfg.headers[\"Content-Type\"] = \"multipart/mixed; boundary=\" + boundary;\n\n                for (i = 0; i < stmt.attachments.length; i += 1) {\n                    if (stmt.attachments[i].content !== null) {\n                        requestAttachments.push(stmt.attachments[i]);\n                    }\n                }\n\n                try {\n                    requestCfg.data = this._getMultipartRequestData(boundary, versionedStatement, requestAttachments);\n                }\n                catch (ex) {\n                    if (this.allowFail) {\n                        this.log(\"[warning] multipart request data could not be created (attachments probably not supported): \" + ex);\n                        if (typeof cfg.callback !== \"undefined\") {\n                            cfg.callback(null, null);\n                            return;\n                        }\n                        return {\n                            err: null,\n                            xhr: null\n                        };\n                    }\n\n                    this.log(\"[error] multipart request data could not be created (attachments probably not supported): \" + ex);\n                    if (typeof cfg.callback !== \"undefined\") {\n                        cfg.callback(ex, null);\n                        return;\n                    }\n                    return {\n                        err: ex,\n                        xhr: null\n                    };\n                }\n            }\n            else {\n                requestCfg.headers[\"Content-Type\"] = \"application/json\";\n                requestCfg.data = JSON.stringify(versionedStatement);\n            }\n            if (stmt.id !== null) {\n                requestCfg.method = \"PUT\";\n                requestCfg.params = {\n                    statementId: stmt.id\n                };\n            }\n            else {\n                requestCfg.method = \"POST\";\n            }\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Retrieve a statement, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveStatement\n        @param {String} ID of statement to retrieve\n        @param {Object} [cfg] Configuration options\n            @param {Object} [cfg.params] Query parameters\n                @param {Boolean} [cfg.params.attachments] Include attachments in multipart response or don't (default: false)\n            @param {Function} [cfg.callback] Callback to execute on completion\n        @return {TinCan.Statement} Statement retrieved\n        */\n        retrieveStatement: function (stmtId, cfg) {\n            this.log(\"retrieveStatement\");\n            var requestCfg,\n                requestResult,\n                callbackWrapper,\n                lrs = this;\n\n            cfg = cfg || {};\n            cfg.params = cfg.params || {};\n\n            requestCfg = {\n                url: \"statements\",\n                method: \"GET\",\n                params: {\n                    statementId: stmtId\n                }\n            };\n            if (cfg.params.attachments) {\n                requestCfg.params.attachments = true;\n                requestCfg.expectMultipart = true;\n            }\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        result = lrs._processGetStatementResult(xhr, cfg.params);\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.statement = null;\n                if (requestResult.err === null) {\n                    requestResult.statement = lrs._processGetStatementResult(requestResult.xhr, cfg.params);\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve a voided statement, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveVoidedStatement\n        @param {String} ID of voided statement to retrieve\n        @param {Object} [cfg] Configuration options\n            @param {Object} [cfg.params] Query parameters\n                @param {Boolean} [cfg.params.attachments] Include attachments in multipart response or don't (default: false)\n            @param {Function} [cfg.callback] Callback to execute on completion\n        @return {TinCan.Statement} Statement retrieved\n        */\n        retrieveVoidedStatement: function (stmtId, cfg) {\n            this.log(\"retrieveVoidedStatement\");\n            var requestCfg,\n                requestResult,\n                callbackWrapper,\n                lrs = this;\n\n            cfg = cfg || {};\n            cfg.params = cfg.params || {};\n\n            requestCfg = {\n                url: \"statements\",\n                method: \"GET\",\n                params: {}\n            };\n            if (this.version === \"0.9\" || this.version === \"0.95\") {\n                requestCfg.params.statementId = stmtId;\n            }\n            else {\n                requestCfg.params.voidedStatementId = stmtId;\n                if (cfg.params.attachments) {\n                    requestCfg.params.attachments = true;\n                    requestCfg.expectMultipart = true;\n                }\n            }\n\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        result = lrs._processGetStatementResult(xhr, cfg.params);\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.statement = null;\n                if (requestResult.err === null) {\n                    requestResult.statement = lrs._processGetStatementResult(requestResult.xhr, cfg.params);\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Save a set of statements, when used from a browser sends to the endpoint using the RESTful interface.\n        Use a callback to make the call asynchronous.\n\n        @method saveStatements\n        @param {Array} Array of statements or objects convertable to statements\n        @param {Object} [cfg] Configuration used when saving\n            @param {Function} [cfg.callback] Callback to execute on completion\n        */\n        saveStatements: function (stmts, cfg) {\n            this.log(\"saveStatements\");\n            var requestCfg = {\n                    url: \"statements\",\n                    method: \"POST\",\n                    headers: {}\n                },\n                versionedStatement,\n                versionedStatements = [],\n                requestAttachments = [],\n                boundary,\n                i,\n                j;\n\n            cfg = cfg || {};\n\n            if (stmts.length === 0) {\n                if (typeof cfg.callback !== \"undefined\") {\n                    cfg.callback(new Error(\"no statements\"), null);\n                    return;\n                }\n                return {\n                    err: new Error(\"no statements\"),\n                    xhr: null\n                };\n            }\n\n            for (i = 0; i < stmts.length; i += 1) {\n                try {\n                    versionedStatement = stmts[i].asVersion( this.version );\n                }\n                catch (ex) {\n                    if (this.allowFail) {\n                        this.log(\"[warning] statement could not be serialized in version (\" + this.version + \"): \" + ex);\n                        if (typeof cfg.callback !== \"undefined\") {\n                            cfg.callback(null, null);\n                            return;\n                        }\n                        return {\n                            err: null,\n                            xhr: null\n                        };\n                    }\n\n                    this.log(\"[error] statement could not be serialized in version (\" + this.version + \"): \" + ex);\n                    if (typeof cfg.callback !== \"undefined\") {\n                        cfg.callback(ex, null);\n                        return;\n                    }\n                    return {\n                        err: ex,\n                        xhr: null\n                    };\n                }\n\n                if (stmts[i].hasAttachmentWithContent()) {\n                    for (j = 0; j < stmts[i].attachments.length; j += 1) {\n                        if (stmts[i].attachments[j].content !== null) {\n                            requestAttachments.push(stmts[i].attachments[j]);\n                        }\n                    }\n                }\n\n                versionedStatements.push(versionedStatement);\n            }\n\n            if (requestAttachments.length !== 0) {\n                boundary = this._getBoundary();\n\n                requestCfg.headers[\"Content-Type\"] = \"multipart/mixed; boundary=\" + boundary;\n\n                try {\n                    requestCfg.data = this._getMultipartRequestData(boundary, versionedStatements, requestAttachments);\n                }\n                catch (ex) {\n                    if (this.allowFail) {\n                        this.log(\"[warning] multipart request data could not be created (attachments probably not supported): \" + ex);\n                        if (typeof cfg.callback !== \"undefined\") {\n                            cfg.callback(null, null);\n                            return;\n                        }\n                        return {\n                            err: null,\n                            xhr: null\n                        };\n                    }\n\n                    this.log(\"[error] multipart request data could not be created (attachments probably not supported): \" + ex);\n                    if (typeof cfg.callback !== \"undefined\") {\n                        cfg.callback(ex, null);\n                        return;\n                    }\n                    return {\n                        err: ex,\n                        xhr: null\n                    };\n                }\n            }\n            else {\n                requestCfg.headers[\"Content-Type\"] = \"application/json\";\n                requestCfg.data = JSON.stringify(versionedStatements);\n            }\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Fetch a set of statements, when used from a browser sends to the endpoint using the\n        RESTful interface.  Use a callback to make the call asynchronous.\n\n        @method queryStatements\n        @param {Object} [cfg] Configuration used to query\n            @param {Object} [cfg.params] Query parameters\n                @param {TinCan.Agent|TinCan.Group} [cfg.params.agent] Agent matches 'actor' or 'object'\n                @param {TinCan.Verb|String} [cfg.params.verb] Verb (or verb ID) to query on\n                @param {TinCan.Activity|String} [cfg.params.activity] Activity (or activity ID) to query on\n                @param {String} [cfg.params.registration] Registration UUID\n                @param {Boolean} [cfg.params.related_activities] Match related activities\n                @param {Boolean} [cfg.params.related_agents] Match related agents\n                @param {String} [cfg.params.since] Match statements stored since specified timestamp\n                @param {String} [cfg.params.until] Match statements stored at or before specified timestamp\n                @param {Integer} [cfg.params.limit] Number of results to retrieve\n                @param {String} [cfg.params.format] One of \"ids\", \"exact\", \"canonical\" (default: \"exact\")\n                @param {Boolean} [cfg.params.ascending] Return results in ascending order of stored time\n\n                @param {TinCan.Agent} [cfg.params.actor] (Removed in 1.0.0, use 'agent' instead) Agent matches 'actor'\n                @param {TinCan.Activity|TinCan.Agent|TinCan.Statement} [cfg.params.target] (Removed in 1.0.0, use 'activity' or 'agent' instead) Activity, Agent, or Statement matches 'object'\n                @param {TinCan.Agent} [cfg.params.instructor] (Removed in 1.0.0, use 'agent' + 'related_agents' instead) Agent matches 'context:instructor'\n                @param {Boolean} [cfg.params.context] (Removed in 1.0.0, use 'activity' instead) When filtering on target, include statements with matching context\n                @param {Boolean} [cfg.params.authoritative] (Removed in 1.0.0) Get authoritative results\n                @param {Boolean} [cfg.params.sparse] (Removed in 1.0.0, use 'format' instead) Get sparse results\n\n            @param {Function} [cfg.callback] Callback to execute on completion\n                @param {String|null} cfg.callback.err Error status or null if succcess\n                @param {TinCan.StatementsResult|XHR} cfg.callback.response Receives a StatementsResult argument\n        @return {Object} Request result\n        */\n        queryStatements: function (cfg) {\n            this.log(\"queryStatements\");\n            var requestCfg,\n                requestResult,\n                callbackWrapper,\n                lrs = this;\n\n            cfg = cfg || {};\n            cfg.params = cfg.params || {};\n\n            //\n            // if they misconfigured (possibly due to version mismatches) the\n            // query then don't try to send a request at all, rather than give\n            // them invalid results\n            //\n            try {\n                requestCfg = this._queryStatementsRequestCfg(cfg);\n\n                if (cfg.params.attachments) {\n                    requestCfg.expectMultipart = true;\n                }\n            }\n            catch (ex) {\n                this.log(\"[error] Query statements failed - \" + ex);\n                if (typeof cfg.callback !== \"undefined\") {\n                    cfg.callback(ex, {});\n                }\n\n                return {\n                    err: ex,\n                    statementsResult: null\n                };\n            }\n\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr,\n                        parsedResponse,\n                        boundary,\n                        statements,\n                        attachmentMap = {},\n                        i;\n\n                    if (err === null) {\n                        if (! cfg.params.attachments) {\n                            result = TinCan.StatementsResult.fromJSON(xhr.responseText);\n                        }\n                        else {\n                            boundary = xhr.getResponseHeader(\"Content-Type\").split(\"boundary=\")[1];\n\n                            parsedResponse = lrs._parseMultipart(boundary, xhr.response);\n                            statements = JSON.parse(parsedResponse[0].body);\n                            for (i = 1; i < parsedResponse.length; i += 1) {\n                                attachmentMap[parsedResponse[i].headers[\"X-Experience-API-Hash\"]] = parsedResponse[i].body;\n                            }\n\n                            lrs._assignAttachmentContent(statements.statements, attachmentMap);\n                            result = new TinCan.StatementsResult({ statements: statements.statements });\n\n                            for (i = 0; i < result.statements.length; i += 1) {\n                                if (! (result.statements[i] instanceof TinCan.Statement)) {\n                                    result.statements[i] = new TinCan.Statement(result.statements[i]);\n                                }\n                            }\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            requestResult.config = requestCfg;\n\n            if (! callbackWrapper) {\n                requestResult.statementsResult = null;\n                if (requestResult.err === null) {\n                    requestResult.statementsResult = TinCan.StatementsResult.fromJSON(requestResult.xhr.responseText);\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Build a request config object that can be passed to sendRequest() to make a query request\n\n        @method _queryStatementsRequestCfg\n        @private\n        @param {Object} [cfg] See configuration for {{#crossLink \"TinCan.LRS/queryStatements\"}}{{/crossLink}}\n        @return {Object} Request configuration object\n        */\n        _queryStatementsRequestCfg: function (cfg) {\n            this.log(\"_queryStatementsRequestCfg\");\n            var params = {},\n                returnCfg = {\n                    url: \"statements\",\n                    method: \"GET\",\n                    params: params\n                },\n                jsonProps = [\n                    \"agent\",\n                    \"actor\",\n                    \"object\",\n                    \"instructor\"\n                ],\n                idProps = [\n                    \"verb\",\n                    \"activity\"\n                ],\n                valProps = [\n                    \"registration\",\n                    \"context\",\n                    \"since\",\n                    \"until\",\n                    \"limit\",\n                    \"authoritative\",\n                    \"sparse\",\n                    \"ascending\",\n                    \"related_activities\",\n                    \"related_agents\",\n                    \"format\",\n                    \"attachments\"\n                ],\n                i,\n                prop,\n                //\n                // list of parameters that are supported in all versions (supported by\n                // this library) of the spec\n                //\n                universal = {\n                    verb: true,\n                    registration: true,\n                    since: true,\n                    until: true,\n                    limit: true,\n                    ascending: true\n                },\n                //\n                // future proofing here, \"supported\" is an object so that\n                // in the future we can support a \"deprecated\" list to\n                // throw warnings, hopefully the spec uses deprecation phases\n                // for the removal of these things\n                //\n                compatibility = {\n                    \"0.9\": {\n                        supported: {\n                            actor: true,\n                            instructor: true,\n                            target: true,\n                            object: true,\n                            context: true,\n                            authoritative: true,\n                            sparse: true\n                        }\n                    },\n                    \"1.0.0\": {\n                        supported: {\n                            agent: true,\n                            activity: true,\n                            related_activities: true,\n                            related_agents: true,\n                            format: true,\n                            attachments: true\n                        }\n                    }\n                };\n\n            compatibility[\"0.95\"] = compatibility[\"0.9\"];\n            compatibility[\"1.0.1\"] = compatibility[\"1.0.0\"];\n            compatibility[\"1.0.2\"] = compatibility[\"1.0.0\"];\n\n            if (cfg.params.hasOwnProperty(\"target\")) {\n                cfg.params.object = cfg.params.target;\n            }\n\n            //\n            // check compatibility tables, either the configured parameter is in\n            // the universal list or the specific version, if not then throw an\n            // error which at least for .queryStatements will prevent the request\n            // and potentially alert the user\n            //\n            for (prop in cfg.params) {\n                if (cfg.params.hasOwnProperty(prop)) {\n                    if (typeof universal[prop] === \"undefined\" && typeof compatibility[this.version].supported[prop] === \"undefined\") {\n                        throw \"Unrecognized query parameter configured: \" + prop;\n                    }\n                }\n            }\n\n            //\n            // getting here means that all parameters are valid for this version\n            // to make handling the output formats easier\n            //\n\n            for (i = 0; i < jsonProps.length; i += 1) {\n                if (typeof cfg.params[jsonProps[i]] !== \"undefined\") {\n                    params[jsonProps[i]] = JSON.stringify(cfg.params[jsonProps[i]].asVersion(this.version));\n                }\n            }\n\n            for (i = 0; i < idProps.length; i += 1) {\n                if (typeof cfg.params[idProps[i]] !== \"undefined\") {\n                    if (typeof cfg.params[idProps[i]].id === \"undefined\") {\n                        params[idProps[i]] = cfg.params[idProps[i]];\n                    }\n                    else {\n                        params[idProps[i]] = cfg.params[idProps[i]].id;\n                    }\n                }\n            }\n\n            for (i = 0; i < valProps.length; i += 1) {\n                if (typeof cfg.params[valProps[i]] !== \"undefined\" && cfg.params[valProps[i]] !== null) {\n                    params[valProps[i]] = cfg.params[valProps[i]];\n                }\n            }\n\n            return returnCfg;\n        },\n\n        /**\n        Assigns attachment content to the correct attachment to create a StatementsResult object that is sent\n        to the callback of queryStatements()\n\n        @method _assignAttachmentContent\n        @private\n        @param {Array} [stmts] Array of TinCan.Statement JSON objects\n        @param {Object} [attachmentMap] Map of the content to place into its attachment\n        @return {Array} Array of TinCan.Statement JSON objects with correctly assigned attachment content\n        */\n        _assignAttachmentContent: function (stmts, attachmentMap) {\n            var i,\n                j;\n\n            for (i = 0; i < stmts.length; i += 1) {\n                if (stmts[i].hasOwnProperty(\"attachments\") && stmts[i].attachments !== null) {\n                    for (j = 0; j < stmts[i].attachments.length; j += 1) {\n                        if (attachmentMap.hasOwnProperty(stmts[i].attachments[j].sha2)) {\n                            stmts[i].attachments[j].content = attachmentMap[stmts[i].attachments[j].sha2];\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n        Parses the different sections of a multipart/mixed response\n\n        @method _parseMultipart\n        @private\n        @param {String} [boundary] Boundary used to mark off the sections of the response\n        @param {ArrayBuffer} [response] Body of the response\n        @return {Array} Array of objects containing the parsed headers and body of each part\n        */\n        _parseMultipart: function (boundary, response) {\n            /* global Uint8Array */\n            var __boundary = \"--\" + boundary,\n                byteArray,\n                bodyEncodedInString,\n                fullBodyEnd,\n                sliceStart,\n                sliceEnd,\n                headerStart,\n                headerEnd,\n                bodyStart,\n                bodyEnd,\n                headers,\n                body,\n                parts = [],\n                CRLF = 2;\n\n            //\n            // treating the reponse as a stream of bytes and assuming that headers\n            // and related mime boundaries are all US-ASCII (which is a safe assumption)\n            // allows us to treat the whole response as a string when looking for offsets\n            // but then slice on the raw array buffer\n            //\n            byteArray = new Uint8Array(response);\n            bodyEncodedInString = this.__uint8ToString(byteArray);\n\n            fullBodyEnd = bodyEncodedInString.indexOf(__boundary + \"--\");\n\n            sliceStart = bodyEncodedInString.indexOf(__boundary);\n            while (sliceStart !== -1) {\n                sliceEnd = bodyEncodedInString.indexOf(__boundary, sliceStart + __boundary.length);\n\n                headerStart = sliceStart + __boundary.length + CRLF;\n                headerEnd = bodyEncodedInString.indexOf(\"\\r\\n\\r\\n\", sliceStart);\n                bodyStart = headerEnd + CRLF + CRLF;\n                bodyEnd = sliceEnd - 2;\n\n                headers = this._parseHeaders(\n                    this.__uint8ToString(\n                        new Uint8Array( response.slice(headerStart, headerEnd) )\n                    )\n                );\n                body = response.slice(bodyStart, bodyEnd);\n\n                //\n                // we know the first slice is the statement, and we know it is a string in UTF-8 (spec requirement)\n                //\n                if (parts.length === 0) {\n                    body = TinCan.Utils.stringFromArrayBuffer(body);\n                }\n\n                parts.push(\n                    {\n                        headers: headers,\n                        body: body\n                    }\n                );\n\n                if (sliceEnd === fullBodyEnd) {\n                    sliceStart = -1;\n                }\n                else {\n                    sliceStart = sliceEnd;\n                }\n            }\n\n            return parts;\n        },\n\n        //\n        // implemented as a function to avoid 'RangeError: Maximum call stack size exceeded'\n        // when calling .fromCharCode on the full byteArray which results in a too long\n        // argument list for large arrays\n        //\n        __uint8ToString: function (byteArray) {\n            var result = \"\",\n                len = byteArray.byteLength,\n                i;\n\n            for (i = 0; i < len; i += 1) {\n                result += String.fromCharCode(byteArray[i]);\n            }\n            return result;\n        },\n\n        /**\n        Parses the headers of a multipart/mixed response section\n\n        @method _parseHeaders\n        @private\n        @param {String} [rawHeaders] String containing all the headers\n        @return {Object} Map of the headers\n        */\n        _parseHeaders: function (rawHeaders) {\n            var headers = {},\n                headerList,\n                key,\n                h,\n                i;\n\n            headerList = rawHeaders.split(\"\\n\");\n            for (i = 0; i < headerList.length; i += 1) {\n                h = headerList[i].split(\":\", 2);\n\n                if (h[1] !== null) {\n                    headers[h[0]] = h[1].replace(/^\\s+|\\s+$/g, \"\");\n\n                    key = h[0];\n                }\n                else {\n                    if (h[0].substring(0, 1) === \"\\t\") {\n                        headers[h[0]] = h[1].replace(/^\\s+|\\s+$/g, \"\");\n                    }\n                }\n            }\n\n            return headers;\n        },\n\n        /**\n        Fetch more statements from a previous query, when used from a browser sends to the endpoint using the\n        RESTful interface.  Use a callback to make the call asynchronous.\n\n        @method moreStatements\n        @param {Object} [cfg] Configuration used to query\n            @param {String} [cfg.url] More URL\n            @param {Function} [cfg.callback] Callback to execute on completion\n                @param {String|null} cfg.callback.err Error status or null if succcess\n                @param {TinCan.StatementsResult|XHR} cfg.callback.response Receives a StatementsResult argument\n        @return {Object} Request result\n        */\n        moreStatements: function (cfg) {\n            this.log(\"moreStatements: \" + cfg.url);\n            var requestCfg,\n                requestResult,\n                callbackWrapper,\n                parsedURL,\n                serverRoot;\n\n            cfg = cfg || {};\n\n            // to support our interface (to support IE) we need to break apart\n            // the more URL query params so that the request can be made properly later\n            parsedURL = TinCan.Utils.parseURL(cfg.url, { allowRelative: true });\n\n            // Respect a more URL that is relative to either the server root\n            // or endpoint (though only the former is allowed in the spec)\n            serverRoot = TinCan.Utils.getServerRoot(this.endpoint);\n            if (parsedURL.path.indexOf(\"/statements\") === 0){\n                parsedURL.path = this.endpoint.replace(serverRoot, \"\") + parsedURL.path;\n                this.log(\"converting non-standard more URL to \" + parsedURL.path);\n            }\n\n            // The more relative URL might not start with a slash, add it if not\n            if (parsedURL.path.indexOf(\"/\") !== 0) {\n                parsedURL.path = \"/\" + parsedURL.path;\n            }\n\n            requestCfg = {\n                method: \"GET\",\n                // For arbitrary more URLs to work, we need to make the URL absolute here\n                url: serverRoot + parsedURL.path,\n                params: parsedURL.params\n            };\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        result = TinCan.StatementsResult.fromJSON(xhr.responseText);\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            requestResult.config = requestCfg;\n\n            if (! callbackWrapper) {\n                requestResult.statementsResult = null;\n                if (requestResult.err === null) {\n                    requestResult.statementsResult = TinCan.StatementsResult.fromJSON(requestResult.xhr.responseText);\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve a state value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveState\n        @param {String} key Key of state to retrieve\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {String} [cfg.registration] Registration\n            @param {Function} [cfg.callback] Callback to execute on completion\n                @param {Object|Null} cfg.callback.error\n                @param {TinCan.State|null} cfg.callback.result null if state is 404\n            @param {Object} [cfg.requestHeaders] Object containing additional headers to add to request\n        @return {TinCan.State|Object} TinCan.State retrieved when synchronous, or result from sendRequest\n        */\n        retrieveState: function (key, cfg) {\n            this.log(\"retrieveState\");\n            var requestParams = {},\n                requestCfg = {},\n                requestResult,\n                callbackWrapper,\n                requestHeaders,\n                self = this;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestParams = {\n                stateId: key,\n                activityId: cfg.activity.id\n            };\n            if (this.version === \"0.9\") {\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if ((typeof cfg.registration !== \"undefined\") && (cfg.registration !== null)) {\n                if (this.version === \"0.9\") {\n                    requestParams.registrationId = cfg.registration;\n                }\n                else {\n                    requestParams.registration = cfg.registration;\n                }\n            }\n\n            requestCfg = {\n                url: \"activities/state\",\n                method: \"GET\",\n                params: requestParams,\n                ignore404: true,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        if (xhr.status === 404) {\n                            result = null;\n                        }\n                        else {\n                            result = new TinCan.State(\n                                {\n                                    id: key,\n                                    contents: xhr.responseText\n                                }\n                            );\n                            if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"ETag\") !== null && xhr.getResponseHeader(\"ETag\") !== \"\") {\n                                result.etag = xhr.getResponseHeader(\"ETag\");\n                            }\n                            else {\n                                //\n                                // either XHR didn't have getResponseHeader (probably cause it is an IE\n                                // XDomainRequest object which doesn't) or not populated by LRS so create\n                                // the hash ourselves\n                                //\n                                // the LRS is responsible for quoting the Etag value so we need to mimic\n                                // that behavior here as well\n                                //\n                                result.etag = \"\\\"\" + TinCan.Utils.getSHA1String(xhr.responseText) + \"\\\"\";\n                            }\n\n                            if (typeof xhr.contentType !== \"undefined\") {\n                                // most likely an XDomainRequest which has .contentType,\n                                // for the ones that it supports\n                                result.contentType = xhr.contentType;\n                            }\n                            else if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"Content-Type\") !== null && xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                                result.contentType = xhr.getResponseHeader(\"Content-Type\");\n                            }\n\n                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {\n                                try {\n                                    result.contents = JSON.parse(result.contents);\n                                } catch (ex) {\n                                    self.log(\"retrieveState - failed to deserialize JSON: \" + ex);\n                                }\n                            }\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.state = null;\n                if (requestResult.err === null && requestResult.xhr.status !== 404) {\n                    requestResult.state = new TinCan.State(\n                        {\n                            id: key,\n                            contents: requestResult.xhr.responseText\n                        }\n                    );\n                    if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"ETag\") !== null && requestResult.xhr.getResponseHeader(\"ETag\") !== \"\") {\n                        requestResult.state.etag = requestResult.xhr.getResponseHeader(\"ETag\");\n                    }\n                    else {\n                        //\n                        // either XHR didn't have getResponseHeader (probably cause it is an IE\n                        // XDomainRequest object which doesn't) or not populated by LRS so create\n                        // the hash ourselves\n                        //\n                        // the LRS is responsible for quoting the Etag value so we need to mimic\n                        // that behavior here as well\n                        //\n                        requestResult.state.etag = \"\\\"\" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + \"\\\"\";\n                    }\n                    if (typeof requestResult.xhr.contentType !== \"undefined\") {\n                        // most likely an XDomainRequest which has .contentType\n                        // for the ones that it supports\n                        requestResult.state.contentType = requestResult.xhr.contentType;\n                    }\n                    else if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"Content-Type\") !== null && requestResult.xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                        requestResult.state.contentType = requestResult.xhr.getResponseHeader(\"Content-Type\");\n                    }\n                    if (TinCan.Utils.isApplicationJSON(requestResult.state.contentType)) {\n                        try {\n                            requestResult.state.contents = JSON.parse(requestResult.state.contents);\n                        } catch (ex) {\n                            this.log(\"retrieveState - failed to deserialize JSON: \" + ex);\n                        }\n                    }\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve the list of IDs for a state, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveStateIds\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {String} [cfg.registration] Registration\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {String} [cfg.since] Match activity profiles saved since given timestamp\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Object} requestResult Request result\n        */\n        retrieveStateIds: function (cfg) {\n            this.log(\"retrieveStateIds\");\n            var requestParams = {},\n                requestCfg,\n                requestHeaders,\n                requestResult,\n                callbackWrapper;\n\n            cfg = cfg || {};\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestParams.activityId = cfg.activity.id;\n            if (this.version === \"0.9\") {\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if ((typeof cfg.registration !== \"undefined\") && (cfg.registration !== null)) {\n                if (this.version === \"0.9\") {\n                    requestParams.registrationId = cfg.registration;\n                }\n                else {\n                    requestParams.registration = cfg.registration;\n                }\n            }\n\n            requestCfg = {\n                url: \"activities/state\",\n                method: \"GET\",\n                params: requestParams,\n                headers: requestHeaders,\n                ignore404: true\n            };\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err !== null) {\n                        cfg.callback(err, result);\n                        return;\n                    }\n\n                    if (xhr.status === 404) {\n                        result = [];\n                    }\n                    else {\n                        try {\n                            result = JSON.parse(xhr.responseText);\n                        }\n                        catch (ex) {\n                            err = \"Response JSON parse error: \" + ex;\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n            if (typeof cfg.since !== \"undefined\") {\n                requestCfg.params.since = cfg.since;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.profileIds = null;\n                if (requestResult.err !== null) {\n                    return requestResult;\n                }\n\n                if (requestResult.xhr.status === 404) {\n                    requestResult.profileIds = [];\n                }\n                else {\n                    try {\n                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);\n                    }\n                    catch (ex) {\n                        requestResult.err = \"retrieveStateIds - JSON parse error: \" + ex;\n                    }\n                }\n            }\n            return requestResult;\n        },\n\n        /**\n        Save a state value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method saveState\n        @param {String} key Key of state to save\n        @param val Value to be stored\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {String} [cfg.registration] Registration\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing state\n            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')\n            @param {String} [cfg.method] Method to use. Default: PUT\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        saveState: function (key, val, cfg) {\n            this.log(\"saveState\");\n            var requestParams,\n                requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            if (typeof cfg.contentType === \"undefined\") {\n                cfg.contentType = \"application/octet-stream\";\n            }\n            requestHeaders[\"Content-Type\"] = cfg.contentType;\n\n            if (typeof val === \"object\" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {\n                val = JSON.stringify(val);\n            }\n\n            if (typeof cfg.method === \"undefined\" || cfg.method !== \"POST\") {\n                cfg.method = \"PUT\";\n            }\n\n            requestParams = {\n                stateId: key,\n                activityId: cfg.activity.id\n            };\n            if (this.version === \"0.9\") {\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if ((typeof cfg.registration !== \"undefined\") && (cfg.registration !== null)) {\n                if (this.version === \"0.9\") {\n                    requestParams.registrationId = cfg.registration;\n                }\n                else {\n                    requestParams.registration = cfg.registration;\n                }\n            }\n\n            requestCfg = {\n                url: \"activities/state\",\n                method: cfg.method,\n                params: requestParams,\n                data: val,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n            if (typeof cfg.lastSHA1 !== \"undefined\" && cfg.lastSHA1 !== null) {\n                requestCfg.headers[\"If-Match\"] = cfg.lastSHA1;\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Drop a state value or all of the state, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method dropState\n        @param {String|null} key Key of state to delete, or null for all\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {String} [cfg.registration] Registration\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        dropState: function (key, cfg) {\n            this.log(\"dropState\");\n            var requestParams,\n                requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestParams = {\n                activityId: cfg.activity.id\n            };\n            if (this.version === \"0.9\") {\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if (key !== null) {\n                requestParams.stateId = key;\n            }\n            if ((typeof cfg.registration !== \"undefined\") && (cfg.registration !== null)) {\n                if (this.version === \"0.9\") {\n                    requestParams.registrationId = cfg.registration;\n                }\n                else {\n                    requestParams.registration = cfg.registration;\n                }\n            }\n\n            requestCfg = {\n                url: \"activities/state\",\n                method: \"DELETE\",\n                params: requestParams,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Retrieve an activity, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveActivity\n        @param {String} activityId id of the Activity to retrieve\n        @param {Object} cfg Configuration options\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Object} Value retrieved\n        */\n        retrieveActivity: function (activityId, cfg) {\n            this.log(\"retrieveActivity\");\n            var requestCfg = {},\n                requestResult,\n                callbackWrapper,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestCfg = {\n                url: \"activities\",\n                method: \"GET\",\n                params: {\n                    activityId: activityId\n                },\n                ignore404: true,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        //\n                        // a 404 really shouldn't happen because the LRS can dynamically\n                        // build the response based on what has been passed to it, but\n                        // don't have the client fail in the condition that it does, because\n                        // we can do the same thing\n                        //\n                        if (xhr.status === 404) {\n                            result = new TinCan.Activity(\n                                {\n                                    id: activityId\n                                }\n                            );\n                        }\n                        else {\n                            result = TinCan.Activity.fromJSON(xhr.responseText);\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.activity = null;\n                if (requestResult.err === null) {\n                    if (requestResult.xhr.status === 404) {\n                        requestResult.activity = new TinCan.Activity(\n                            {\n                                id: activityId\n                            }\n                        );\n                    }\n                    else {\n                        requestResult.activity = TinCan.Activity.fromJSON(requestResult.xhr.responseText);\n                    }\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve an activity profile value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveActivityProfile\n        @param {String} key Key of activity profile to retrieve\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Object} Value retrieved\n        */\n        retrieveActivityProfile: function (key, cfg) {\n            this.log(\"retrieveActivityProfile\");\n            var requestCfg = {},\n                requestResult,\n                callbackWrapper,\n                requestHeaders,\n                self = this;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestCfg = {\n                url: \"activities/profile\",\n                method: \"GET\",\n                params: {\n                    profileId: key,\n                    activityId: cfg.activity.id\n                },\n                ignore404: true,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        if (xhr.status === 404) {\n                            result = null;\n                        }\n                        else {\n                            result = new TinCan.ActivityProfile(\n                                {\n                                    id: key,\n                                    activity: cfg.activity,\n                                    contents: xhr.responseText\n                                }\n                            );\n                            if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"ETag\") !== null && xhr.getResponseHeader(\"ETag\") !== \"\") {\n                                result.etag = xhr.getResponseHeader(\"ETag\");\n                            }\n                            else {\n                                //\n                                // either XHR didn't have getResponseHeader (probably cause it is an IE\n                                // XDomainRequest object which doesn't) or not populated by LRS so create\n                                // the hash ourselves\n                                //\n                                // the LRS is responsible for quoting the Etag value so we need to mimic\n                                // that behavior here as well\n                                //\n                                result.etag = \"\\\"\" + TinCan.Utils.getSHA1String(xhr.responseText) + \"\\\"\";\n                            }\n                            if (typeof xhr.contentType !== \"undefined\") {\n                                // most likely an XDomainRequest which has .contentType\n                                // for the ones that it supports\n                                result.contentType = xhr.contentType;\n                            }\n                            else if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"Content-Type\") !== null && xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                                result.contentType = xhr.getResponseHeader(\"Content-Type\");\n                            }\n                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {\n                                try {\n                                    result.contents = JSON.parse(result.contents);\n                                } catch (ex) {\n                                    self.log(\"retrieveActivityProfile - failed to deserialize JSON: \" + ex);\n                                }\n                            }\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.profile = null;\n                if (requestResult.err === null && requestResult.xhr.status !== 404) {\n                    requestResult.profile = new TinCan.ActivityProfile(\n                        {\n                            id: key,\n                            activity: cfg.activity,\n                            contents: requestResult.xhr.responseText\n                        }\n                    );\n                    if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"ETag\") !== null && requestResult.xhr.getResponseHeader(\"ETag\") !== \"\") {\n                        requestResult.profile.etag = requestResult.xhr.getResponseHeader(\"ETag\");\n                    }\n                    else {\n                        //\n                        // either XHR didn't have getResponseHeader (probably cause it is an IE\n                        // XDomainRequest object which doesn't) or not populated by LRS so create\n                        // the hash ourselves\n                        //\n                        // the LRS is responsible for quoting the Etag value so we need to mimic\n                        // that behavior here as well\n                        //\n                        requestResult.profile.etag = \"\\\"\" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + \"\\\"\";\n                    }\n                    if (typeof requestResult.xhr.contentType !== \"undefined\") {\n                        // most likely an XDomainRequest which has .contentType\n                        // for the ones that it supports\n                        requestResult.profile.contentType = requestResult.xhr.contentType;\n                    }\n                    else if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"Content-Type\") !== null && requestResult.xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                        requestResult.profile.contentType = requestResult.xhr.getResponseHeader(\"Content-Type\");\n                    }\n                    if (TinCan.Utils.isApplicationJSON(requestResult.profile.contentType)) {\n                        try {\n                            requestResult.profile.contents = JSON.parse(requestResult.profile.contents);\n                        } catch (ex) {\n                            this.log(\"retrieveActivityProfile - failed to deserialize JSON: \" + ex);\n                        }\n                    }\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve the list of IDs for an activity profile, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveActivityProfileIds\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {String} [cfg.since] Match activity profiles saved since given timestamp\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Array} List of ids for this Activity profile\n        */\n        retrieveActivityProfileIds: function (cfg) {\n            this.log(\"retrieveActivityProfileIds\");\n            var requestCfg,\n                requestHeaders,\n                requestResult,\n                callbackWrapper;\n\n            cfg = cfg || {};\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestCfg = {\n                url: \"activities/profile\",\n                method: \"GET\",\n                params: {\n                    activityId: cfg.activity.id\n                },\n                headers: requestHeaders,\n                ignore404: true\n            };\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err !== null) {\n                        cfg.callback(err, result);\n                        return;\n                    }\n\n                    if (xhr.status === 404) {\n                        result = [];\n                    }\n                    else {\n                        try {\n                            result = JSON.parse(xhr.responseText);\n                        }\n                        catch (ex) {\n                            err = \"Response JSON parse error: \" + ex;\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n            if (typeof cfg.since !== \"undefined\") {\n                requestCfg.params.since = cfg.since;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.profileIds = null;\n                if (requestResult.err !== null) {\n                    return requestResult;\n                }\n\n                if (requestResult.xhr.status === 404) {\n                    requestResult.profileIds = [];\n                }\n                else {\n                    try {\n                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);\n                    }\n                    catch (ex) {\n                        requestResult.err = \"retrieveActivityProfileIds - JSON parse error: \" + ex;\n                    }\n                }\n            }\n            return requestResult;\n        },\n\n        /**\n        Save an activity profile value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method saveActivityProfile\n        @param {String} key Key of activity profile to retrieve\n        @param val Value to be stored\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile\n            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')\n            @param {String} [cfg.method] Method to use. Default: PUT\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        saveActivityProfile: function (key, val, cfg) {\n            this.log(\"saveActivityProfile\");\n            var requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            if (typeof cfg.contentType === \"undefined\") {\n                cfg.contentType = \"application/octet-stream\";\n            }\n            requestHeaders[\"Content-Type\"] = cfg.contentType;\n\n            if (typeof cfg.method === \"undefined\" || cfg.method !== \"POST\") {\n                cfg.method = \"PUT\";\n            }\n\n            if (typeof val === \"object\" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {\n                val = JSON.stringify(val);\n            }\n\n            requestCfg = {\n                url: \"activities/profile\",\n                method: cfg.method,\n                params: {\n                    profileId: key,\n                    activityId: cfg.activity.id\n                },\n                data: val,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n            if (typeof cfg.lastSHA1 !== \"undefined\" && cfg.lastSHA1 !== null) {\n                requestCfg.headers[\"If-Match\"] = cfg.lastSHA1;\n            }\n            else {\n                requestCfg.headers[\"If-None-Match\"] = \"*\";\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Drop an activity profile value, when used from a browser sends to the endpoint using the RESTful interface. Full activity profile\n        delete is not supported by the spec.\n\n        @method dropActivityProfile\n        @param {String|null} key Key of activity profile to delete\n        @param {Object} cfg Configuration options\n            @param {TinCan.Activity} cfg.activity Activity in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        dropActivityProfile: function (key, cfg) {\n            this.log(\"dropActivityProfile\");\n            var requestParams,\n                requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestParams = {\n                profileId: key,\n                activityId: cfg.activity.id\n            };\n\n            requestCfg = {\n                url: \"activities/profile\",\n                method: \"DELETE\",\n                params: requestParams,\n                headers: requestHeaders\n            };\n\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Retrieve an agent profile value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveAgentProfile\n        @param {String} key Key of agent profile to retrieve\n        @param {Object} cfg Configuration options\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Object} Value retrieved\n        */\n        retrieveAgentProfile: function (key, cfg) {\n            this.log(\"retrieveAgentProfile\");\n            var requestCfg = {},\n                requestResult,\n                callbackWrapper,\n                requestHeaders,\n                self = this;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestCfg = {\n                method: \"GET\",\n                params: {\n                    profileId: key\n                },\n                ignore404: true,\n                headers: requestHeaders\n            };\n\n            if (this.version === \"0.9\") {\n                requestCfg.url = \"actors/profile\";\n                requestCfg.params.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestCfg.url = \"agents/profile\";\n                requestCfg.params.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err === null) {\n                        if (xhr.status === 404) {\n                            result = null;\n                        }\n                        else {\n                            result = new TinCan.AgentProfile(\n                                {\n                                    id: key,\n                                    agent: cfg.agent,\n                                    contents: xhr.responseText\n                                }\n                            );\n                            if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"ETag\") !== null && xhr.getResponseHeader(\"ETag\") !== \"\") {\n                                result.etag = xhr.getResponseHeader(\"ETag\");\n                            }\n                            else {\n                                //\n                                // either XHR didn't have getResponseHeader (probably cause it is an IE\n                                // XDomainRequest object which doesn't) or not populated by LRS so create\n                                // the hash ourselves\n                                //\n                                // the LRS is responsible for quoting the Etag value so we need to mimic\n                                // that behavior here as well\n                                //\n                                result.etag = \"\\\"\" + TinCan.Utils.getSHA1String(xhr.responseText) + \"\\\"\";\n                            }\n                            if (typeof xhr.contentType !== \"undefined\") {\n                                // most likely an XDomainRequest which has .contentType\n                                // for the ones that it supports\n                                result.contentType = xhr.contentType;\n                            }\n                            else if (typeof xhr.getResponseHeader !== \"undefined\" && xhr.getResponseHeader(\"Content-Type\") !== null && xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                                result.contentType = xhr.getResponseHeader(\"Content-Type\");\n                            }\n                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {\n                                try {\n                                    result.contents = JSON.parse(result.contents);\n                                } catch (ex) {\n                                    self.log(\"retrieveAgentProfile - failed to deserialize JSON: \" + ex);\n                                }\n                            }\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.profile = null;\n                if (requestResult.err === null && requestResult.xhr.status !== 404) {\n                    requestResult.profile = new TinCan.AgentProfile(\n                        {\n                            id: key,\n                            agent: cfg.agent,\n                            contents: requestResult.xhr.responseText\n                        }\n                    );\n                    if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"ETag\") !== null && requestResult.xhr.getResponseHeader(\"ETag\") !== \"\") {\n                        requestResult.profile.etag = requestResult.xhr.getResponseHeader(\"ETag\");\n                    }\n                    else {\n                        //\n                        // either XHR didn't have getResponseHeader (probably cause it is an IE\n                        // XDomainRequest object which doesn't) or not populated by LRS so create\n                        // the hash ourselves\n                        //\n                        // the LRS is responsible for quoting the Etag value so we need to mimic\n                        // that behavior here as well\n                        //\n                        requestResult.profile.etag = \"\\\"\" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + \"\\\"\";\n                    }\n                    if (typeof requestResult.xhr.contentType !== \"undefined\") {\n                        // most likely an XDomainRequest which has .contentType\n                        // for the ones that it supports\n                        requestResult.profile.contentType = requestResult.xhr.contentType;\n                    }\n                    else if (typeof requestResult.xhr.getResponseHeader !== \"undefined\" && requestResult.xhr.getResponseHeader(\"Content-Type\") !== null && requestResult.xhr.getResponseHeader(\"Content-Type\") !== \"\") {\n                        requestResult.profile.contentType = requestResult.xhr.getResponseHeader(\"Content-Type\");\n                    }\n                    if (TinCan.Utils.isApplicationJSON(requestResult.profile.contentType)) {\n                        try {\n                            requestResult.profile.contents = JSON.parse(requestResult.profile.contents);\n                        } catch (ex) {\n                            this.log(\"retrieveAgentProfile - failed to deserialize JSON: \" + ex);\n                        }\n                    }\n                }\n            }\n\n            return requestResult;\n        },\n\n        /**\n        Retrieve the list of profileIds for an agent profile, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method retrieveAgentProfileIds\n        @param {Object} cfg Configuration options\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {String} [cfg.since] Match activity profiles saved since given timestamp\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        @return {Array} List of profileIds for this Agent\n\n        */\n        retrieveAgentProfileIds: function (cfg) {\n            this.log(\"retrieveAgentProfileIds\");\n            var requestParams = {},\n                requestCfg,\n                requestHeaders,\n                requestResult,\n                callbackWrapper;\n\n            cfg = cfg || {};\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestCfg = {\n                method: \"GET\",\n                params: requestParams,\n                headers: requestHeaders,\n                ignore404: true\n            };\n\n            if (this.version === \"0.9\") {\n                requestCfg.url = \"actors/profile\";\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestCfg.url = \"agents/profile\";\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if (typeof cfg.callback !== \"undefined\") {\n                callbackWrapper = function (err, xhr) {\n                    var result = xhr;\n\n                    if (err !== null) {\n                        cfg.callback(err, result);\n                        return;\n                    }\n\n                    if (xhr.status === 404) {\n                        result = [];\n                    }\n                    else {\n                        try {\n                            result = JSON.parse(xhr.responseText);\n                        }\n                        catch (ex) {\n                            err = \"Response JSON parse error: \" + ex;\n                        }\n                    }\n\n                    cfg.callback(err, result);\n                };\n                requestCfg.callback = callbackWrapper;\n            }\n            if (typeof cfg.since !== \"undefined\") {\n                requestCfg.params.since = cfg.since;\n            }\n\n            requestResult = this.sendRequest(requestCfg);\n            if (! callbackWrapper) {\n                requestResult.profileIds = null;\n                if (requestResult.err !== null) {\n                    return requestResult;\n                }\n\n                if (requestResult.xhr.status === 404) {\n                    requestResult.profileIds = [];\n                }\n                else {\n                    try {\n                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);\n                    }\n                    catch (ex) {\n                        requestResult.err = \"retrieveAgentProfileIds - JSON parse error: \" + ex;\n                    }\n                }\n            }\n            return requestResult;\n        },\n\n        /**\n        Save an agent profile value, when used from a browser sends to the endpoint using the RESTful interface.\n\n        @method saveAgentProfile\n        @param {String} key Key of agent profile to retrieve\n        @param val Value to be stored\n        @param {Object} cfg Configuration options\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile\n            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')\n            @param {String} [cfg.method] Method to use. Default: PUT\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        saveAgentProfile: function (key, val, cfg) {\n            this.log(\"saveAgentProfile\");\n            var requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            if (typeof cfg.contentType === \"undefined\") {\n                cfg.contentType = \"application/octet-stream\";\n            }\n            requestHeaders[\"Content-Type\"] = cfg.contentType;\n\n            if (typeof cfg.method === \"undefined\" || cfg.method !== \"POST\") {\n                cfg.method = \"PUT\";\n            }\n\n            if (typeof val === \"object\" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {\n                val = JSON.stringify(val);\n            }\n\n            requestCfg = {\n                method: cfg.method,\n                params: {\n                    profileId: key\n                },\n                data: val,\n                headers: requestHeaders\n            };\n\n            if (this.version === \"0.9\") {\n                requestCfg.url = \"actors/profile\";\n                requestCfg.params.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestCfg.url = \"agents/profile\";\n                requestCfg.params.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n            if (typeof cfg.lastSHA1 !== \"undefined\" && cfg.lastSHA1 !== null) {\n                requestCfg.headers[\"If-Match\"] = cfg.lastSHA1;\n            }\n            else {\n                requestCfg.headers[\"If-None-Match\"] = \"*\";\n            }\n\n            return this.sendRequest(requestCfg);\n        },\n\n        /**\n        Drop an agent profile value, when used from a browser sends to the endpoint using the RESTful interface. Full agent profile\n        delete is not supported by the spec.\n\n        @method dropAgentProfile\n        @param {String|null} key Key of agent profile to delete\n        @param {Object} cfg Configuration options\n            @param {TinCan.Agent} cfg.agent Agent in document identifier\n            @param {Function} [cfg.callback] Callback to execute on completion\n            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request\n        */\n        dropAgentProfile: function (key, cfg) {\n            this.log(\"dropAgentProfile\");\n            var requestParams,\n                requestCfg,\n                requestHeaders;\n\n            requestHeaders = cfg.requestHeaders || {};\n\n            requestParams = {\n                profileId: key\n            };\n            requestCfg = {\n                method: \"DELETE\",\n                params: requestParams,\n                headers: requestHeaders\n            };\n\n            if (this.version === \"0.9\") {\n                requestCfg.url = \"actors/profile\";\n                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            else {\n                requestCfg.url = \"agents/profile\";\n                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));\n            }\n            if (typeof cfg.callback !== \"undefined\") {\n                requestCfg.callback = cfg.callback;\n            }\n\n            return this.sendRequest(requestCfg);\n        }\n    };\n\n    /**\n    Allows client code to determine whether their environment supports synchronous xhr handling\n    @static this is a static property, set by the environment\n    */\n    LRS.syncEnabled = null;\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.AgentAccount\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.AgentAccount\n    @constructor\n    */\n    var AgentAccount = TinCan.AgentAccount = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property homePage\n        @type String\n        */\n        this.homePage = null;\n\n        /**\n        @property name\n        @type String\n        */\n        this.name = null;\n\n        this.init(cfg);\n    };\n    AgentAccount.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"AgentAccount\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"name\",\n                    \"homePage\"\n                ];\n\n            cfg = cfg || {};\n\n            // handle .9 name changes\n            if (typeof cfg.accountServiceHomePage !== \"undefined\") {\n                cfg.homePage = cfg.accountServiceHomePage;\n            }\n            if (typeof cfg.accountName !== \"undefined\") {\n                cfg.name = cfg.accountName;\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        toString: function () {\n            this.log(\"toString\");\n            var result = \"\";\n\n            if (this.name !== null || this.homePage !== null) {\n                result += this.name !== null ? this.name : \"-\";\n                result += \":\";\n                result += this.homePage !== null ? this.homePage : \"-\";\n            }\n            else {\n                result = \"AgentAccount: unidentified\";\n            }\n\n            return result;\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion: \" + version);\n            var result = {};\n\n            version = version || TinCan.versions()[0];\n\n            if (version === \"0.9\") {\n                result.accountName = this.name;\n                result.accountServiceHomePage = this.homePage;\n            } else {\n                result.name = this.name;\n                result.homePage = this.homePage;\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} AgentAccount\n    @static\n    */\n    AgentAccount.fromJSON = function (acctJSON) {\n        AgentAccount.prototype.log(\"fromJSON\");\n        var _acct = JSON.parse(acctJSON);\n\n        return new AgentAccount(_acct);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Agent\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Agent\n    @constructor\n    */\n    var Agent = TinCan.Agent = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property name\n        @type String\n        */\n        this.name = null;\n\n        /**\n        @property mbox\n        @type String\n        */\n        this.mbox = null;\n\n        /**\n        @property mbox_sha1sum\n        @type String\n        */\n        this.mbox_sha1sum = null;\n\n        /**\n        @property openid\n        @type String\n        */\n        this.openid = null;\n\n        /**\n        @property account\n        @type TinCan.AgentAccount\n        */\n        this.account = null;\n\n        /**\n        @property degraded\n        @type Boolean\n        @default false\n        */\n        this.degraded = false;\n\n        this.init(cfg);\n    };\n    Agent.prototype = {\n        /**\n        @property objectType\n        @type String\n        @default Agent\n        */\n        objectType: \"Agent\",\n\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Agent\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"name\",\n                    \"mbox\",\n                    \"mbox_sha1sum\",\n                    \"openid\"\n                ],\n                val\n            ;\n\n            cfg = cfg || {};\n\n            // handle .9 split names and array properties into single interface\n            if (typeof cfg.lastName !== \"undefined\" || typeof cfg.firstName !== \"undefined\") {\n                cfg.name = \"\";\n                if (typeof cfg.firstName !== \"undefined\" && cfg.firstName.length > 0) {\n                    cfg.name = cfg.firstName[0];\n                    if (cfg.firstName.length > 1) {\n                        this.degraded = true;\n                    }\n                }\n\n                if (cfg.name !== \"\") {\n                    cfg.name += \" \";\n                }\n\n                if (typeof cfg.lastName !== \"undefined\" && cfg.lastName.length > 0) {\n                    cfg.name += cfg.lastName[0];\n                    if (cfg.lastName.length > 1) {\n                        this.degraded = true;\n                    }\n                }\n            } else if (typeof cfg.familyName !== \"undefined\" || typeof cfg.givenName !== \"undefined\") {\n                cfg.name = \"\";\n                if (typeof cfg.givenName !== \"undefined\" && cfg.givenName.length > 0) {\n                    cfg.name = cfg.givenName[0];\n                    if (cfg.givenName.length > 1) {\n                        this.degraded = true;\n                    }\n                }\n\n                if (cfg.name !== \"\") {\n                    cfg.name += \" \";\n                }\n\n                if (typeof cfg.familyName !== \"undefined\" && cfg.familyName.length > 0) {\n                    cfg.name += cfg.familyName[0];\n                    if (cfg.familyName.length > 1) {\n                        this.degraded = true;\n                    }\n                }\n            }\n\n            if (typeof cfg.name === \"object\" && cfg.name !== null) {\n                if (cfg.name.length > 1) {\n                    this.degraded = true;\n                }\n                cfg.name = cfg.name[0];\n            }\n            if (typeof cfg.mbox === \"object\" && cfg.mbox !== null) {\n                if (cfg.mbox.length > 1) {\n                    this.degraded = true;\n                }\n                cfg.mbox = cfg.mbox[0];\n            }\n            if (typeof cfg.mbox_sha1sum === \"object\" && cfg.mbox_sha1sum !== null) {\n                if (cfg.mbox_sha1sum.length > 1) {\n                    this.degraded = true;\n                }\n                cfg.mbox_sha1sum = cfg.mbox_sha1sum[0];\n            }\n            if (typeof cfg.openid === \"object\" && cfg.openid !== null) {\n                if (cfg.openid.length > 1) {\n                    this.degraded = true;\n                }\n                cfg.openid = cfg.openid[0];\n            }\n            if (typeof cfg.account === \"object\" && cfg.account !== null && typeof cfg.account.homePage === \"undefined\" && typeof cfg.account.name === \"undefined\") {\n                if (cfg.account.length === 0) {\n                    delete cfg.account;\n                }\n                else {\n                    if (cfg.account.length > 1) {\n                        this.degraded = true;\n                    }\n                    cfg.account = cfg.account[0];\n                }\n            }\n\n            if (cfg.hasOwnProperty(\"account\")) {\n                if (cfg.account instanceof TinCan.AgentAccount) {\n                    this.account = cfg.account;\n                }\n                else {\n                    this.account = new TinCan.AgentAccount (cfg.account);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    val = cfg[directProps[i]];\n                    if (directProps[i] === \"mbox\" && val.indexOf(\"mailto:\") === -1) {\n                        val = \"mailto:\" + val;\n                    }\n                    this[directProps[i]] = val;\n                }\n            }\n        },\n\n        toString: function () {\n            this.log(\"toString\");\n\n            if (this.name !== null) {\n                return this.name;\n            }\n            if (this.mbox !== null) {\n                return this.mbox.replace(\"mailto:\", \"\");\n            }\n            if (this.mbox_sha1sum !== null) {\n                return this.mbox_sha1sum;\n            }\n            if (this.openid !== null) {\n                return this.openid;\n            }\n            if (this.account !== null) {\n                return this.account.toString();\n            }\n\n            return this.objectType + \": unidentified\";\n        },\n\n        /**\n        While a TinCan.Agent instance can store more than one inverse functional identifier\n        this method will always only output one to be compliant with the statement sending\n        specification. Order of preference is: mbox, mbox_sha1sum, openid, account\n\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion: \" + version);\n            var result = {\n                objectType: this.objectType\n            };\n\n            version = version || TinCan.versions()[0];\n\n            if (version === \"0.9\") {\n                if (this.mbox !== null) {\n                    result.mbox = [ this.mbox ];\n                }\n                else if (this.mbox_sha1sum !== null) {\n                    result.mbox_sha1sum = [ this.mbox_sha1sum ];\n                }\n                else if (this.openid !== null) {\n                    result.openid = [ this.openid ];\n                }\n                else if (this.account !== null) {\n                    result.account = [ this.account.asVersion(version) ];\n                }\n\n                if (this.name !== null) {\n                    result.name = [ this.name ];\n                }\n            } else {\n                if (this.mbox !== null) {\n                    result.mbox = this.mbox;\n                }\n                else if (this.mbox_sha1sum !== null) {\n                    result.mbox_sha1sum = this.mbox_sha1sum;\n                }\n                else if (this.openid !== null) {\n                    result.openid = this.openid;\n                }\n                else if (this.account !== null) {\n                    result.account = this.account.asVersion(version);\n                }\n\n                if (this.name !== null) {\n                    result.name = this.name;\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Agent\n    @static\n    */\n    Agent.fromJSON = function (agentJSON) {\n        Agent.prototype.log(\"fromJSON\");\n        var _agent = JSON.parse(agentJSON);\n\n        return new Agent(_agent);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Group\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Group\n    @constructor\n    */\n    var Group = TinCan.Group = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property name\n        @type String\n        */\n        this.name = null;\n\n        /**\n        @property mbox\n        @type String\n        */\n        this.mbox = null;\n\n        /**\n        @property mbox_sha1sum\n        @type String\n        */\n        this.mbox_sha1sum = null;\n\n        /**\n        @property openid\n        @type String\n        */\n        this.openid = null;\n\n        /**\n        @property account\n        @type TinCan.AgentAccount\n        */\n        this.account = null;\n\n        /**\n        @property member\n        @type Array\n        */\n        this.member = [];\n\n        this.init(cfg);\n    };\n    Group.prototype = {\n        /**\n        @property objectType\n        @type String\n        @default \"Group\"\n        @static\n        */\n        objectType: \"Group\",\n\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Group\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i;\n\n            cfg = cfg || {};\n\n            TinCan.Agent.prototype.init.call(this, cfg);\n\n            if (typeof cfg.member !== \"undefined\") {\n                for (i = 0; i < cfg.member.length; i += 1) {\n                    if (cfg.member[i] instanceof TinCan.Agent) {\n                        this.member.push(cfg.member[i]);\n                    }\n                    else {\n                        this.member.push(new TinCan.Agent (cfg.member[i]));\n                    }\n                }\n            }\n        },\n\n        toString: function (lang) {\n            this.log(\"toString\");\n\n            var result = TinCan.Agent.prototype.toString.call(this, lang);\n            if (result !== this.objectType + \": unidentified\") {\n                result = this.objectType + \": \" + result;\n            }\n\n            return result;\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion: \" + version);\n            var result,\n                i\n            ;\n\n            version = version || TinCan.versions()[0];\n\n            result = TinCan.Agent.prototype.asVersion.call(this, version);\n\n            if (this.member.length > 0) {\n                result.member = [];\n                for (i = 0; i < this.member.length; i += 1) {\n                    result.member.push(this.member[i].asVersion(version));\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Group\n    @static\n    */\n    Group.fromJSON = function (groupJSON) {\n        Group.prototype.log(\"fromJSON\");\n        var _group = JSON.parse(groupJSON);\n\n        return new Group(_group);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Verb\n*/\n(function () {\n    \"use strict\";\n\n    //\n    // this represents the full set of verb values that were\n    // allowed by the .9 spec version, if an object is created with one of\n    // the short forms it will be upconverted to the matching long form,\n    // for local storage and use and if an object is needed in .9 version\n    // consequently down converted\n    //\n    // hopefully this list will never grow (or change) and only the exact\n    // ADL compatible URLs should be matched\n    //\n    var _downConvertMap = {\n        \"http://adlnet.gov/expapi/verbs/experienced\": \"experienced\",\n        \"http://adlnet.gov/expapi/verbs/attended\":    \"attended\",\n        \"http://adlnet.gov/expapi/verbs/attempted\":   \"attempted\",\n        \"http://adlnet.gov/expapi/verbs/completed\":   \"completed\",\n        \"http://adlnet.gov/expapi/verbs/passed\":      \"passed\",\n        \"http://adlnet.gov/expapi/verbs/failed\":      \"failed\",\n        \"http://adlnet.gov/expapi/verbs/answered\":    \"answered\",\n        \"http://adlnet.gov/expapi/verbs/interacted\":  \"interacted\",\n        \"http://adlnet.gov/expapi/verbs/imported\":    \"imported\",\n        \"http://adlnet.gov/expapi/verbs/created\":     \"created\",\n        \"http://adlnet.gov/expapi/verbs/shared\":      \"shared\",\n        \"http://adlnet.gov/expapi/verbs/voided\":      \"voided\"\n    },\n\n    /**\n    @class TinCan.Verb\n    @constructor\n    */\n    Verb = TinCan.Verb = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property display\n        @type Object\n        */\n        this.display = null;\n\n        this.init(cfg);\n    };\n    Verb.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Verb\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"display\"\n                ],\n                prop\n            ;\n\n            if (typeof cfg === \"string\") {\n                this.id = cfg;\n                this.display = {\n                    und: this.id\n                };\n\n                //If simple string like \"attempted\" was passed in (0.9 verbs), \n                //upconvert the ID to the 0.95 ADL version\n                for (prop in _downConvertMap) {\n                    if (_downConvertMap.hasOwnProperty(prop) && _downConvertMap[prop] === cfg) {\n                        this.id = prop;\n                        break;\n                    }\n                }\n            }\n            else {\n                cfg = cfg || {};\n\n                for (i = 0; i < directProps.length; i += 1) {\n                    if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                        this[directProps[i]] = cfg[directProps[i]];\n                    }\n                }\n\n                if (this.display === null && typeof _downConvertMap[this.id] !== \"undefined\") {\n                    this.display = {\n                        \"und\": _downConvertMap[this.id]\n                    };\n                }\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the verb\n        */\n        toString: function (lang) {\n            this.log(\"toString\");\n\n            if (this.display !== null) {\n                return this.getLangDictionaryValue(\"display\", lang);\n            }\n\n            return this.id;\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result;\n\n            version = version || TinCan.versions()[0];\n\n            if (version === \"0.9\") {\n                result = _downConvertMap[this.id];\n            }\n            else {\n                result = {\n                    id: this.id\n                };\n                if (this.display !== null) {\n                    result.display = this.display;\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        See {{#crossLink \"TinCan.Utils/getLangDictionaryValue\"}}{{/crossLink}}\n\n        @method getLangDictionaryValue\n        */\n        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue\n    };\n\n    /**\n    @method fromJSON\n    @param {String} verbJSON String of JSON representing the verb\n    @return {Object} Verb\n    @static\n    */\n    Verb.fromJSON = function (verbJSON) {\n        Verb.prototype.log(\"fromJSON\");\n        var _verb = JSON.parse(verbJSON);\n\n        return new Verb(_verb);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Result\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Result\n    @constructor\n    */\n    var Result = TinCan.Result = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property score\n        @type TinCan.Score|null\n        */\n        this.score = null;\n\n        /**\n        @property success\n        @type Boolean|null\n        */\n        this.success = null;\n\n        /**\n        @property completion\n        @type Boolean|null\n        */\n        this.completion = null;\n\n        /**\n        @property duration\n        @type String|null\n        */\n        this.duration = null;\n\n        /**\n        @property response\n        @type String|null\n        */\n        this.response = null;\n\n        /**\n        @property extensions\n        @type Object|null\n        */\n        this.extensions = null;\n\n        this.init(cfg);\n    };\n    Result.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Result\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                directProps = [\n                    \"completion\",\n                    \"duration\",\n                    \"extensions\",\n                    \"response\",\n                    \"success\"\n                ]\n            ;\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"score\") && cfg.score !== null) {\n                if (cfg.score instanceof TinCan.Score) {\n                    this.score = cfg.score;\n                }\n                else {\n                    this.score = new TinCan.Score (cfg.score);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            // 0.9 used a string, store it internally as a bool\n            if (this.completion === \"Completed\") {\n                this.completion = true;\n            }\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                optionalDirectProps = [\n                    \"success\",\n                    \"duration\",\n                    \"response\",\n                    \"extensions\"\n                ],\n                optionalObjProps = [\n                    \"score\"\n                ],\n                i;\n\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                if (this[optionalDirectProps[i]] !== null) {\n                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];\n                }\n            }\n            for (i = 0; i < optionalObjProps.length; i += 1) {\n                if (this[optionalObjProps[i]] !== null) {\n                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);\n                }\n            }\n            if (this.completion !== null) {\n                if (version === \"0.9\") {\n                    if (this.completion) {\n                        result.completion = \"Completed\";\n                    }\n                }\n                else {\n                    result.completion = this.completion;\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Result\n    @static\n    */\n    Result.fromJSON = function (resultJSON) {\n        Result.prototype.log(\"fromJSON\");\n        var _result = JSON.parse(resultJSON);\n\n        return new Result(_result);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Score\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Score\n    @constructor\n    */\n    var Score = TinCan.Score = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property scaled\n        @type String\n        */\n        this.scaled = null;\n\n        /**\n        @property raw\n        @type String\n        */\n        this.raw = null;\n\n        /**\n        @property min\n        @type String\n        */\n        this.min = null;\n\n        /**\n        @property max\n        @type String\n        */\n        this.max = null;\n\n        this.init(cfg);\n    };\n    Score.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Score\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                directProps = [\n                    \"scaled\",\n                    \"raw\",\n                    \"min\",\n                    \"max\"\n                ]\n            ;\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                optionalDirectProps = [\n                    \"scaled\",\n                    \"raw\",\n                    \"min\",\n                    \"max\"\n                ],\n                i;\n\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                if (this[optionalDirectProps[i]] !== null) {\n                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Score\n    @static\n    */\n    Score.fromJSON = function (scoreJSON) {\n        Score.prototype.log(\"fromJSON\");\n        var _score = JSON.parse(scoreJSON);\n\n        return new Score(_score);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.InteractionComponent\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.InteractionComponent\n    @constructor\n    */\n    var InteractionComponent = TinCan.InteractionComponent = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property description\n        @type Object\n        */\n        this.description = null;\n\n        this.init(cfg);\n    };\n    InteractionComponent.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"InteractionComponent\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"description\"\n                ]\n            ;\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {\n                    id: this.id\n                },\n                optionalDirectProps = [\n                    \"description\"\n                ],\n                i,\n                prop;\n\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                prop = optionalDirectProps[i];\n                if (this[prop] !== null) {\n                    result[prop] = this[prop];\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        See {{#crossLink \"TinCan.Utils/getLangDictionaryValue\"}}{{/crossLink}}\n\n        @method getLangDictionaryValue\n        */\n        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} InteractionComponent\n    @static\n    */\n    InteractionComponent.fromJSON = function (icJSON) {\n        InteractionComponent.prototype.log(\"fromJSON\");\n        var _ic = JSON.parse(icJSON);\n\n        return new InteractionComponent(_ic);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.ActivityDefinition\n**/\n(function () {\n    \"use strict\";\n\n    //\n    // this represents the full set of activity definition types that were\n    // allowed by the .9 spec version, if an object is created with one of\n    // the short forms it will be upconverted to the matching long form,\n    // for local storage and use and if an object is needed in .9 version\n    // consequently down converted\n    //\n    // hopefully this list will never grow (or change) and only the exact\n    // ADL compatible URLs should be matched\n    //\n    var _downConvertMap = {\n        \"http://adlnet.gov/expapi/activities/course\": \"course\",\n        \"http://adlnet.gov/expapi/activities/module\": \"module\",\n        \"http://adlnet.gov/expapi/activities/meeting\": \"meeting\",\n        \"http://adlnet.gov/expapi/activities/media\": \"media\",\n        \"http://adlnet.gov/expapi/activities/performance\": \"performance\",\n        \"http://adlnet.gov/expapi/activities/simulation\": \"simulation\",\n        \"http://adlnet.gov/expapi/activities/assessment\": \"assessment\",\n        \"http://adlnet.gov/expapi/activities/interaction\": \"interaction\",\n        \"http://adlnet.gov/expapi/activities/cmi.interaction\": \"cmi.interaction\",\n        \"http://adlnet.gov/expapi/activities/question\": \"question\",\n        \"http://adlnet.gov/expapi/activities/objective\": \"objective\",\n        \"http://adlnet.gov/expapi/activities/link\": \"link\"\n    },\n\n    /**\n    @class TinCan.ActivityDefinition\n    @constructor\n    */\n    ActivityDefinition = TinCan.ActivityDefinition = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property name\n        @type Object\n        */\n        this.name = null;\n\n        /**\n        @property description\n        @type Object\n        */\n        this.description = null;\n\n        /**\n        @property type\n        @type String\n        */\n        this.type = null;\n\n        /**\n        @property moreInfo\n        @type String\n        */\n        this.moreInfo = null;\n\n        /**\n        @property extensions\n        @type Object\n        */\n        this.extensions = null;\n\n        /**\n        @property interactionType\n        @type String\n        */\n        this.interactionType = null;\n\n        /**\n        @property correctResponsesPattern\n        @type Array\n        */\n        this.correctResponsesPattern = null;\n\n        /**\n        @property choices\n        @type Array\n        */\n        this.choices = null;\n\n        /**\n        @property scale\n        @type Array\n        */\n        this.scale = null;\n\n        /**\n        @property source\n        @type Array\n        */\n        this.source = null;\n\n        /**\n        @property target\n        @type Array\n        */\n        this.target = null;\n\n        /**\n        @property steps\n        @type Array\n        */\n        this.steps = null;\n\n        this.init(cfg);\n    };\n    ActivityDefinition.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"ActivityDefinition\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                j,\n                prop,\n                directProps = [\n                    \"name\",\n                    \"description\",\n                    \"moreInfo\",\n                    \"extensions\",\n                    \"correctResponsesPattern\"\n                ],\n                interactionComponentProps = []\n            ;\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"type\") && cfg.type !== null) {\n                // TODO: verify type is URI?\n                for (prop in _downConvertMap) {\n                    if (_downConvertMap.hasOwnProperty(prop) && _downConvertMap[prop] === cfg.type) {\n                        cfg.type = _downConvertMap[prop];\n                    }\n                }\n                this.type = cfg.type;\n            }\n\n            if (cfg.hasOwnProperty(\"interactionType\") && cfg.interactionType !== null) {\n                // TODO: verify interaction type in acceptable set?\n                this.interactionType = cfg.interactionType;\n                if (cfg.interactionType === \"choice\" || cfg.interactionType === \"sequencing\") {\n                    interactionComponentProps.push(\"choices\");\n                }\n                else if (cfg.interactionType === \"likert\") {\n                    interactionComponentProps.push(\"scale\");\n                }\n                else if (cfg.interactionType === \"matching\") {\n                    interactionComponentProps.push(\"source\");\n                    interactionComponentProps.push(\"target\");\n                }\n                else if (cfg.interactionType === \"performance\") {\n                    interactionComponentProps.push(\"steps\");\n                }\n\n                if (interactionComponentProps.length > 0) {\n                    for (i = 0; i < interactionComponentProps.length; i += 1) {\n                        prop = interactionComponentProps[i];\n                        if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {\n                            this[prop] = [];\n                            for (j = 0; j < cfg[prop].length; j += 1) {\n                                if (cfg[prop][j] instanceof TinCan.InteractionComponent) {\n                                    this[prop].push(cfg[prop][j]);\n                                } else {\n                                    this[prop].push(\n                                        new TinCan.InteractionComponent (\n                                            cfg[prop][j]\n                                        )\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the definition\n        */\n        toString: function (lang) {\n            this.log(\"toString\");\n\n            if (this.name !== null) {\n                return this.getLangDictionaryValue(\"name\", lang);\n            }\n\n            if (this.description !== null) {\n                return this.getLangDictionaryValue(\"description\", lang);\n            }\n\n            return \"\";\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                directProps = [\n                    \"name\",\n                    \"description\",\n                    \"interactionType\",\n                    \"correctResponsesPattern\",\n                    \"extensions\"\n                ],\n                interactionComponentProps = [\n                    \"choices\",\n                    \"scale\",\n                    \"source\",\n                    \"target\",\n                    \"steps\"\n                ],\n                i,\n                j,\n                prop\n            ;\n\n            version = version || TinCan.versions()[0];\n\n            if (this.type !== null) {\n                if (version === \"0.9\") {\n                    result.type = _downConvertMap[this.type];\n                }\n                else {\n                    result.type = this.type;\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                prop = directProps[i];\n                if (this[prop] !== null) {\n                    result[prop] = this[prop];\n                }\n            }\n\n            for (i = 0; i < interactionComponentProps.length; i += 1) {\n                prop = interactionComponentProps[i];\n                if (this[prop] !== null) {\n                    result[prop] = [];\n                    for (j = 0; j < this[prop].length; j += 1) {\n                        result[prop].push(\n                            this[prop][j].asVersion(version)\n                        );\n                    }\n                }\n            }\n\n            if (version.indexOf(\"0.9\") !== 0) {\n                if (this.moreInfo !== null) {\n                    result.moreInfo = this.moreInfo;\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        See {{#crossLink \"TinCan.Utils/getLangDictionaryValue\"}}{{/crossLink}}\n\n        @method getLangDictionaryValue\n        */\n        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} ActivityDefinition\n    @static\n    */\n    ActivityDefinition.fromJSON = function (definitionJSON) {\n        ActivityDefinition.prototype.log(\"fromJSON\");\n        var _definition = JSON.parse(definitionJSON);\n\n        return new ActivityDefinition(_definition);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Activity\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Activity\n    @constructor\n    */\n    var Activity = TinCan.Activity = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property objectType\n        @type String\n        @default Activity\n        */\n        this.objectType = \"Activity\";\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property definition\n        @type TinCan.ActivityDefinition\n        */\n        this.definition = null;\n\n        this.init(cfg);\n    };\n    Activity.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Activity\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                directProps = [\n                    \"id\"\n                ]\n            ;\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"definition\")) {\n                if (cfg.definition instanceof TinCan.ActivityDefinition) {\n                    this.definition = cfg.definition;\n                } else {\n                    this.definition = new TinCan.ActivityDefinition (cfg.definition);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the activity\n        */\n        toString: function (lang) {\n            this.log(\"toString\");\n            var defString = \"\";\n\n            if (this.definition !== null) {\n                defString = this.definition.toString(lang);\n                if (defString !== \"\") {\n                    return defString;\n                }\n            }\n\n            if (this.id !== null) {\n                return this.id;\n            }\n\n            return \"Activity: unidentified\";\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {\n                id: this.id,\n                objectType: this.objectType\n            };\n\n            version = version || TinCan.versions()[0];\n\n            if (this.definition !== null) {\n                result.definition = this.definition.asVersion(version);\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Activity\n    @static\n    */\n    Activity.fromJSON = function (activityJSON) {\n        Activity.prototype.log(\"fromJSON\");\n        var _activity = JSON.parse(activityJSON);\n\n        return new Activity(_activity);\n    };\n}());\n\n/*\n    Copyright 2013 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.ContextActivities\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.ContextActivities\n    @constructor\n    */\n    var ContextActivities = TinCan.ContextActivities = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property category\n        @type Array\n        */\n        this.category = null;\n\n        /**\n        @property parent\n        @type Array\n        */\n        this.parent = null;\n\n        /**\n        @property grouping\n        @type Array\n        */\n        this.grouping = null;\n\n        /**\n        @property other\n        @type Array\n        */\n        this.other = null;\n\n        this.init(cfg);\n    };\n    ContextActivities.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"ContextActivities\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                j,\n                objProps = [\n                    \"category\",\n                    \"parent\",\n                    \"grouping\",\n                    \"other\"\n                ],\n                prop,\n                val\n            ;\n\n            cfg = cfg || {};\n\n            for (i = 0; i < objProps.length; i += 1) {\n                prop = objProps[i];\n                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {\n                    if (Object.prototype.toString.call(cfg[prop]) === \"[object Array]\") {\n                        for (j = 0; j < cfg[prop].length; j += 1) {\n                            this.add(prop, cfg[prop][j]);\n                        }\n                    }\n                    else {\n                        val = cfg[prop];\n\n                        this.add(prop, val);\n                    }\n                }\n            }\n        },\n\n        /**\n        @method add\n        @param String key Property to add value to one of \"category\", \"parent\", \"grouping\", \"other\"\n        @return Number index where the value was added\n        */\n        add: function (key, val) {\n            if (key !== \"category\" && key !== \"parent\" && key !== \"grouping\" && key !== \"other\") {\n                return;\n            }\n\n            if (this[key] === null) {\n                this[key] = [];\n            }\n\n            if (! (val instanceof TinCan.Activity)) {\n                val = typeof val === \"string\" ? { id: val } : val;\n                val = new TinCan.Activity (val);\n            }\n\n            this[key].push(val);\n\n            return this[key].length - 1;\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                optionalObjProps = [\n                    \"parent\",\n                    \"grouping\",\n                    \"other\"\n                ],\n                i,\n                j;\n\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalObjProps.length; i += 1) {\n                if (this[optionalObjProps[i]] !== null && this[optionalObjProps[i]].length > 0) {\n                    if (version === \"0.9\" || version === \"0.95\") {\n                        if (this[optionalObjProps[i]].length > 1) {\n                            // TODO: exception?\n                            this.log(\"[warning] version does not support multiple values in: \" + optionalObjProps[i]);\n                        }\n\n                        result[optionalObjProps[i]] = this[optionalObjProps[i]][0].asVersion(version);\n                    }\n                    else {\n                        result[optionalObjProps[i]] = [];\n                        for (j = 0; j < this[optionalObjProps[i]].length; j += 1) {\n                            result[optionalObjProps[i]].push(\n                                this[optionalObjProps[i]][j].asVersion(version)\n                            );\n                        }\n                    }\n                }\n            }\n            if (this.category !== null && this.category.length > 0) {\n                if (version === \"0.9\" || version === \"0.95\") {\n                    this.log(\"[error] version does not support the 'category' property: \" + version);\n                    throw new Error(version + \" does not support the 'category' property\");\n                }\n                else {\n                    result.category = [];\n                    for (i = 0; i < this.category.length; i += 1) {\n                        result.category.push(this.category[i].asVersion(version));\n                    }\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} ContextActivities\n    @static\n    */\n    ContextActivities.fromJSON = function (contextActivitiesJSON) {\n        ContextActivities.prototype.log(\"fromJSON\");\n        var _contextActivities = JSON.parse(contextActivitiesJSON);\n\n        return new ContextActivities(_contextActivities);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Context\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Context\n    @constructor\n    */\n    var Context = TinCan.Context = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property registration\n        @type String|null\n        */\n        this.registration = null;\n\n        /**\n        @property instructor\n        @type TinCan.Agent|TinCan.Group|null\n        */\n        this.instructor = null;\n\n        /**\n        @property team\n        @type TinCan.Agent|TinCan.Group|null\n        */\n        this.team = null;\n\n        /**\n        @property contextActivities\n        @type ContextActivities|null\n        */\n        this.contextActivities = null;\n\n        /**\n        @property revision\n        @type String|null\n        */\n        this.revision = null;\n\n        /**\n        @property platform\n        @type Object|null\n        */\n        this.platform = null;\n\n        /**\n        @property language\n        @type String|null\n        */\n        this.language = null;\n\n        /**\n        @property statement\n        @type StatementRef|null\n        */\n        this.statement = null;\n\n        /**\n        @property extensions\n        @type String\n        */\n        this.extensions = null;\n\n        this.init(cfg);\n    };\n    Context.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Context\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            var i,\n                directProps = [\n                    \"registration\",\n                    \"revision\",\n                    \"platform\",\n                    \"language\",\n                    \"extensions\"\n                ],\n                agentGroupProps = [\n                    \"instructor\",\n                    \"team\"\n                ],\n                prop,\n                val\n            ;\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                prop = directProps[i];\n                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {\n                    this[prop] = cfg[prop];\n                }\n            }\n            for (i = 0; i < agentGroupProps.length; i += 1) {\n                prop = agentGroupProps[i];\n                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {\n                    val = cfg[prop];\n\n                    if (typeof val.objectType === \"undefined\" || val.objectType === \"Person\") {\n                        val.objectType = \"Agent\";\n                    }\n\n                    if (val.objectType === \"Agent\" && ! (val instanceof TinCan.Agent)) {\n                        val = new TinCan.Agent (val);\n                    } else if (val.objectType === \"Group\" && ! (val instanceof TinCan.Group)) {\n                        val = new TinCan.Group (val);\n                    }\n\n                    this[prop] = val;\n                }\n            }\n\n            if (cfg.hasOwnProperty(\"contextActivities\") && cfg.contextActivities !== null) {\n                if (cfg.contextActivities instanceof TinCan.ContextActivities) {\n                    this.contextActivities = cfg.contextActivities;\n                }\n                else {\n                    this.contextActivities = new TinCan.ContextActivities(cfg.contextActivities);\n                }\n            }\n\n            if (cfg.hasOwnProperty(\"statement\") && cfg.statement !== null) {\n                if (cfg.statement instanceof TinCan.StatementRef) {\n                    this.statement = cfg.statement;\n                }\n                else if (cfg.statement instanceof TinCan.SubStatement) {\n                    this.statement = cfg.statement;\n                }\n                else if (cfg.statement.objectType === \"StatementRef\") {\n                    this.statement = new TinCan.StatementRef(cfg.statement);\n                }\n                else if (cfg.statement.objectType === \"SubStatement\") {\n                    this.statement = new TinCan.SubStatement(cfg.statement);\n                }\n                else {\n                    this.log(\"Unable to parse statement.context.statement property.\");\n                }\n            }\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                optionalDirectProps = [\n                    \"registration\",\n                    \"revision\",\n                    \"platform\",\n                    \"language\",\n                    \"extensions\"\n                ],\n                optionalObjProps = [\n                    \"instructor\",\n                    \"team\",\n                    \"contextActivities\",\n                    \"statement\"\n                ],\n                i;\n\n            version = version || TinCan.versions()[0];\n\n            if (this.statement instanceof TinCan.SubStatement && version !== \"0.9\" && version !== \"0.95\") {\n                this.log(\"[error] version does not support SubStatements in the 'statement' property: \" + version);\n                throw new Error(version + \" does not support SubStatements in the 'statement' property\");\n            }\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                if (this[optionalDirectProps[i]] !== null) {\n                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];\n                }\n            }\n            for (i = 0; i < optionalObjProps.length; i += 1) {\n                if (this[optionalObjProps[i]] !== null) {\n                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);\n                }\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Context\n    @static\n    */\n    Context.fromJSON = function (contextJSON) {\n        Context.prototype.log(\"fromJSON\");\n        var _context = JSON.parse(contextJSON);\n\n        return new Context(_context);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.StatementRef\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.StatementRef\n    @constructor\n    @param {Object} [cfg] Configuration used to initialize.\n        @param {Object} [cfg.id] ID of statement to reference\n    **/\n    var StatementRef = TinCan.StatementRef = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        this.init(cfg);\n    };\n\n    StatementRef.prototype = {\n        /**\n        @property objectType\n        @type String\n        @default Agent\n        */\n        objectType: \"StatementRef\",\n\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"StatementRef\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize (see constructor)\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\"\n                ];\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the statement\n        */\n        toString: function () {\n            this.log(\"toString\");\n            return this.id;\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {\n                objectType: this.objectType,\n                id: this.id\n            };\n\n            if (version === \"0.9\") {\n                result.objectType = \"Statement\";\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} StatementRef\n    @static\n    */\n    StatementRef.fromJSON = function (stRefJSON) {\n        StatementRef.prototype.log(\"fromJSON\");\n        var _stRef = JSON.parse(stRefJSON);\n\n        return new StatementRef(_stRef);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.SubStatement\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.SubStatement\n    @constructor\n    @param {Object} [cfg] Configuration used to initialize.\n        @param {TinCan.Agent} [cfg.actor] Actor of statement\n        @param {TinCan.Verb} [cfg.verb] Verb of statement\n        @param {TinCan.Activity|TinCan.Agent} [cfg.object] Alias for 'target'\n        @param {TinCan.Activity|TinCan.Agent} [cfg.target] Object of statement\n        @param {TinCan.Result} [cfg.result] Statement Result\n        @param {TinCan.Context} [cfg.context] Statement Context\n    **/\n    var SubStatement = TinCan.SubStatement = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property actor\n        @type Object\n        */\n        this.actor = null;\n\n        /**\n        @property verb\n        @type Object\n        */\n        this.verb = null;\n\n        /**\n        @property target\n        @type Object\n        */\n        this.target = null;\n\n        /**\n        @property result\n        @type Object\n        */\n        this.result = null;\n\n        /**\n        @property context\n        @type Object\n        */\n        this.context = null;\n\n        /**\n        @property timestamp\n        @type Date\n        */\n        this.timestamp = null;\n\n        this.init(cfg);\n    };\n\n    SubStatement.prototype = {\n        /**\n        @property objectType\n        @type String\n        @default Agent\n        */\n        objectType: \"SubStatement\",\n\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"SubStatement\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize (see constructor)\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"timestamp\"\n                ];\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"object\")) {\n                cfg.target = cfg.object;\n            }\n\n            if (cfg.hasOwnProperty(\"actor\")) {\n                if (typeof cfg.actor.objectType === \"undefined\" || cfg.actor.objectType === \"Person\") {\n                    cfg.actor.objectType = \"Agent\";\n                }\n\n                if (cfg.actor.objectType === \"Agent\") {\n                    if (cfg.actor instanceof TinCan.Agent) {\n                        this.actor = cfg.actor;\n                    } else {\n                        this.actor = new TinCan.Agent (cfg.actor);\n                    }\n                } else if (cfg.actor.objectType === \"Group\") {\n                    if (cfg.actor instanceof TinCan.Group) {\n                        this.actor = cfg.actor;\n                    } else {\n                        this.actor = new TinCan.Group (cfg.actor);\n                    }\n                }\n            }\n            if (cfg.hasOwnProperty(\"verb\")) {\n                if (cfg.verb instanceof TinCan.Verb) {\n                    this.verb = cfg.verb;\n                } else {\n                    this.verb = new TinCan.Verb (cfg.verb);\n                }\n            }\n            if (cfg.hasOwnProperty(\"target\")) {\n                if (cfg.target instanceof TinCan.Activity ||\n                    cfg.target instanceof TinCan.Agent ||\n                    cfg.target instanceof TinCan.Group ||\n                    cfg.target instanceof TinCan.SubStatement ||\n                    cfg.target instanceof TinCan.StatementRef\n                ) {\n                    this.target = cfg.target;\n                } else {\n                    if (typeof cfg.target.objectType === \"undefined\") {\n                        cfg.target.objectType = \"Activity\";\n                    }\n\n                    if (cfg.target.objectType === \"Activity\") {\n                        this.target = new TinCan.Activity (cfg.target);\n                    } else if (cfg.target.objectType === \"Agent\") {\n                        this.target = new TinCan.Agent (cfg.target);\n                    } else if (cfg.target.objectType === \"Group\") {\n                        this.target = new TinCan.Group (cfg.target);\n                    } else if (cfg.target.objectType === \"SubStatement\") {\n                        this.target = new TinCan.SubStatement (cfg.target);\n                    } else if (cfg.target.objectType === \"StatementRef\") {\n                        this.target = new TinCan.StatementRef (cfg.target);\n                    } else {\n                        this.log(\"Unrecognized target type: \" + cfg.target.objectType);\n                    }\n                }\n            }\n            if (cfg.hasOwnProperty(\"result\")) {\n                if (cfg.result instanceof TinCan.Result) {\n                    this.result = cfg.result;\n                } else {\n                    this.result = new TinCan.Result (cfg.result);\n                }\n            }\n            if (cfg.hasOwnProperty(\"context\")) {\n                if (cfg.context instanceof TinCan.Context) {\n                    this.context = cfg.context;\n                } else {\n                    this.context = new TinCan.Context (cfg.context);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the statement\n        */\n        toString: function (lang) {\n            this.log(\"toString\");\n            return (this.actor !== null ? this.actor.toString(lang) : \"\") +\n                    \" \" +\n                    (this.verb !== null ? this.verb.toString(lang) : \"\") +\n                    \" \" +\n                    (this.target !== null ? this.target.toString(lang) : \"\");\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result,\n                optionalDirectProps = [\n                    \"timestamp\"\n                ],\n                optionalObjProps = [\n                    \"actor\",\n                    \"verb\",\n                    \"result\",\n                    \"context\"\n                ],\n                i;\n\n            result = {\n                objectType: this.objectType\n            };\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                if (this[optionalDirectProps[i]] !== null) {\n                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];\n                }\n            }\n            for (i = 0; i < optionalObjProps.length; i += 1) {\n                if (this[optionalObjProps[i]] !== null) {\n                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);\n                }\n            }\n            if (this.target !== null) {\n                result.object = this.target.asVersion(version);\n            }\n\n            if (version === \"0.9\") {\n                result.objectType = \"Statement\";\n            }\n\n            return result;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} SubStatement\n    @static\n    */\n    SubStatement.fromJSON = function (subStJSON) {\n        SubStatement.prototype.log(\"fromJSON\");\n        var _subSt = JSON.parse(subStJSON);\n\n        return new SubStatement(_subSt);\n    };\n}());\n\n/*\n    Copyright 2012-3 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Statement\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Statement\n    @constructor\n    @param {Object} [cfg] Values to set in properties\n        @param {String} [cfg.id] Statement ID (UUID)\n        @param {TinCan.Agent} [cfg.actor] Actor of statement\n        @param {TinCan.Verb} [cfg.verb] Verb of statement\n        @param {TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement} [cfg.object] Alias for 'target'\n        @param {TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement} [cfg.target] Object of statement\n        @param {TinCan.Result} [cfg.result] Statement Result\n        @param {TinCan.Context} [cfg.context] Statement Context\n        @param {TinCan.Agent} [cfg.authority] Statement Authority\n        @param {TinCan.Attachment} [cfg.attachments] Statement Attachments\n        @param {String} [cfg.timestamp] ISO8601 Date/time value\n        @param {String} [cfg.stored] ISO8601 Date/time value\n        @param {String} [cfg.version] Version of the statement (post 0.95)\n    @param {Object} [initCfg] Configuration of initialization process\n        @param {Integer} [initCfg.storeOriginal] Whether to store a JSON stringified version\n            of the original options object, pass number of spaces used for indent\n        @param {Boolean} [initCfg.doStamp] Whether to automatically set the 'id' and 'timestamp'\n            properties (default: true)\n    **/\n    var Statement = TinCan.Statement = function (cfg, initCfg) {\n        this.log(\"constructor\");\n\n        // check for true value for API backwards compat\n        if (typeof initCfg === \"number\") {\n            initCfg = {\n                storeOriginal: initCfg\n            };\n        } else {\n            initCfg = initCfg || {};\n        }\n        if (typeof initCfg.storeOriginal === \"undefined\") {\n            initCfg.storeOriginal = null;\n        }\n        if (typeof initCfg.doStamp === \"undefined\") {\n            initCfg.doStamp = true;\n        }\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property actor\n        @type TinCan.Agent|TinCan.Group|null\n        */\n        this.actor = null;\n\n        /**\n        @property verb\n        @type TinCan.Verb|null\n        */\n        this.verb = null;\n\n        /**\n        @property target\n        @type TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement|null\n        */\n        this.target = null;\n\n        /**\n        @property result\n        @type Object\n        */\n        this.result = null;\n\n        /**\n        @property context\n        @type Object\n        */\n        this.context = null;\n\n        /**\n        @property timestamp\n        @type String\n        */\n        this.timestamp = null;\n\n        /**\n        @property stored\n        @type String\n        */\n        this.stored = null;\n\n        /**\n        @property authority\n        @type TinCan.Agent|null\n        */\n        this.authority = null;\n\n        /**\n        @property attachments\n        @type Array of TinCan.Attachment\n        */\n        this.attachments = null;\n\n        /**\n        @property version\n        @type String\n        */\n        this.version = null;\n\n        /**\n        @property degraded\n        @type Boolean\n        @default false\n        */\n        this.degraded = false;\n\n        /**\n        @property voided\n        @type Boolean\n        @default null\n        @deprecated\n        */\n        this.voided = null;\n\n        /**\n        @property inProgress\n        @type Boolean\n        @deprecated\n        */\n        this.inProgress = null;\n\n        /**\n        @property originalJSON\n        @type String\n        */\n        this.originalJSON = null;\n\n        this.init(cfg, initCfg);\n    };\n\n    Statement.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Statement\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [properties] Configuration used to set properties (see constructor)\n        @param {Object} [cfg] Configuration used to initialize (see constructor)\n        */\n        init: function (cfg, initCfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"stored\",\n                    \"timestamp\",\n                    \"version\",\n                    \"inProgress\",\n                    \"voided\"\n                ];\n\n            cfg = cfg || {};\n\n            if (initCfg.storeOriginal) {\n                this.originalJSON = JSON.stringify(cfg, null, initCfg.storeOriginal);\n            }\n\n            if (cfg.hasOwnProperty(\"object\")) {\n                cfg.target = cfg.object;\n            }\n\n            if (cfg.hasOwnProperty(\"actor\")) {\n                if (typeof cfg.actor.objectType === \"undefined\" || cfg.actor.objectType === \"Person\") {\n                    cfg.actor.objectType = \"Agent\";\n                }\n\n                if (cfg.actor.objectType === \"Agent\") {\n                    if (cfg.actor instanceof TinCan.Agent) {\n                        this.actor = cfg.actor;\n                    } else {\n                        this.actor = new TinCan.Agent (cfg.actor);\n                    }\n                } else if (cfg.actor.objectType === \"Group\") {\n                    if (cfg.actor instanceof TinCan.Group) {\n                        this.actor = cfg.actor;\n                    } else {\n                        this.actor = new TinCan.Group (cfg.actor);\n                    }\n                }\n            }\n            if (cfg.hasOwnProperty(\"authority\")) {\n                if (typeof cfg.authority.objectType === \"undefined\" || cfg.authority.objectType === \"Person\") {\n                    cfg.authority.objectType = \"Agent\";\n                }\n\n                if (cfg.authority.objectType === \"Agent\") {\n                    if (cfg.authority instanceof TinCan.Agent) {\n                        this.authority = cfg.authority;\n                    } else {\n                        this.authority = new TinCan.Agent (cfg.authority);\n                    }\n                } else if (cfg.authority.objectType === \"Group\") {\n                    if (cfg.actor instanceof TinCan.Group) {\n                        this.authority = cfg.authority;\n                    } else {\n                        this.authority = new TinCan.Group (cfg.authority);\n                    }\n                }\n            }\n            if (cfg.hasOwnProperty(\"verb\")) {\n                if (cfg.verb instanceof TinCan.Verb) {\n                    this.verb = cfg.verb;\n                } else {\n                    this.verb = new TinCan.Verb (cfg.verb);\n                }\n            }\n            if (cfg.hasOwnProperty(\"target\")) {\n                if (cfg.target instanceof TinCan.Activity ||\n                    cfg.target instanceof TinCan.Agent ||\n                    cfg.target instanceof TinCan.Group ||\n                    cfg.target instanceof TinCan.SubStatement ||\n                    cfg.target instanceof TinCan.StatementRef\n                ) {\n                    this.target = cfg.target;\n                } else {\n                    if (typeof cfg.target.objectType === \"undefined\") {\n                        cfg.target.objectType = \"Activity\";\n                    }\n\n                    if (cfg.target.objectType === \"Activity\") {\n                        this.target = new TinCan.Activity (cfg.target);\n                    } else if (cfg.target.objectType === \"Agent\") {\n                        this.target = new TinCan.Agent (cfg.target);\n                    } else if (cfg.target.objectType === \"Group\") {\n                        this.target = new TinCan.Group (cfg.target);\n                    } else if (cfg.target.objectType === \"SubStatement\") {\n                        this.target = new TinCan.SubStatement (cfg.target);\n                    } else if (cfg.target.objectType === \"StatementRef\") {\n                        this.target = new TinCan.StatementRef (cfg.target);\n                    } else {\n                        this.log(\"Unrecognized target type: \" + cfg.target.objectType);\n                    }\n                }\n            }\n            if (cfg.hasOwnProperty(\"result\")) {\n                if (cfg.result instanceof TinCan.Result) {\n                    this.result = cfg.result;\n                } else {\n                    this.result = new TinCan.Result (cfg.result);\n                }\n            }\n            if (cfg.hasOwnProperty(\"context\")) {\n                if (cfg.context instanceof TinCan.Context) {\n                    this.context = cfg.context;\n                } else {\n                    this.context = new TinCan.Context (cfg.context);\n                }\n            }\n            if (cfg.hasOwnProperty(\"attachments\") && cfg.attachments !== null) {\n                this.attachments = [];\n                for (i = 0; i < cfg.attachments.length; i += 1) {\n                    if (! (cfg.attachments[i] instanceof TinCan.Attachment)) {\n                        this.attachments.push(new TinCan.Attachment (cfg.attachments[i]));\n                    }\n                    else {\n                        this.attachments.push(cfg.attachments[i]);\n                    }\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            if (initCfg.doStamp) {\n                this.stamp();\n            }\n        },\n\n        /**\n        @method toString\n        @return {String} String representation of the statement\n        */\n        toString: function (lang) {\n            this.log(\"toString\");\n            return (this.actor !== null ? this.actor.toString(lang) : \"\") +\n                    \" \" +\n                    (this.verb !== null ? this.verb.toString(lang) : \"\") +\n                    \" \" +\n                    (this.target !== null ? this.target.toString(lang) : \"\");\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result = {},\n                optionalDirectProps = [\n                    \"id\",\n                    \"timestamp\"\n                ],\n                optionalObjProps = [\n                    \"actor\",\n                    \"verb\",\n                    \"result\",\n                    \"context\",\n                    \"authority\"\n                ],\n                i;\n\n            version = version || TinCan.versions()[0];\n\n            for (i = 0; i < optionalDirectProps.length; i += 1) {\n                if (this[optionalDirectProps[i]] !== null) {\n                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];\n                }\n            }\n            for (i = 0; i < optionalObjProps.length; i += 1) {\n                if (this[optionalObjProps[i]] !== null) {\n                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);\n                }\n            }\n            if (this.target !== null) {\n                result.object = this.target.asVersion(version);\n            }\n\n            if (version === \"0.9\" || version === \"0.95\") {\n                if (this.voided !== null) {\n                    result.voided = this.voided;\n                }\n            }\n            if (version === \"0.9\" && this.inProgress !== null) {\n                result.inProgress = this.inProgress;\n            }\n            if (this.attachments !== null) {\n                if (! (version === \"0.9\" || version === \"0.95\")) {\n                    result.attachments = [];\n                    for (i = 0; i < this.attachments.length; i += 1) {\n                        if (this.attachments[i] instanceof TinCan.Attachment) {\n                            result.attachments.push(this.attachments[i].asVersion(version));\n                        }\n                        else {\n                            result.attachments.push(new TinCan.Attachment(this.attachments[i]).asVersion(version));\n                        }\n                    }\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        Sets 'id' and 'timestamp' properties if not already set\n\n        @method stamp\n        */\n        stamp: function () {\n            this.log(\"stamp\");\n            if (this.id === null) {\n                this.id = TinCan.Utils.getUUID();\n            }\n            if (this.timestamp === null) {\n                this.timestamp = TinCan.Utils.getISODateString(new Date());\n            }\n        },\n\n        /**\n        Checks if the Statement has at least one attachment with content\n\n        @method hasAttachmentsWithContent\n        */\n        hasAttachmentWithContent: function () {\n            this.log(\"hasAttachmentWithContent\");\n            var i;\n\n            if (this.attachments === null) {\n                return false;\n            }\n\n            for (i = 0; i < this.attachments.length; i += 1) {\n                if (this.attachments[i].content !== null) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Statement\n    @static\n    */\n    Statement.fromJSON = function (stJSON) {\n        Statement.prototype.log(\"fromJSON\");\n        var _st = JSON.parse(stJSON);\n\n        return new Statement(_st);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.StatementsResult\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.StatementsResult\n    @constructor\n    @param {Object} options Configuration used to initialize.\n        @param {Array} options.statements Actor of statement\n        @param {String} options.more URL to fetch more data\n    **/\n    var StatementsResult = TinCan.StatementsResult = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property statements\n        @type Array\n        */\n        this.statements = null;\n\n        /**\n        @property more\n        @type String\n        */\n        this.more = null;\n\n        this.init(cfg);\n    };\n\n    StatementsResult.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"StatementsResult\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"statements\")) {\n                this.statements = cfg.statements;\n            }\n            if (cfg.hasOwnProperty(\"more\")) {\n                this.more = cfg.more;\n            }\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Agent\n    @static\n    */\n    StatementsResult.fromJSON = function (resultJSON) {\n        StatementsResult.prototype.log(\"fromJSON\");\n        var _result,\n            stmts = [],\n            stmt,\n            i\n        ;\n\n        try {\n            _result = JSON.parse(resultJSON);\n        } catch (parseError) {\n            StatementsResult.prototype.log(\"fromJSON - JSON.parse error: \" + parseError);\n        }\n\n        if (_result) {\n            for (i = 0; i < _result.statements.length; i += 1) {\n                try {\n                    stmt = new TinCan.Statement (_result.statements[i], 4);\n                } catch (error) {\n                    StatementsResult.prototype.log(\"fromJSON - statement instantiation failed: \" + error + \" (\" + JSON.stringify(_result.statements[i]) + \")\");\n\n                    stmt = new TinCan.Statement (\n                        {\n                            id: _result.statements[i].id\n                        },\n                        4\n                    );\n                }\n\n                stmts.push(stmt);\n            }\n            _result.statements = stmts;\n        }\n\n        return new StatementsResult (_result);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.State\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.State\n    @constructor\n    */\n    var State = TinCan.State = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property updated\n        @type Boolean\n        */\n        this.updated = null;\n\n        /**\n        @property contents\n        @type String\n        */\n        this.contents = null;\n\n        /**\n        @property etag\n        @type String\n        */\n        this.etag = null;\n\n        /**\n        @property contentType\n        @type String\n        */\n        this.contentType = null;\n\n        this.init(cfg);\n    };\n    State.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"State\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"contents\",\n                    \"etag\",\n                    \"contentType\"\n                ];\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            this.updated = false;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} State\n    @static\n    */\n    State.fromJSON = function (stateJSON) {\n        State.prototype.log(\"fromJSON\");\n        var _state = JSON.parse(stateJSON);\n\n        return new State(_state);\n    };\n}());\n\n/*\n    Copyright 2012 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.ActivityProfile\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.ActivityProfile\n    @constructor\n    */\n    var ActivityProfile = TinCan.ActivityProfile = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property activity\n        @type TinCan.Activity\n        */\n        this.activity = null;\n\n        /**\n        @property updated\n        @type String\n        */\n        this.updated = null;\n\n        /**\n        @property contents\n        @type String\n        */\n        this.contents = null;\n\n        /**\n        SHA1 of contents as provided by the server during last fetch,\n        this should be passed through to saveActivityProfile\n\n        @property etag\n        @type String\n        */\n        this.etag = null;\n\n        /**\n        @property contentType\n        @type String\n        */\n        this.contentType = null;\n\n        this.init(cfg);\n    };\n    ActivityProfile.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"ActivityProfile\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"contents\",\n                    \"etag\",\n                    \"contentType\"\n                ];\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"activity\")) {\n                if (cfg.activity instanceof TinCan.Activity) {\n                    this.activity = cfg.activity;\n                }\n                else {\n                    this.activity = new TinCan.Activity (cfg.activity);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            this.updated = false;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} ActivityProfile\n    @static\n    */\n    ActivityProfile.fromJSON = function (stateJSON) {\n        ActivityProfile.prototype.log(\"fromJSON\");\n        var _state = JSON.parse(stateJSON);\n\n        return new ActivityProfile(_state);\n    };\n}());\n\n/*\n    Copyright 2013 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.AgentProfile\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.AgentProfile\n    @constructor\n    */\n    var AgentProfile = TinCan.AgentProfile = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property id\n        @type String\n        */\n        this.id = null;\n\n        /**\n        @property agent\n        @type TinCan.Agent\n        */\n        this.agent = null;\n\n        /**\n        @property updated\n        @type String\n        */\n        this.updated = null;\n\n        /**\n        @property contents\n        @type String\n        */\n        this.contents = null;\n\n        /**\n        SHA1 of contents as provided by the server during last fetch,\n        this should be passed through to saveAgentProfile\n\n        @property etag\n        @type String\n        */\n        this.etag = null;\n\n        /**\n        @property contentType\n        @type String\n        */\n        this.contentType = null;\n\n        this.init(cfg);\n    };\n    AgentProfile.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"AgentProfile\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"id\",\n                    \"contents\",\n                    \"etag\",\n                    \"contentType\"\n                ];\n\n            cfg = cfg || {};\n\n            if (cfg.hasOwnProperty(\"agent\")) {\n                if (cfg.agent instanceof TinCan.Agent) {\n                    this.agent = cfg.agent;\n                }\n                else {\n                    this.agent = new TinCan.Agent (cfg.agent);\n                }\n            }\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            this.updated = false;\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} AgentProfile\n    @static\n    */\n    AgentProfile.fromJSON = function (stateJSON) {\n        AgentProfile.prototype.log(\"fromJSON\");\n        var _state = JSON.parse(stateJSON);\n\n        return new AgentProfile(_state);\n    };\n}());\n\n/*\n    Copyright 2014 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.About\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.About\n    @constructor\n    */\n    var About = TinCan.About = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property version\n        @type {String[]}\n        */\n        this.version = null;\n\n        this.init(cfg);\n    };\n    About.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"About\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"version\"\n                ];\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} About\n    @static\n    */\n    About.fromJSON = function (aboutJSON) {\n        About.prototype.log(\"fromJSON\");\n        var _about = JSON.parse(aboutJSON);\n\n        return new About(_about);\n    };\n}());\n\n/*\n    Copyright 2016 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Attachment\n**/\n(function () {\n    \"use strict\";\n\n    /**\n    @class TinCan.Attachment\n    @constructor\n    */\n    var Attachment = TinCan.Attachment = function (cfg) {\n        this.log(\"constructor\");\n\n        /**\n        @property usageType\n        @type String\n        */\n        this.usageType = null;\n\n        /**\n        @property display\n        @type Object\n        */\n        this.display = null;\n\n        /**\n        @property contentType\n        @type String\n        */\n        this.contentType = null;\n\n        /**\n        @property length\n        @type int\n        */\n        this.length = null;\n\n        /**\n        @property sha2\n        @type String\n        */\n        this.sha2 = null;\n\n        /**\n        @property description\n        @type Object\n        */\n        this.description = null;\n\n        /**\n        @property fileUrl\n        @type String\n        */\n        this.fileUrl = null;\n\n        /**\n        @property content\n        @type ArrayBuffer\n        */\n        this.content = null;\n\n        this.init(cfg);\n    };\n    Attachment.prototype = {\n        /**\n        @property LOG_SRC\n        */\n        LOG_SRC: \"Attachment\",\n\n        /**\n        @method log\n        */\n        log: TinCan.prototype.log,\n\n        /**\n        @method init\n        @param {Object} [options] Configuration used to initialize\n        */\n        init: function (cfg) {\n            this.log(\"init\");\n            var i,\n                directProps = [\n                    \"contentType\",\n                    \"length\",\n                    \"sha2\",\n                    \"usageType\",\n                    \"display\",\n                    \"description\",\n                    \"fileUrl\"\n                ]\n            ;\n\n            cfg = cfg || {};\n\n            for (i = 0; i < directProps.length; i += 1) {\n                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {\n                    this[directProps[i]] = cfg[directProps[i]];\n                }\n            }\n\n            if (cfg.hasOwnProperty(\"content\") && cfg.content !== null) {\n                if (typeof cfg.content === \"string\") {\n                    this.setContentFromString(cfg.content);\n                }\n                else {\n                    this.setContent(cfg.content);\n                }\n            }\n        },\n\n        /**\n        @method asVersion\n        @param {String} [version] Version to return (defaults to newest supported)\n        */\n        asVersion: function (version) {\n            this.log(\"asVersion\");\n            var result;\n\n            version = version || TinCan.versions()[0];\n\n            if (version === \"0.9\" || version === \"0.95\") {\n                result = null;\n            }\n            else {\n                result = {\n                    contentType: this.contentType,\n                    display: this.display,\n                    length: this.length,\n                    sha2: this.sha2,\n                    usageType: this.usageType\n                };\n\n                if (this.fileUrl !== null) {\n                    result.fileUrl = this.fileUrl;\n                }\n                if (this.description !== null) {\n                    result.description = this.description;\n                }\n            }\n\n            return result;\n        },\n\n        /**\n        See {{#crossLink \"TinCan.Utils/getLangDictionaryValue\"}}{{/crossLink}}\n\n        @method getLangDictionaryValue\n        */\n        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue,\n\n        /**\n        @method setContent\n        @param {ArrayBuffer} content Sets content from ArrayBuffer\n        */\n        setContent: function (content) {\n            this.content = content;\n            this.length = content.byteLength;\n            this.sha2 = TinCan.Utils.getSHA256String(content);\n        },\n\n        /**\n        @method setContentFromString\n        @param {String} content Sets the content property of the attachment from a string\n        */\n        setContentFromString: function (content) {\n            var _content = content;\n\n            _content = TinCan.Utils.stringToArrayBuffer(content);\n\n            this.setContent(_content);\n        },\n\n        /**\n        @method getContentAsString\n        @return {String} Value of content property as a string\n        */\n        getContentAsString: function () {\n            return TinCan.Utils.stringFromArrayBuffer(this.content);\n        }\n    };\n\n    /**\n    @method fromJSON\n    @return {Object} Attachment\n    @static\n    */\n    Attachment.fromJSON = function (attachmentJSON) {\n        Attachment.prototype.log(\"fromJSON\");\n        var _attachment = JSON.parse(attachmentJSON);\n\n        return new Attachment(_attachment);\n    };\n\n    Attachment._defaultEncoding = \"utf-8\";\n}());\n\n/*\n    Copyright 2012-2013 Rustici Software\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n/**\nTinCan client library\n\n@module TinCan\n@submodule TinCan.Environment.Node\n**/\n(function () {\n    /* globals require,Buffer,ArrayBuffer,Uint8Array */\n    \"use strict\";\n    var LOG_SRC = \"Environment.Node\",\n        log = TinCan.prototype.log,\n        querystring = require(\"querystring\"),\n        XMLHttpRequest = require(\"xhr2\"),\n        requestComplete,\n        __createJSONSegment,\n        __createAttachmentSegment;\n\n    requestComplete = function (xhr, cfg) {\n        log(\"requestComplete - xhr.status: \" + xhr.status, LOG_SRC);\n        log(\"requestComplete - xhr.responseText: \" + xhr.responseText, LOG_SRC);\n        var requestCompleteResult,\n            httpStatus = xhr.status,\n            notFoundOk = (cfg.ignore404 && httpStatus === 404);\n\n        if ((httpStatus >= 200 && httpStatus < 400) || notFoundOk) {\n            if (cfg.callback) {\n                cfg.callback(null, xhr);\n                return;\n            }\n\n            requestCompleteResult = {\n                err: null,\n                xhr: xhr\n            };\n            return requestCompleteResult;\n        }\n\n        requestCompleteResult = {\n            err: httpStatus,\n            xhr: xhr\n        };\n        if (httpStatus === 0) {\n            log(\"[warning] There was a problem communicating with the Learning Record Store. Aborted, offline, or invalid CORS endpoint (\" + httpStatus + \")\", LOG_SRC);\n        }\n        else {\n            log(\"[warning] There was a problem communicating with the Learning Record Store. (\" + httpStatus + \" | \" + xhr.responseText+ \")\", LOG_SRC);\n        }\n        if (cfg.callback) {\n            cfg.callback(httpStatus, xhr);\n        }\n        return requestCompleteResult;\n    };\n\n    //\n    // Override LRS' init method to set up our request handling\n    // capabilities, basically empty implementation here so that\n    // we don't get a no-env loaded message\n    //\n    TinCan.LRS.prototype._initByEnvironment = function () {};\n\n    //\n    // use XMLHttpRequest module instead of standard Node.js http/https\n    // modules since we have to support both, and because the callbacks\n    // provided via the methods calling _makeRequest expect the xhr to\n    // have a certain interface, that interface happens to be the browser\n    // version of XHR since that's where it started, so rather than\n    // changing them to use a different wrapped request/response object\n    // set just use a wrapped version of the node objects which is what\n    // XMLHttpRequest module provides\n    //\n    TinCan.LRS.prototype._makeRequest = function (fullUrl, headers, cfg) {\n        log(\"_makeRequest using http/https\", LOG_SRC);\n        var xhr,\n            url = fullUrl,\n            async = typeof cfg.callback !== \"undefined\",\n            prop\n        ;\n        if (typeof cfg.params !== \"undefined\" && Object.keys(cfg.params).length > 0) {\n            url += \"?\" + querystring.stringify(cfg.params);\n        }\n\n        xhr = new XMLHttpRequest();\n        xhr.open(cfg.method, url, async);\n\n        if (cfg.expectMultipart) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        for (prop in headers) {\n            if (headers.hasOwnProperty(prop)) {\n                xhr.setRequestHeader(prop, headers[prop]);\n            }\n        }\n\n        if (typeof cfg.data !== \"undefined\") {\n            cfg.data += \"\";\n        }\n\n        if (async) {\n            xhr.onreadystatechange = function () {\n                log(\"xhr.onreadystatechange - xhr.readyState: \" + xhr.readyState, LOG_SRC);\n                if (xhr.readyState === 4) {\n                    requestComplete(xhr, cfg);\n                }\n            };\n        }\n\n        xhr.send(cfg.data);\n\n        if (async) {\n            return xhr;\n        }\n\n        return requestComplete(xhr, cfg);\n    };\n\n    //\n    // Synchronos xhr handling is unsupported in node\n    //\n    TinCan.LRS.syncEnabled = false;\n\n    TinCan.LRS.prototype._getMultipartRequestData = function (boundary, jsonContent, requestAttachments) {\n        var parts = [],\n            i;\n\n        parts.push(\n            __createJSONSegment(\n                boundary,\n                jsonContent\n            )\n        );\n        for (i = 0; i < requestAttachments.length; i += 1) {\n            if (requestAttachments[i].content !== null) {\n                parts.push(\n                    __createAttachmentSegment(\n                        boundary,\n                        requestAttachments[i].content,\n                        requestAttachments[i].sha2,\n                        requestAttachments[i].contentType\n                    )\n                );\n            }\n        }\n        if (typeof Buffer.from === \"undefined\") {\n            parts.push( new Buffer(\"\\r\\n--\" + boundary + \"--\\r\\n\") );\n        }\n        else {\n            parts.push( Buffer.from(\"\\r\\n--\" + boundary + \"--\\r\\n\") );\n        }\n\n        return Buffer.concat(parts);\n    };\n\n    __createJSONSegment = function (boundary, jsonContent) {\n        var content = [\n                \"--\" + boundary,\n                \"Content-Type: application/json\",\n                \"\",\n                JSON.stringify(jsonContent)\n            ].join(\"\\r\\n\");\n\n        content += \"\\r\\n\";\n\n        if (typeof Buffer.from === \"undefined\") {\n            return new Buffer(content);\n        }\n        return Buffer.from(content);\n    };\n\n    __createAttachmentSegment = function (boundary, content, sha2, contentType) {\n        var bufferParts = [],\n            header = [\n                \"--\" + boundary,\n                \"Content-Type: \" + contentType,\n                \"Content-Transfer-Encoding: binary\",\n                \"X-Experience-API-Hash: \" + sha2\n            ].join(\"\\r\\n\");\n\n        header += \"\\r\\n\\r\\n\";\n\n        if (typeof Buffer.from === \"undefined\") {\n            bufferParts.push( new Buffer(header) );\n            bufferParts.push( new Buffer(content) );\n        }\n        else {\n            bufferParts.push(Buffer.from(header));\n            bufferParts.push(Buffer.from(content));\n        }\n\n        return Buffer.concat(bufferParts);\n    };\n\n    TinCan.Utils.stringToArrayBuffer = function (content, encoding) {\n        var b,\n            ab,\n            view,\n            i;\n\n        if (! encoding) {\n            encoding = TinCan.Utils.defaultEncoding;\n        }\n\n        if (typeof Buffer.from === \"undefined\") {\n            // for Node.js prior to v4.x\n            b = new Buffer(content, encoding);\n\n            ab = new ArrayBuffer(b.length);\n            view = new Uint8Array(ab);\n            for (i = 0; i < b.length; i += 1) {\n                view[i] = b[i];\n            }\n\n            return ab;\n        }\n\n        b = Buffer.from(content, encoding);\n        ab = b.buffer;\n\n        //\n        // this .slice is required because of the internals of how Buffer is\n        // implemented, it uses a shared ArrayBuffer underneath for small buffers\n        // see http://stackoverflow.com/a/31394257/1464957\n        //\n        return ab.slice(b.byteOffset, b.byteOffset + b.byteLength);\n    };\n\n    TinCan.Utils.stringFromArrayBuffer = function (content, encoding) {\n        var b,\n            view,\n            i;\n\n        if (! encoding) {\n            encoding = TinCan.Utils.defaultEncoding;\n        }\n\n        if (typeof Buffer.from === \"undefined\") {\n            // for Node.js prior to v4.x\n            b = new Buffer(content.byteLength);\n\n            view = new Uint8Array(content);\n            for (i = 0; i < b.length; i += 1) {\n                b[i] = view[i];\n            }\n        }\n        else {\n            b = Buffer.from(content);\n        }\n\n        return b.toString(encoding);\n    };\n}());\n","var Buffer = require('buffer').Buffer\n\nmodule.exports = function (buf) {\n\t// If the buffer is backed by a Uint8Array, a faster version will work\n\tif (buf instanceof Uint8Array) {\n\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\treturn buf.buffer\n\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t// Otherwise we need to get a proper copy\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t}\n\t}\n\n\tif (Buffer.isBuffer(buf)) {\n\t\t// This is the slow version that will work with any Buffer\n\t\t// implementation (even in old browsers)\n\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\tvar len = buf.length\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tarrayCopy[i] = buf[i]\n\t\t}\n\t\treturn arrayCopy.buffer\n\t} else {\n\t\tthrow new Error('Argument must be a Buffer')\n\t}\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","import { bus } from 'partybus';\nimport { mutationWatch } from './mutationobserver';\nimport * as most from 'most';\n\nmutationWatch('[learning-element]:not([transformed])', 'learningElements::found');\n\nlet cache = {};\n\nmost.fromEvent('watcher::transformComplete', bus)\n  .tap(() => { cache = {} })\n  .drain();\n\nconsole.log('CREATE WATCH STREAM', Date.now());\n\nconst learningElement$ = most.fromEvent('learningElements::found', bus)\n  .flatMap(els => most.from(els) )\n  .filter(el => cache[el.getAttribute('learning-element-ref')] !== true )\n  .tap(el => cache[el.getAttribute('learning-element-ref')] = true )\n  .tap(el => el.setAttribute('transformed', true) );\n\nexport { learningElement$ };\n\n// el contract attrs:\n// learning-element=\"poll\"\n// learning-element-ref=\"identifier\" //TODO: discuss uniqueness of identifier, how is this managed?\n// transformed (when element is sent for transformation)\n\n// EXAMPLE IMPLEMENTATION:\n//learningElements$\n//  .filter(el => el.getAttribute('learning-element') === 'poll')\n//  .tap(el => el.append('<div class=\"mount\"></div>') )\n//.drain()","import { bus } from 'partybus';\n\nconst MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\nlet mutationListeners = [];\n\nconst observer = new MutationObserver(function(mutations) {\n  mutationListeners.forEach(function({ selector, emitMessage }){\n    //selector: '[learning-element]:not([transformed])'\n    //emitMessage: `learningElement::found`\n    const transformables = document.querySelectorAll(selector);\n    if(transformables.length > 0){\n      bus.emit(emitMessage, transformables);\n    } else {\n      bus.emit('watcher::transformComplete');\n    }\n  })\n});\n\nobserver.observe(document, { attributes: true, childList: true, characterData: true, subtree: true });\n\nconst mutationWatch = (selector, emitMessage) => {\n  mutationListeners.push({selector, emitMessage})\n};\n\nexport { mutationWatch };\n","import { mutationWatch } from './mutationobserver';\nimport { learningElement$ } from './learningElementWatch';\n\nexport {\n  mutationWatch,\n  learningElement$\n};","// Generated by CoffeeScript 1.6.3\n(function() {\n  var InvalidStateError, NetworkError, SecurityError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestProgressEvent, XMLHttpRequestUpload, http, https, os, url, _ref,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  XMLHttpRequestEventTarget = (function() {\n    function XMLHttpRequestEventTarget() {\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.ontimeout = null;\n      this.onloadend = null;\n      this._listeners = {};\n    }\n\n    XMLHttpRequestEventTarget.prototype.onloadstart = null;\n\n    XMLHttpRequestEventTarget.prototype.onprogress = null;\n\n    XMLHttpRequestEventTarget.prototype.onabort = null;\n\n    XMLHttpRequestEventTarget.prototype.onerror = null;\n\n    XMLHttpRequestEventTarget.prototype.onload = null;\n\n    XMLHttpRequestEventTarget.prototype.ontimeout = null;\n\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n\n    XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {\n      var _base;\n      eventType = eventType.toLowerCase();\n      (_base = this._listeners)[eventType] || (_base[eventType] = []);\n      this._listeners[eventType].push(listener);\n      return void 0;\n    };\n\n    XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {\n      var index;\n      eventType = eventType.toLowerCase();\n      if (this._listeners[eventType]) {\n        index = this._listeners[eventType].indexOf(listener);\n        if (index !== -1) {\n          this._listeners.splice(index, 1);\n        }\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {\n      var eventType, listener, listeners, _i, _len;\n      eventType = event.type;\n      if (listeners = this._listeners[eventType]) {\n        for (_i = 0, _len = listeners.length; _i < _len; _i++) {\n          listener = listeners[_i];\n          listener(event);\n        }\n      }\n      if (listener = this[\"on\" + eventType]) {\n        listener(event);\n      }\n      return void 0;\n    };\n\n    return XMLHttpRequestEventTarget;\n\n  })();\n\n  http = require('http');\n\n  https = require('https');\n\n  os = require('os');\n\n  url = require('url');\n\n  XMLHttpRequest = (function(_super) {\n    __extends(XMLHttpRequest, _super);\n\n    function XMLHttpRequest(options) {\n      XMLHttpRequest.__super__.constructor.call(this);\n      this.onreadystatechange = null;\n      this._anonymous = options && options.anon;\n      this.readyState = XMLHttpRequest.UNSENT;\n      this.response = null;\n      this.responseText = '';\n      this.responseType = '';\n      this.status = 0;\n      this.statusText = '';\n      this.timeout = 0;\n      this.upload = new XMLHttpRequestUpload(this);\n      this._method = null;\n      this._url = null;\n      this._sync = false;\n      this._headers = null;\n      this._loweredHeaders = null;\n      this._mimeOverride = null;\n      this._request = null;\n      this._response = null;\n      this._responseParts = null;\n      this._responseHeaders = null;\n      this._aborting = null;\n      this._error = null;\n      this._loadedBytes = 0;\n      this._totalBytes = 0;\n      this._lengthComputable = false;\n    }\n\n    XMLHttpRequest.prototype.onreadystatechange = null;\n\n    XMLHttpRequest.prototype.readyState = null;\n\n    XMLHttpRequest.prototype.response = null;\n\n    XMLHttpRequest.prototype.responseText = null;\n\n    XMLHttpRequest.prototype.responseType = null;\n\n    XMLHttpRequest.prototype.status = null;\n\n    XMLHttpRequest.prototype.timeout = null;\n\n    XMLHttpRequest.prototype.upload = null;\n\n    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {\n      var xhrUrl;\n      method = method.toUpperCase();\n      if (method in this._restrictedMethods) {\n        throw new SecurityError(\"HTTP method \" + method + \" is not allowed in XHR\");\n      }\n      xhrUrl = this._parseUrl(url);\n      if (async === void 0) {\n        async = true;\n      }\n      switch (this.readyState) {\n        case XMLHttpRequest.UNSENT:\n        case XMLHttpRequest.OPENED:\n        case XMLHttpRequest.DONE:\n          null;\n          break;\n        case XMLHttpRequest.HEADERS_RECEIVED:\n        case XMLHttpRequest.LOADING:\n          null;\n      }\n      this._method = method;\n      this._url = xhrUrl;\n      this._sync = !async;\n      this._headers = {};\n      this._loweredHeaders = {};\n      this._mimeOverride = null;\n      this._setReadyState(XMLHttpRequest.OPENED);\n      this._request = null;\n      this._response = null;\n      this.status = 0;\n      this.statusText = '';\n      this._responseParts = [];\n      this._responseHeaders = null;\n      this._loadedBytes = 0;\n      this._totalBytes = 0;\n      this._lengthComputable = false;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.setRequestHeader = function(name, value) {\n      var loweredName;\n      if (this.readyState !== XMLHttpRequest.OPENED) {\n        throw new InvalidStateError(\"XHR readyState must be OPENED\");\n      }\n      loweredName = name.toLowerCase();\n      if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n        console.warn(\"Refused to set unsafe header \\\"\" + name + \"\\\"\");\n        return void 0;\n      }\n      value = value.toString();\n      if (loweredName in this._loweredHeaders) {\n        name = this._loweredHeaders[loweredName];\n        this._headers[name] = this._headers[name] + ', ' + value;\n      } else {\n        this._loweredHeaders[loweredName] = name;\n        this._headers[name] = value;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.send = function(data) {\n      if (this.readyState !== XMLHttpRequest.OPENED) {\n        throw new InvalidStateError(\"XHR readyState must be OPENED\");\n      }\n      if (this._request) {\n        throw new InvalidStateError(\"send() already called\");\n      }\n      switch (this._url.protocol) {\n        case 'file:':\n          this._sendFile(data);\n          break;\n        case 'http:':\n        case 'https:':\n          this._sendHttp(data);\n          break;\n        default:\n          throw new NetworkError(\"Unsupported protocol \" + this._url.protocol);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.abort = function() {\n      if (!this._request) {\n        return;\n      }\n      this._request.abort();\n      this._setError();\n      this._dispatchProgress('abort');\n      this._dispatchProgress('loadend');\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.getResponseHeader = function(name) {\n      var loweredName;\n      if (!this._responseHeaders) {\n        return null;\n      }\n      loweredName = name.toLowerCase();\n      if (loweredName in this._responseHeaders) {\n        return this._responseHeaders[loweredName];\n      } else {\n        return null;\n      }\n    };\n\n    XMLHttpRequest.prototype.getAllResponseHeaders = function() {\n      var lines, name, value;\n      if (!this._responseHeaders) {\n        return '';\n      }\n      lines = (function() {\n        var _ref, _results;\n        _ref = this._responseHeaders;\n        _results = [];\n        for (name in _ref) {\n          value = _ref[name];\n          _results.push(\"\" + name + \": \" + value);\n        }\n        return _results;\n      }).call(this);\n      return lines.join(\"\\r\\n\");\n    };\n\n    XMLHttpRequest.prototype.overrideMimeType = function(newMimeType) {\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n      }\n      this._mimeOverride = newMimeType.toLowerCase();\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.nodejsSet = function(options) {\n      if ('httpAgent' in options) {\n        this.nodejsHttpAgent = options.httpAgent;\n      }\n      if ('httpsAgent' in options) {\n        this.nodejsHttpsAgent = options.httpsAgent;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.nodejsSet = function(options) {\n      XMLHttpRequest.prototype.nodejsSet(options);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype.UNSENT = 0;\n\n    XMLHttpRequest.UNSENT = 0;\n\n    XMLHttpRequest.prototype.OPENED = 1;\n\n    XMLHttpRequest.OPENED = 1;\n\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;\n\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n\n    XMLHttpRequest.prototype.LOADING = 3;\n\n    XMLHttpRequest.LOADING = 3;\n\n    XMLHttpRequest.prototype.DONE = 4;\n\n    XMLHttpRequest.DONE = 4;\n\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;\n\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;\n\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    };\n\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      'user-agent': true,\n      via: true\n    };\n\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    };\n\n    XMLHttpRequest.prototype._userAgent = (\"Mozilla/5.0 (\" + (os.type()) + \" \" + (os.arch()) + \") \") + (\"node.js/\" + process.versions.node + \" v8/\" + process.versions.v8);\n\n    XMLHttpRequest.prototype._setReadyState = function(newReadyState) {\n      var event;\n      this.readyState = newReadyState;\n      event = new XMLHttpRequestProgressEvent('readystatechange', this);\n      this.dispatchEvent(event);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._sendFile = function() {\n      if (this._url.method !== 'GET') {\n        throw new NetworkError('The file protocol only supports GET');\n      }\n      throw new Error(\"Protocol file: not implemented\");\n    };\n\n    XMLHttpRequest.prototype._sendHttp = function(data) {\n      if (this._sync) {\n        throw new Error(\"Synchronous XHR processing not implemented\");\n      }\n      if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {\n        console.warn(\"Discarding entity body for \" + this._method + \" requests\");\n        data = null;\n      } else {\n        data || (data = '');\n      }\n      this.upload._setData(data);\n      this._finalizeHeaders();\n      this._sendHxxpRequest();\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._sendHxxpRequest = function() {\n      var agent, hxxp, request,\n        _this = this;\n      if (this._url.protocol === 'http:') {\n        hxxp = http;\n        agent = this.nodejsHttpAgent;\n      } else {\n        hxxp = https;\n        agent = this.nodejsHttpsAgent;\n      }\n      request = hxxp.request({\n        hostname: this._url.hostname,\n        port: this._url.port,\n        path: this._url.path,\n        auth: this._url.auth,\n        method: this._method,\n        headers: this._headers,\n        agent: agent\n      });\n      this._request = request;\n      if (this.timeout) {\n        request.setTimeout(this.timeout, function() {\n          return _this._onHttpTimeout(request);\n        });\n      }\n      request.on('response', function(response) {\n        return _this._onHttpResponse(request, response);\n      });\n      request.on('error', function(error) {\n        return _this._onHttpRequestError(request, error);\n      });\n      this.upload._startUpload(request);\n      if (this._request === request) {\n        this._dispatchProgress('loadstart');\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._finalizeHeaders = function() {\n      this._headers['Connection'] = 'keep-alive';\n      this._headers['Host'] = this._url.host;\n      if (this._anonymous) {\n        this._headers['Referer'] = 'about:blank';\n      }\n      this._headers['User-Agent'] = this._userAgent;\n      this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._onHttpResponse = function(request, response) {\n      var lengthString,\n        _this = this;\n      if (this._request !== request) {\n        return;\n      }\n      switch (response.statusCode) {\n        case 301:\n        case 302:\n        case 303:\n        case 307:\n        case 308:\n          this._url = this._parseUrl(response.headers['location']);\n          this._method = 'GET';\n          if ('content-type' in this._loweredHeaders) {\n            delete this._headers[this._loweredHeaders['content-type']];\n            delete this._loweredHeaders['content-type'];\n          }\n          if ('Content-Type' in this._headers) {\n            delete this._headers['Content-Type'];\n          }\n          delete this._headers['Content-Length'];\n          this.upload._reset();\n          this._finalizeHeaders();\n          this._sendHxxpRequest();\n          return;\n      }\n      this._response = response;\n      this._response.on('data', function(data) {\n        return _this._onHttpResponseData(response, data);\n      });\n      this._response.on('end', function() {\n        return _this._onHttpResponseEnd(response);\n      });\n      this._response.on('close', function() {\n        return _this._onHttpResponseClose(response);\n      });\n      this.status = this._response.statusCode;\n      this.statusText = http.STATUS_CODES[this.status];\n      this._parseResponseHeaders(response);\n      if (lengthString = this._responseHeaders['content-length']) {\n        this._totalBytes = parseInt(lengthString);\n        this._lengthComputable = true;\n      } else {\n        this._lengthComputable = false;\n      }\n      return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {\n      if (this._response !== response) {\n        return;\n      }\n      this._responseParts.push(data);\n      this._loadedBytes += data.length;\n      if (this.readyState !== XMLHttpRequest.LOADING) {\n        this._setReadyState(XMLHttpRequest.LOADING);\n      }\n      return this._dispatchProgress('progress');\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {\n      if (this._response !== response) {\n        return;\n      }\n      this._parseResponse();\n      this._request = null;\n      this._response = null;\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('load');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpResponseClose = function(response) {\n      var request;\n      if (this._response !== response) {\n        return;\n      }\n      request = this._request;\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('error');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpTimeout = function(request) {\n      if (this._request !== request) {\n        return;\n      }\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('timeout');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {\n      if (this._request !== request) {\n        return;\n      }\n      this._setError();\n      request.abort();\n      this._setReadyState(XMLHttpRequest.DONE);\n      this._dispatchProgress('error');\n      return this._dispatchProgress('loadend');\n    };\n\n    XMLHttpRequest.prototype._dispatchProgress = function(eventType) {\n      var event;\n      event = new XMLHttpRequestProgressEvent(eventType, this);\n      event.lengthComputable = this._lengthComputable;\n      event.loaded = this._loadedBytes;\n      event.total = this._totalBytes;\n      this.dispatchEvent(event);\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._setError = function() {\n      this._request = null;\n      this._response = null;\n      this._responseHeaders = null;\n      this._responseParts = null;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseUrl = function(urlString) {\n      var index, password, user, xhrUrl;\n      xhrUrl = url.parse(urlString, false, true);\n      xhrUrl.hash = null;\n      if (xhrUrl.auth && ((typeof user !== \"undefined\" && user !== null) || (typeof password !== \"undefined\" && password !== null))) {\n        index = xhrUrl.auth.indexOf(':');\n        if (index === -1) {\n          if (!user) {\n            user = xhrUrl.auth;\n          }\n        } else {\n          if (!user) {\n            user = xhrUrl.substring(0, index);\n          }\n          if (!password) {\n            password = xhrUrl.substring(index + 1);\n          }\n        }\n      }\n      if (user || password) {\n        xhrUrl.auth = \"\" + user + \":\" + password;\n      }\n      return xhrUrl;\n    };\n\n    XMLHttpRequest.prototype._parseResponseHeaders = function(response) {\n      var loweredName, name, value, _ref;\n      this._responseHeaders = {};\n      _ref = response.headers;\n      for (name in _ref) {\n        value = _ref[name];\n        loweredName = name.toLowerCase();\n        if (this._privateHeaders[loweredName]) {\n          continue;\n        }\n        if (this._mimeOverride !== null && loweredName === 'content-type') {\n          value = this._mimeOverride;\n        }\n        this._responseHeaders[loweredName] = value;\n      }\n      if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n        this._responseHeaders['content-type'] = this._mimeOverride;\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseResponse = function() {\n      var arrayBuffer, buffer, i, jsonError, view, _i, _ref;\n      if (Buffer.concat) {\n        buffer = Buffer.concat(this._responseParts);\n      } else {\n        buffer = this._concatBuffers(this._responseParts);\n      }\n      this._responseParts = null;\n      switch (this.responseType) {\n        case 'text':\n          this._parseTextResponse(buffer);\n          break;\n        case 'json':\n          this.responseText = null;\n          try {\n            this.response = JSON.parse(buffer.toString('utf-8'));\n          } catch (_error) {\n            jsonError = _error;\n            this.response = null;\n          }\n          break;\n        case 'buffer':\n          this.responseText = null;\n          this.response = buffer;\n          break;\n        case 'arraybuffer':\n          this.responseText = null;\n          arrayBuffer = new ArrayBuffer(buffer.length);\n          view = new Uint8Array(arrayBuffer);\n          for (i = _i = 0, _ref = buffer.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n            view[i] = buffer[i];\n          }\n          this.response = arrayBuffer;\n          break;\n        default:\n          this._parseTextResponse(buffer);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseTextResponse = function(buffer) {\n      var e;\n      try {\n        this.responseText = buffer.toString(this._parseResponseEncoding());\n      } catch (_error) {\n        e = _error;\n        this.responseText = buffer.toString('binary');\n      }\n      this.response = this.responseText;\n      return void 0;\n    };\n\n    XMLHttpRequest.prototype._parseResponseEncoding = function() {\n      var contentType, encoding, match;\n      encoding = null;\n      if (contentType = this._responseHeaders['content-type']) {\n        if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n          return match[1];\n        }\n      }\n      return 'utf-8';\n    };\n\n    XMLHttpRequest.prototype._concatBuffers = function(buffers) {\n      var buffer, length, target, _i, _j, _len, _len1;\n      if (buffers.length === 0) {\n        return new Buffer(0);\n      }\n      if (buffers.length === 1) {\n        return buffers[0];\n      }\n      length = 0;\n      for (_i = 0, _len = buffers.length; _i < _len; _i++) {\n        buffer = buffers[_i];\n        length += buffer.length;\n      }\n      target = new Buffer(length);\n      length = 0;\n      for (_j = 0, _len1 = buffers.length; _j < _len1; _j++) {\n        buffer = buffers[_j];\n        buffer.copy(target, length);\n        length += buffer.length;\n      }\n      return target;\n    };\n\n    return XMLHttpRequest;\n\n  })(XMLHttpRequestEventTarget);\n\n  module.exports = XMLHttpRequest;\n\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n  SecurityError = (function(_super) {\n    __extends(SecurityError, _super);\n\n    function SecurityError() {\n      SecurityError.__super__.constructor.apply(this, arguments);\n    }\n\n    return SecurityError;\n\n  })(Error);\n\n  XMLHttpRequest.SecurityError = SecurityError;\n\n  InvalidStateError = (function(_super) {\n    __extends(InvalidStateError, _super);\n\n    function InvalidStateError() {\n      InvalidStateError.__super__.constructor.apply(this, arguments);\n    }\n\n    return InvalidStateError;\n\n  })(Error);\n\n  InvalidStateError = (function(_super) {\n    __extends(InvalidStateError, _super);\n\n    function InvalidStateError() {\n      _ref = InvalidStateError.__super__.constructor.apply(this, arguments);\n      return _ref;\n    }\n\n    return InvalidStateError;\n\n  })(Error);\n\n  XMLHttpRequest.InvalidStateError = InvalidStateError;\n\n  NetworkError = (function(_super) {\n    __extends(NetworkError, _super);\n\n    function NetworkError() {\n      NetworkError.__super__.constructor.apply(this, arguments);\n    }\n\n    return NetworkError;\n\n  })(Error);\n\n  XMLHttpRequest.NetworkError = NetworkError;\n\n  XMLHttpRequestProgressEvent = (function() {\n    function XMLHttpRequestProgressEvent(type, target) {\n      this.type = type;\n      this.target = target;\n      this.currentTarget = this.target;\n      this.lengthComputable = false;\n      this.loaded = 0;\n      this.total = 0;\n    }\n\n    XMLHttpRequestProgressEvent.prototype.bubbles = false;\n\n    XMLHttpRequestProgressEvent.prototype.cancelable = false;\n\n    XMLHttpRequestProgressEvent.prototype.target = null;\n\n    XMLHttpRequestProgressEvent.prototype.loaded = null;\n\n    XMLHttpRequestProgressEvent.prototype.lengthComputable = null;\n\n    XMLHttpRequestProgressEvent.prototype.total = null;\n\n    return XMLHttpRequestProgressEvent;\n\n  })();\n\n  XMLHttpRequest.XMLHttpRequestProgressEvent = XMLHttpRequestProgressEvent;\n\n  XMLHttpRequestUpload = (function(_super) {\n    __extends(XMLHttpRequestUpload, _super);\n\n    function XMLHttpRequestUpload(request) {\n      XMLHttpRequestUpload.__super__.constructor.call(this);\n      this._request = request;\n      this._reset();\n    }\n\n    XMLHttpRequestUpload.prototype._reset = function() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._setData = function(data) {\n      var body, i, offset, view, _i, _j, _ref1, _ref2;\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n      if (typeof data === 'string') {\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n        this._body = new Buffer(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        body = new Buffer(data.byteLength);\n        view = new Uint8Array(data);\n        for (i = _i = 0, _ref1 = data.byteLength; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n          body[i] = view[i];\n        }\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        body = new Buffer(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n        for (i = _j = 0, _ref2 = data.byteLength; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {\n          body[i] = view[i + offset];\n        }\n        this._body = body;\n      } else {\n        throw new Error(\"Unsupported send() data \" + data);\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n      if (this._body) {\n        headers['Content-Length'] = this._body.length.toString();\n      }\n      return void 0;\n    };\n\n    XMLHttpRequestUpload.prototype._startUpload = function(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n      request.end();\n      return void 0;\n    };\n\n    return XMLHttpRequestUpload;\n\n  })(XMLHttpRequestEventTarget);\n\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n\n}).call(this);\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","// firebase\n// tincan\n// localstore\nimport R from 'ramda';\nimport * as most from 'most';\n\nvar dataSetup = function({ sessionId, ref, options, config, dataSource }){\n  //TODO: get active data sources from index/config? get the init for them as well?\n  //TODO: activity is structured like this as well... can communicate through bus (ex. current section, user, etc...)... has its own data set/get with completion etc...\n  //TODO: events on initial setup for all -- multicast/behaviorsubject/etc activity to send last? OR send message to activity with stream and it will register it (have teardown setup)\n\n  // fake data implementation\n  // localstorage implementation\n  // generic ajax/REST api impelementation for any remote datasource...\n  // tincan implementation\n  // firebase implementation\n\n  // TODO: add this to readme and code in...\n  // ORDER OF IMPORTANCE FOR SETUP DATA\n  // 1. [options] attrs (*preferred*) <index.html, setup.js, data.js>\n  // 2. [config] hooks (`config` function that takes object sent back from import of this library, merged in) [only place you can add functions] <config.js, setup.js, data.js>\n  // 3. persisted data <setup.js, data.js>\n  // 4. defaults in code <setup.js>\n\n  // this may come from firebase at some point? \\\\\n\n  var getConfig$ = most.just(config);\n\n  //////////\n  // test //\n  //////////\n\n  // can add delays and periodic updates to test more 'reactive' scenarios (ex. .periodic(20000).delay(200))\n\n  var testData = dataSource.test;\n\n  if(testData){\n\n    var planId = R.path(['plan', 'id'])(config);\n    var planData = R.compose(R.propOr({}, planId))(testData);\n\n    var getActionplanData$ = most.just(planData);\n    var setActionplanData = function({}){ /* dev/null */ };\n\n  }\n\n  ////////////\n  // tincan //\n  ////////////\n\n  //TODO: make seperate api, instead of overwrite same variables...? have tincan + test data or tincan & firebase, etc...\n\n  // reactive tincan... on set callback, trigger get (most.fromPromise ajax?)\n\n  var tincanApi = dataSource.tincan;\n\n  if(tincanApi){\n\n    var planId = R.path(['plan', 'id'])(config);\n\n    var getActionplanData$ = tincanApi.getActionplanData({ identifier: planId });\n    var setActionplanData = tincanApi.setActionplanData;\n\n  }\n\n  //////////////\n  // firebase //\n  //////////////\n\n  var firebaseConfig = dataSource.firebase;\n\n  if(firebaseConfig){\n\n    var setResponse = function({  }){ /* store at persist, firebase, tincan, etc... whichever are present, PLUS decorate with activity info first... */ };\n\n  }\n\n  /////////////////////\n  // data access api //\n  /////////////////////\n\n  // decorate with activity info first for search? or add this in loaded.js?\n\n  return {\n    getConfig$,\n    getActionplanData$,\n    setActionplanData\n  };\n\n};\n\nmodule.exports = {\n  dataSetup\n};\n","//TODO: split this out into seperate module?\n\nvar generateUUID = function({ prefix = Date.now(), postfix = Date.now() }){\n  var d = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (d + Math.random()*16)%16 | 0;\n    d = Math.floor(d/16);\n    return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n  });\n  return `${prefix}-${uuid}-${postfix}`;\n};\n\nmodule.exports = {\n  generateUUID: generateUUID\n};","import R from 'ramda';\nimport * as most from 'most';\nimport classie from 'desandro-classie';\nimport { generateUUID } from './helpers.js';\n\nvar snabbdom = require('snabbdom');\nvar h = require('snabbdom/h').default;\nvar patch = snabbdom.init([\n  require('snabbdom/modules/class').default,\n  require('snabbdom/modules/props').default,\n  require('snabbdom/modules/attributes').default,\n  require('snabbdom/modules/style').default,\n  require('snabbdom/modules/eventlisteners').default\n]);\n\nimport virtualize from 'snabbdom-virtualize';\n\n// makeSnabbdomClasses('class1 class2 class3') === { class1: true, class2: true, class3: true }\nvar makeSnabbdomClasses = R.ifElse(R.either(R.isNil, R.isEmpty), R.always({}), R.compose(R.mergeAll, R.map(R.objOf(R.__, true)), R.split(' ')));\n\nvar loaded = function(learningElement){\n  var { el, ref, sessionId, emitter, bus, data, globalConfiguration, config } = learningElement;\n\n  var teardown$ = most.fromEvent(`teardown`, emitter).take(1);\n\n  ///////////\n  // view //\n  /////////\n\n  //var handleTrueFalseResponse = function(context){\n  //  return event => {\n  //    console.log(context, event);\n  //  }\n  //};\n  //\n  //var trueFalseQuestion = function(questionData){\n  //  var query = R.pathOr('', ['query'], questionData);\n  //  var responses = R.pathOr({}, ['responses'], questionData);\n  //  var trueResponseHtml = responses.true.markup;\n  //  var falseResponseHtml = responses.false.markup;\n  //\n  //  // randomize order of responses? option on the question and the assessment level?\n  //\n  //  // {\"id\":\"500567\",\"type\":\"trueFalse\",\"weight\":3,\"topics\":[\"200457\"],\"relations\":[\"500568\"],\"correctives\":[\"300403\"],\"context\":[\"Course 1\"],\"title\":\"Measure 1\",\"query\":\"Is this orange?\",\"responses\":{\"true\":{\"value\":\"Yes\",\"markup\":\"<button>Yes</button>\",\"feedback\":\"<p style=\\\"color:green;\\\">Correct!</p>\"},\"false\":{\"value\":\"No\",\"markup\":\"<button>No</button>\",\"feedback\":\"<p style=\\\"color:red;\\\">Incorrect :(</p>\"}},\"actions\":{}}\n  //\n  //  return h('div', {}, [\n  //    h('div', {}, query),\n  //    h('div', {}, [\n  //      h('div', { on: { click: handleTrueFalseResponse({ question: questionData, response: responses.true }) } }, virtualize(trueResponseHtml)),\n  //      h('div', { on: { click: handleTrueFalseResponse({ question: questionData, response: responses.false }) } }, virtualize(falseResponseHtml))\n  //    ])\n  //  ]);\n  //};\n  //\n  //var question = function(questionData){\n  //  return h('div', { class: { 'assessment-question': true, 'row': true } }, [\n  //    h('div', { class: { [`assessment-${R.prop('type', questionData)}`]: true, 'col-xs-12': true } }, [\n  //      h('div', { class: { 'box': true } }, [\n  //        R.cond([\n  //          [R.propEq('type', 'trueFalse'), trueFalseQuestion],\n  //          [R.T, R.always('')]\n  //        ])(questionData)\n  //      ])\n  //    ])\n  //  ]);\n  //};\n  //\n  //var mountedNext = function(model){\n  //  var next = R.pathOr('', ['assessment', 'next'], model);\n  //\n  //  return wrapper(model, 'mountedNext', [\n  //    question(next)\n  //  ]);\n  //};\n\n  //////////////\n  // question //\n  //////////////\n\n  var questionTitle = function(model){\n    var element = R.pathOr('p', ['data', 'config', 'element', 'meta', 'markup', 'element'], model);\n    var classes = R.pathOr('', ['data', 'config', 'element', 'meta', 'markup', 'classes'], model);\n    var value = R.pathOr('---', ['data', 'config', 'element', 'meta', 'text'], model);\n    var title = R.compose(\n      R.replace(/\\{\\{text\\}\\}/, value),\n      R.pathOr(value, ['data', 'config', 'element', 'meta', 'template'])\n    )(model);\n\n    return h('div', {}, [\n      h(element, { class: makeSnabbdomClasses(classes) }, [\n        virtualize(title)\n      ])\n    ])\n  };\n\n  var handleEditorEntry = function(elm, text, context){\n    most.fromEvent('input', elm)\n      .debounce(700)\n      .map(event => ({ value: event.target.value, ref: event.target.dataset.ref }))\n      .tap((data) => { emitter.emit('intent', { type: 'setValue', context: { value: data.value, text, context  } }) })\n      .takeUntil(teardown$)\n      .drain();\n  };\n\n  var editor = function(model){\n    var placeholder = R.pathOr('', ['data', 'config', 'element', 'meta', 'placeholder'], model);\n    var text = R.pathOr('', ['data', 'config', 'element', 'meta', 'text'], model);\n    var context = R.pathOr('', ['data', 'config', 'element', 'meta', 'context'], model);\n    var value = R.pathOr('', ['takeaway', ref, 'value'], model);\n\n    var insert = function(vnode){ handleEditorEntry(vnode.elm, text, context); };\n\n    return h('textarea', { attrs: { placeholder, [`data-ref`]: ref }, props: { value }, hook: { insert } }, []);\n  };\n\n  var question = function(model){\n    var prehead = R.pathOr('', ['data', 'config', 'element', 'html', 'prehead'], model);\n    var prebody = R.pathOr('', ['data', 'config', 'element', 'html', 'prebody'], model);\n    var prefoot = R.pathOr('', ['data', 'config', 'element', 'html', 'prefoot'], model);\n\n    return h('div', { class: { 'question': true } }, [\n      virtualize(prehead),\n      questionTitle(model),\n      virtualize(prebody),\n      editor(model),\n      virtualize(prefoot)\n    ]);\n  };\n\n  //////////////\n  // takeaway //\n  //////////////\n\n  var takeawaySection = function(model){\n    return function(sectionData, ref){\n      // sectionData :: { value: '', text: '', context: [ section, date ] }\n      var element = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'child', 'element'], model);\n      var classes = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'child', 'classes'], model);\n      var questionElement = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'question', 'element'], model);\n      var questionClasses = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'question', 'classes'], model);\n      var responseElement = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'response', 'element'], model);\n      var responseClasses = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'response', 'classes'], model);\n      var contextSectionElement = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'section', 'element'], model);\n      var contextSectionClasses = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'section', 'classes'], model);\n      var contextDateElement = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'date', 'element'], model);\n      var contextDateClasses = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'date', 'classes'], model);\n      var contextSectionShouldDisplay = R.pathOr(false, ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'section', 'display'], model);\n      var contextDateShouldDisplay = R.pathOr(false, ['data', 'config', 'element', 'meta', 'each', 'markup', 'inner', 'context', 'date', 'display'], model);\n\n      var value = R.compose(\n        virtualize,\n        R.join(''),\n        R.map(function(line){ return `<p>${line}</p>` }),\n        R.split('\\n'),\n        R.pathOr('---', ['value'])\n      )(sectionData);\n\n      var text = R.pathOr('---', ['text'], sectionData);\n      var context = R.pathOr([], ['context'], sectionData);\n      var section = R.pathOr('---', [0], context);\n      var date = R.pathOr('---', [1], context);\n\n      return h(element, { class: R.merge(makeSnabbdomClasses(classes), { 'takeaway-section': true }) }, [\n        h(questionElement, { class: makeSnabbdomClasses(questionClasses) }, text),\n        contextSectionShouldDisplay ? h(contextSectionElement, { class: makeSnabbdomClasses(contextSectionClasses) }, section) : '',\n        contextDateShouldDisplay ? h(contextDateElement, { class: makeSnabbdomClasses(contextDateClasses) }, date) : '',\n        h(responseElement, { class: makeSnabbdomClasses(responseClasses) }, value)\n      ]);\n    }\n  };\n\n  var takeawayBody = function(model){\n    var loaderHtml = R.pathOr(null, ['data', 'config', 'element', 'loader'], model);\n    var element = R.pathOr('ul', ['data', 'config', 'element', 'meta', 'each', 'markup', 'parent', 'element'], model);\n    var classes = R.pathOr('', ['data', 'config', 'element', 'meta', 'each', 'markup', 'parent', 'classes'], model);\n    var takeaways = R.pathOr({}, ['takeaway'], model);\n    var sections = R.compose(\n      R.values,\n      R.mapObjIndexed(takeawaySection(model))\n    )(takeaways);\n\n    //TODO: section ordering done here?\n\n    if(sections.length > 0){\n      return h(element, { class: makeSnabbdomClasses(classes) }, sections);\n    } else {\n      return loaderHtml ? h('div', {}, [ virtualize(loaderHtml) ]) : h('div', {}, '');\n    }\n  };\n\n  var takeawayHead = function(model){\n    var element = R.pathOr('p', ['data', 'config', 'element', 'meta', 'markup', 'element'], model);\n    var classes = R.pathOr('', ['data', 'config', 'element', 'meta', 'markup', 'classes'], model);\n    var title = R.pathOr('Your Takeaway:', ['data', 'config', 'element', 'meta', 'markup', 'title'], model);\n    return h(element, { class: makeSnabbdomClasses(classes) }, title);\n  };\n\n  var takeaway = function(model){\n    var prehead = R.pathOr('', ['data', 'config', 'element', 'html', 'prehead'], model);\n    var prebody = R.pathOr('', ['data', 'config', 'element', 'html', 'prebody'], model);\n    var prefoot = R.pathOr('', ['data', 'config', 'element', 'html', 'prefoot'], model);\n\n    return h('div', { class: { 'takeaway': true } }, [\n      virtualize(prehead),\n      takeawayHead(model),\n      virtualize(prebody),\n      h('div', { class: { 'takeaway-sections': true } }, takeawayBody(model)),\n      virtualize(prefoot)\n    ]);\n  };\n\n  //////////\n  // base //\n  //////////\n\n  var wrapper = function(model, mode, children){\n    return h('div', { class: { 'actionplan': true, 'row': true, [`actionplan-mode-${mode}`]: true } }, [\n      h('div', { class: { [`actionplan-${mode}`]: true, 'col-xs-12': true } }, [\n        h('div', { class: { 'box': true } }, [\n          //JSON.stringify(model),\n          ...children\n        ])\n      ])\n    ]);\n  };\n\n  var start = function(model){\n    return wrapper(model, 'start', [\n      R.cond([\n        [R.pathEq(['data', 'config', 'element', 'type'], 'takeaway'), takeaway],\n        [R.pathEq(['data', 'config', 'element', 'type'], 'question'), question],\n        [R.T, R.always('---')]\n      ])(model)\n    ]);\n  };\n\n  var loading = function(model){\n    var loaderHtml = R.pathOr(null, ['data', 'config', 'element', 'loader'], model);\n\n    if(loaderHtml){\n      return wrapper(model, 'loading', [\n        h('div', {}, [\n          virtualize(loaderHtml)\n        ])\n      ])\n    } else {\n      return wrapper(model, 'loading', [])\n    }\n  };\n\n  var vdom = function(model){\n    var dataHasNotLoaded = R.compose(R.pathEq(['data', 'config'], undefined));\n\n    return R.ifElse(\n        R.anyPass([\n          dataHasNotLoaded\n        ]),\n        loading,\n        R.cond([\n          [R.propEq('mode', 'start'), start],\n          //[R.propEq('mode', 'pickNext'), start],\n          ////[R.propEq('mode', 'pickedNext'), start],\n          //[R.propEq('mode', 'mountNext'), mountedNext],\n          ////[R.propEq('mode', 'mountedNext'), start],\n          //[R.propEq('mode', 'mountProgress'), start],\n          ////[R.propEq('mode', 'mountedProgress'), start],\n          //[R.propEq('mode', 'mountCompleted'), start],\n          ////[R.propEq('mode', 'mountedCompleted'), start],\n          [R.T, loading]\n        ])\n    )(model);\n  };\n\n  //////////////////////\n  // update machinery //\n  //////////////////////\n\n  var modelSeed = {\n    loader: R.pathOr('', ['loader'], globalConfiguration)\n  };\n\n  var mountSeed = el.querySelector('.mount');\n\n  var intentSeed = { type: 'init', context: {} };\n\n  /////////\n  // NAP //\n  /////////\n\n  var shouldStart = function(model){\n    //NOTE: this may be called many times (because many events get onto the stream and run in context of nil mode?)\n    emitter.emit('intent', { type: 'changeMode', context: { mode: 'start' } });\n\n    emitter.emit('internal', { type: 'action', context: { type: 'lifecycle', rule: 'shouldStart', ref } });\n\n  };\n\n  var nap = function(lastModel, model){\n    // TODO: nap and vdom both use these 'state indicators' to make decision about actions to take... maybe create them in earlier function and pass into them both for use along with the model?\n    var dataHasLoaded = R.compose(R.not, R.pathEq(['data', 'config'], undefined))(model);\n    var isMode = (mode) => R.pathSatisfies(R.equals(mode), ['mode'], model);\n    var duplicateMode = R.eqProps('mode', lastModel, model);\n\n    var isBeginState = R.pathSatisfies(R.isNil, ['mode'], model) && dataHasLoaded;\n    var isStartState = isMode('start') && !duplicateMode;\n\n    if(isBeginState){\n      shouldStart(model);\n    }\n\n    //if(isStartState){\n    //  shouldContinue(model)\n    //}\n\n    return model;\n\n  };\n\n  /////////////\n  // persist //\n  /////////////\n\n  var persist = function(model){\n    var planId = R.pathOr('---', ['data', 'config', 'plan', 'id'], model);\n    var value = R.pathOr(null, ['value'], model);\n    var isNewTakeaway = R.pathOr(null, ['newTakeaway'], model);\n    var takeaway = R.pathOr({}, ['takeaway'], model);\n    var newPlan = { [planId]: takeaway };\n\n    if(isNewTakeaway){\n      emitter.emit('data::setActionplanData', newPlan);\n      emitter.emit('bus::sendMessage', { id: planId, ref, type: 'newPlan', context: { newPlan } });\n      emitter.emit('intent', { type: 'setNewTakeaway', context: { newTakeaway: false } });\n    }\n\n    return model;\n\n  };\n\n  /////////////////////\n  // present/propose //\n  /////////////////////\n\n  var present = function(model, intent){\n    // intent { type: 'updateChangeModeToPickNext', { next: { ... }, mode: 'pickNext' } }\n    // proposal { model, intent, errors }\n\n    // validation :: proposal -> proposal' (errors added if applicable)\n    // transformation :: proposal -> proposal' (if error adds error data to model, if no error transforms model)\n\n    // TODO: transaction: [Either, Either, Either] if any fail dont run model updates\n    // TODO: use monadic solution? Either, fold, etc...\n\n    // { errors: [] } //seperate from model? so they are not trampled on\n\n    // TODO: async for remote communication?\n    //most.of({ model, intent, errors: {} })\n    //  .map(validate)\n    //  .map(transform)\n    //  .map(R.prop('model'))\n\n    emitter.emit('internal', { step: 'present:intent', context: JSON.stringify(intent) });\n\n    var validateMode = R.ifElse(\n      R.compose(R.has('mode'), R.pathOr({}, ['intent', 'context'])),\n      R.compose(R.identity), //TODO: write validations, if fail add to proposal.errors, if pass update proposal.model\n      R.identity\n    );\n\n    //var validateNext = R.ifElse(\n    //    R.compose(R.has('next'), R.propOr({}, ['intent', 'context'])),\n    //    R.compose(R.identity), //TODO: write validations, if fail add to proposal.errors, if pass update proposal.model\n    //    R.identity\n    //);\n\n    var validations = [ // add to errors obj if necessary\n      validateMode\n      //validateNext\n    ];\n\n    var validate = R.reduce((proposal, validation) => { return validation(proposal); }, R.__, validations);\n\n    var updateMode = proposal => {\n      var intent = R.prop('intent', proposal);\n      return R.ifElse(\n        R.compose(R.has('mode'), R.path(['intent', 'context'])),\n        R.assocPath(['model', 'mode'], R.path(['context', 'mode'], intent)),\n        R.identity\n      )(proposal);\n    };\n\n    //var updateNext = proposal => {\n    //  // TODO: situations for pull are: set 'wait state', send 'request', state update upon return... reactor logic, firebase once, ...? best practices?\n    //\n    //  var pickNextAlgorithm = R.compose(R.head);\n    //  var getNext = R.compose(pickNextAlgorithm, R.pathOr([], ['model', 'data', 'measureBank'])); //TODO: add logic for remote fetch...\n    //  return R.ifElse(\n    //      R.pathEq(['intent', 'type'], 'changeModeToMountNext'),\n    //      R.assocPath(['model', 'assessment', 'next'], getNext(proposal)),\n    //      R.identity\n    //  )(proposal);\n    //};\n\n    var updateConfig = proposal => {\n      var intent = R.prop('intent', proposal);\n      return R.ifElse(\n          R.compose(R.has('config'), R.path(['intent', 'context'])),\n          R.assocPath(['model', 'data', 'config'], R.path(['context', 'config'], intent)),\n          R.identity\n      )(proposal);\n    };\n\n    var updateActionplanData = proposal => {\n      var intent = R.prop('intent', proposal);\n\n      return R.ifElse(\n          R.compose(R.has('takeaway'), R.path(['intent', 'context'])),\n          R.assocPath(['model', 'takeaway'], R.path(['context', 'takeaway'], intent)),\n          R.identity\n      )(proposal);\n    };\n\n    var updateValue = proposal => {\n      var intent = R.prop('intent', proposal);\n      var value = R.path(['context', 'value'], intent);\n      var text = R.path(['context', 'text'], intent);\n      var context = R.path(['context', 'context'], intent);\n\n      return R.ifElse(\n          R.compose(R.has('value'), R.path(['intent', 'context'])),\n          R.compose(\n            R.assocPath(['model', 'takeaway', ref], { value, text, context }),\n            R.assocPath(['model', 'newTakeaway'], true)\n          ),\n          R.identity\n      )(proposal);\n    };\n\n    var updateNewTakeaway = proposal => {\n      var intent = R.prop('intent', proposal);\n      return R.ifElse(\n          R.compose(R.has('newTakeaway'), R.path(['intent', 'context'])),\n          R.assocPath(['model', 'newTakeaway'], R.path(['context', 'newTakeaway'], intent)),\n          R.identity\n      )(proposal);\n    };\n\n    var transformations = [ // only run if error obj is empty, otherwise add to model.errors\n      updateMode,\n      //updateNext,\n      updateConfig,\n      updateActionplanData,\n      updateValue,\n      updateNewTakeaway\n      //updateBok,\n      //updateMeasureBank,\n      //updateResourceBank,\n      //updatePreviousProgress\n    ];\n\n    var transform = proposal => {\n      return R.ifElse(\n          R.propSatisfies(R.isEmpty, 'errors'),\n          R.reduce((proposal, transformation) => { return transformation(proposal); }, R.__, transformations),\n          R.assocPath(['model', 'errors'], R.path(['errors'], proposal))\n      )(proposal);\n    };\n\n    return R.compose(\n        R.tap((model) => { emitter.emit('internal', { step: 'present:newModel', context: JSON.stringify(model) }); }),\n        R.prop('model'),\n        transform,\n        validate\n    )({ model, intent, errors: {} });\n\n  };\n\n  ////////////\n  // action //\n  ////////////\n\n  var action = function(intent){\n    emitter.emit('internal', '--STEP----------------------------------------');\n    emitter.emit('internal', { step: 'action', type: intent.type, context: JSON.stringify(intent.context) });\n    //emitter.emit('internal', { type: 'action', context: { type: intent.type, context: JSON.stringify(intent.context) } });\n\n    // can do async (ex. 3rd party), processing of 'data' pre access to current model, can fill in defaults to prep data\n    if(intent.type === 'data::getConfig'){\n      return most.of(intent); // can also do processing...\n    }\n\n    if(intent.type === 'data::getActionplan'){\n      return most.of(intent); // can also do processing...\n    }\n\n    if(intent.type === 'bus::getMessage'){ //TODO: handle reactive updates (if takeaway is on same page as question...) without infinite loop?\n      return most.of(intent);\n    }\n\n    if(intent.type === 'setValue'){\n      return most.of(intent); // can also do processing...\n    }\n\n    if(intent.type === 'setNewValue'){\n      return most.of(intent); // can also do processing...\n    }\n\n    if(intent.type === 'setNewTakeaway'){\n      return most.of(intent); // can also do processing...\n    }\n\n    if(intent.type === 'changeMode'){\n      //TODO: remove when all refactord\n      return most.of(intent)\n          .delay(500)\n          .tap(() => { if(intent.context.mode !== 'start'){} });\n    }\n\n    return most.of({ type: 'unknown', context: {} });\n  };\n\n  ////////////////////\n  // update machine //\n  ////////////////////\n\n  //TODO: test... what happens if intent comes in during run of update machine...?\n\n  //TODO: instead of direct return from the functions nap, propose and action above... emit event and start new part of stream listening!?... what if one takes 'longer' than another? can they start to interleave in incorrect orders? what is the consequence?\n\n  most.fromEvent('intent', emitter)\n      .startWith(intentSeed)\n      .flatMap(action)                         // intent -> data\n      .scan(present, modelSeed)                // model, data -> model'\n    //.flatMap(model => { most.of(model) })    // reactive changes based on new model triggering intents based on 'state', any reason why the nap NEEDS to be after render?\n      .tap(persist)                            // persist model\n      .tap((model) => { emitter.emit('modelUpdated', model) })\n      .takeUntil(teardown$)\n      .drain();\n\n  most.fromEvent('modelUpdated', emitter)\n      .map(vdom)                               // model -> h\n      .scan(patch, mountSeed)                  // mount, h -> h'\n      .timestamp()\n      .tap((renderTime) => { emitter.emit('rendered', renderTime.time) })\n      .takeUntil(teardown$)\n      .drain();\n\n  most.fromEvent('modelUpdated', emitter)\n      .combine((model, renderTime) => { return { model, renderTime }; }, most.fromEvent('rendered', emitter))\n      .skipRepeatsWith(({ model, renderTime }, { prevModel, prevRenderTime }) => { return renderTime === prevRenderTime; })\n      .map(R.prop('model'))\n      .scan(nap, modelSeed)                 // lastModel, model -> model\n      .takeUntil(teardown$)\n      .drain();\n\n  ////////////////////////\n  // data communication //\n  ////////////////////////\n\n  // listen to changes and update remote persistance\n\n  // figure out how to get initial subscribe data?\n  R.propOr({ observe: () => {} }, 'getConfig$', data).takeUntil(teardown$).observe( config => emitter.emit('intent', { type: 'data::getConfig', context: { config } }) );\n  R.propOr({ observe: () => {} }, 'getActionplanData$', data).takeUntil(teardown$).observe( takeaway => emitter.emit('intent', { type: 'data::getActionplan', context: { takeaway } }) );\n\n  var setActionplanData = function(takeaway){\n    var set = R.propOr(function(){}, 'setActionplanData', data);\n    set({ takeaway }).drain(); //TODO: find way to make this universal to firebase and tincan api...\n  };\n\n  most.fromEvent('data::setActionplanData', emitter)\n    .tap(setActionplanData)\n    .takeUntil(teardown$)\n    .drain();\n\n  ////////////////////////////\n  // internal communication //\n  ////////////////////////////\n\n  const internal$ = most.fromEvent('internal', emitter)\n    .takeUntil(teardown$);\n\n  internal$\n    .tap(console.log)\n    .drain();\n\n  ///////////////////////\n  // bus communication //\n  ///////////////////////\n\n  // listen and message between components, allowing for non-nested global communication\n  // registration pattern (send out emitter || subject; reciver sends current state back then updates as needed) [MAKE SURE the stream or emitter has takeuntil teardown or unsubscribe... prefer subject then...]\n  // lifecycle updates\n  // commands for anyone listening (ex. stop all videos playing?)\n\n  most.fromEvent('message', bus)\n    .filter(R.pathEq(['identity', 'type'], 'actionplan'))\n    .tap(message => { emitter.emit('intent', { type: 'bus::getMessage', context: message }) })\n    .takeUntil(teardown$)\n    .drain();\n\n  // ex. meta.type === log... log all lifecycle events globally\n  most.fromEvent('bus::sendMessage', emitter)\n    .tap(({ id, ref, type, context }) => { bus.emit('message', { meta: { type, id, ref }, identity: { type: 'actionplan', id: sessionId }, context }) })\n    .takeUntil(teardown$)\n    .drain();\n\n  //TODO: 'bus registration pattern' [register with activity] send emitter to activity for it to emit messages back || send 'subject' to push onto stream here... on activity events store to model? activity when recieve, hooks up and sends current state then each preceeding state\n\n  //////////////\n  // teardown //\n  //////////////\n\n  // mutationobserver\n  // emitter.emit('teardown')\n\n};\n\nexport {\n  loaded\n};","import R from 'ramda';\nimport * as most from 'most';\nimport { learningElement$ } from 'watcher';\nimport { makeEmitter, bus } from 'partybus';\nimport { generateUUID } from './helpers.js';\nimport { dataSetup } from './data.js';\nimport { loaded } from './loaded.js';\n\nconst configureActionplan = function({configuration, globalConfiguration, dataSource}){\n\n  learningElement$\n    .filter(el => el.getAttribute('learning-element') === 'actionplan')\n    .tap(el => el.innerHTML = '<div class=\"mount\"></div>' )\n    .map(function(el){\n      const sessionId = generateUUID({ prefix: 'actionplan-session' });\n      const emitter = makeEmitter();\n      const ref = el.getAttribute('learning-element-ref');\n      const options = R.unless(R.isNil, JSON.parse)(el.getAttribute('learning-element-options'));\n      const config = R.pathOr({}, [ref], configuration);\n      const data = dataSetup({ sessionId, ref, options, config, dataSource });\n\n      //TODO: best way to make decisions here using data?\n\n      return { el, ref, sessionId, emitter, bus, data };\n    })\n    .tap(loaded)\n    .drain();\n\n};\n\nexport { configureActionplan };"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}